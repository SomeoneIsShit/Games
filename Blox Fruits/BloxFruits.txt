	-------------------------------[[ Others ]]-------------------------------
	local CoreGui = game:GetService("CoreGui")
	local gui = CoreGui:FindFirstChild("ErrorPrompt")
	if not gui then
		gui = Instance.new("ScreenGui")
		gui.Name = "ErrorPrompt"
		gui.ResetOnSpawn = false
		gui.IgnoreGuiInset = true
		gui.Parent = CoreGui
	end
	local errorShown = false
	function showError(message)
		if errorShown then return end
		errorShown = true	
		local overlay = Instance.new("Frame")
		overlay.Name = "ErrorOverlay"
		overlay.Size = UDim2.new(1, 0, 1, 0)
		overlay.Position = UDim2.new(0, 0, 0, 0)
		overlay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		overlay.BackgroundTransparency = 0.75
		overlay.BorderSizePixel = 0
		overlay.Parent = gui
		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(0.6, 0, 0.1, 0)
		label.Position = UDim2.new(0.5, 0, 0.5, 0)
		label.AnchorPoint = Vector2.new(0.5, 0.5)
		label.BackgroundTransparency = 1
		label.TextWrapped = true
		label.TextScaled = true
		label.TextColor3 = Color3.new(0, 0, 0)
		label.Font = Enum.Font.GothamBold
		label.Text = "Erro: [ " .. tostring(message) .. " ]"
		label.Parent = overlay
	end
	function SafeSpawn(func)
		return task.spawn(function()
			local ok, err = pcall(func)
			if not ok then
				showError(err)
				return
			end
		end)
	end
	
	local HttpService = game:GetService("HttpService") -- Service to encode/decode JSON
	local Player = game.Players.LocalPlayer -- Local player
	local PlayerName = Player and Player.Name or "Unknown Player" -- Player name or "unknown"
	local RootFolder = "Someone Hub" -- Root folder
	local MainFolder = "Main" -- Main subfolder
	local GameName = "Blox Fruits" -- Game name (used as subfolder)
	local FilePrefix = "Someone Settings" -- Filename prefix
	local FirstFolderPath = RootFolder .. "/" .. MainFolder -- Path to main subfolder
	local SecondFolderPath = FirstFolderPath .. "/" .. GameName -- Path to game folder
	local SaveFile = SecondFolderPath .. "/" .. FilePrefix .. " - " .. PlayerName .. ".json" -- Full file path
	local secretKey = "mySuperSecretKey" -- Secret key (not used in this script) 
	
	-- Default player settings (default configuration values)
	local S = {
	-- Settings --
	["Select Weapon"] = "Melee",
	["Tween Speed"] = 350,
	["Pos Y"] = 45,
	["Bring Distance"] = 1100,
	["Bring Mobs"] = true,
	["Auto Buso"] = true,
	["Auto Attack"] = true,
	["Select Team"] = "Pirates",
	["Auto Rejoin"] = true,
	["Remove Damage"] = true,
	-- Main --
	["Select Weapon To Farm Mastery"] = "Gun",
	["Select Type"] = "Bones",
	["Farm With V4"] = true,
	-- Quests --
	-- Islands --
	["Select Azure Embers Amount"] = 25,
	-- SeaEvent --
	["Boat Speed"] = 350,
	["Select Sea Level"] = "6",
	["Evade Sea Beast"] = true,
	["Evade Terror"] = true,
	["Repair Boat"] = true,
	["Collect Sea Chests"] = true,
	["Sea Beast"] = true,
	["Terror Shark"] = true,
	["Shark"] = true,
	["Piranhas"] = true,
	["Ghost Ship"] = true,
	["Grand Fleet"] = true,
	["Fleet"] = true,
	-- Fruits --
	["Store Fruits"] = true,
	["Bring Fruits"] = true,
	["Select Raid"] = "Flame",
	-- Teleport --
	-- Stats --
	["Select Points Amount"] = 10,
	["Melee Points"] = true,
	["Defense Points"] = true,
	-- Player --
	["Select Speed"] = 300,
	["Select Jump Power"] = 500,
	["Select Dash Distance"] = 500,
	["Walk On Water"] = true,
	-- Race --
	-- Visual --
	["Font Size"] = 10,
	["Font ESP"] = "FredokaOne",
	-- Shop --
	-- Skills --
	["Use Melee"] = true,
	["Use Sword"] = true,
	["Use Gun"] = true,
	["Use Blox Fruit"] = true,
	["Melee Use Skill Z"] = true,
	["Melee Hold Time Skill Z"] = 0.3,
	["Melee Use Skill V"] = true,
	["Melee Hold Time Skill V"] = 0.3,
	["Melee Use Skill C"] = true,
	["Melee Hold Time Skill C"] = 0.3,
	["Melee Use Skill X"] = true,
	["Melee Hold Time Skill X"] = 0.3,
	["Sword Use Skill Z"] = true,
	["Sword Hold Time Skill Z"] = 0.3,
	["Sword Use Skill X"] = true,
	["Sword Hold Time Skill X"] = 0.3,
	["Gun Use Skill X"] = true,
	["Gun Hold Time Skill X"] = 0.3,
	["Gun Use Skill Z"] = true,
	["Gun Hold Time Skill Z"] = 0.3,
	["Blox Fruit Use Skill X"] = true,
	["Blox Fruit Hold Time Skill X"] = 0.3,
	["Blox Fruit Use Skill F"] = true,
	["Blox Fruit Hold Time Skill F"] = 0.3,
	["Blox Fruit Use Skill V"] = true,
	["Blox Fruit Hold Time Skill V"] = 0.3,
	["Blox Fruit Use Skill Z"] = true,
	["Blox Fruit Hold Time Skill Z"] = 0.3,
	["Blox Fruit Use Skill C"] = true,
	["Blox Fruit Hold Time Skill C"] = 0.3,
	}
	
	-- Encodes the S table to JSON string
	local function EncryptData(data)
		local encrypted = HttpService:JSONEncode(data)
		return encrypted
	end
	
	-- Decode JSON string to table
	local function DecryptData(data)
		local decrypted = HttpService:JSONDecode(data)
		return decrypted
	end
	
	-- Saves current data to a file
	local function SS()
		SafeSpawn(function()
			local dataEncrypted = EncryptData(S)
			if writefile and makefolder then -- Check executor support
				if not isfolder(RootFolder) then makefolder(RootFolder) end
				if not isfolder(FirstFolderPath) then makefolder(FirstFolderPath) end
				if not isfolder(SecondFolderPath) then makefolder(SecondFolderPath) end
				writefile(SaveFile, dataEncrypted) -- Creates and saves the JSON file 
			else
				warn("Seu executor não suporta salvar arquivos.")
			end
		end)
	end
	
	-- Loads data from saved file (if exists), otherwise saves default
	local function LoadSettings()
		if isfile and readfile and isfile(SaveFile) then
			local successRead, dataEncrypted = pcall(readfile, SaveFile)
			if successRead then
				local successDecode, dataDecoded = pcall(DecryptData, dataEncrypted)
				if successDecode then
					for k, v in pairs(dataDecoded) do
						S[k] = v -- update each value with the saved one
					end
				else
					warn("Erro ao decodificar os dados.")
				end
			else
				warn("Erro ao ler o arquivo de configurações.")
			end
		else
			if not (isfile and readfile) then
				warn("Seu executor não suporta leitura de arquivos.")
			end
			SS() -- Creates the file with default values if it does not exist
		end
	end
	
	LoadSettings() -- Performs loading on startup
	
	local placeId = game.PlaceId
	local Sea1 = placeId == 2753915549
	local Sea2 = placeId == 4442272183
	local Sea3 = placeId == 7449423635
	local LocalPlayer = game.Players.LocalPlayer
	local CollectionService = game:GetService("CollectionService")
	
	function FireRemote(...)
	return game.ReplicatedStorage.Remotes.CommF_:InvokeServer(...)
	end
	
	function FireServer(...)
		return game:GetService("ReplicatedStorage").Remotes.CommE:FireServer(...)
	end
	
	function InteractDragonQuest(npc, command)
		args = {
			[1] = {NPC = npc, Command = command}
			}
		return game:GetService("ReplicatedStorage").Modules.Net:FindFirstChild("RF/InteractDragonQuest"):InvokeServer(unpack(args))
	end
	
	if tostring(game.Players.LocalPlayer.Team) == "nil" or tostring(game.Players.LocalPlayer.Team) == "Neutral" then
		if S["Auto Choose Team"] and S["Select Team"] then
			FireRemote("SetTeam", S["Select Team"])
			wait(5)
		end
	end
	
	LocalPlayer["Idled"]:connect(function()
		game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
		wait(1)
		game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
	end)
	
	function SendKey(Key, Time)
		local vim = game:GetService("VirtualInputManager")
		vim:SendKeyEvent(true, Key, false, game)
		task.wait(Time or 0.1)
		vim:SendKeyEvent(false, Key, false, game)
	end
	
	function CheckItem(itemName, itemType)
		for _, v in pairs(FireRemote("getInventory")) do
			if type(v) == "table" and v.Type == itemType and v.Name == itemName then
				return v.Count or true
				end
			end
		return false
	end
	
	function CheckSword(name)
		return CheckItem(name, "Sword")
	end
	
	function CheckGun(name)
		return CheckItem(name, "Gun")
	end
	
	function CheckAccessory(name)
		return CheckItem(name, "Accessory")
	end
	
	function CheckScroll(name)
		return CheckItem(name, "Scroll")
	end
	
	function CheckFruit(name)
		return CheckItem(name, "Fruit")
	end
	
	function VerifyTool(name)
		return (LocalPlayer.Backpack:FindFirstChild(name) ~= nil) or (LocalPlayer.Character:FindFirstChild(name) ~= nil)
	end
	-------------------------------[[ Settings ]]-------------------------------
	
	function EquipTool(v217)
		if game.Players.LocalPlayer.Character:FindFirstChild(v217) then return end
		if game.Players.LocalPlayer.Backpack:FindFirstChild(v217) then
			local v570 = game.Players.LocalPlayer.Backpack:FindFirstChild(v217)
			task.wait()
			game.Players.LocalPlayer.Character.Humanoid:EquipTool(v570)
		end
	end
	
	SafeSpawn(function()
		while task.wait() do
			for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
				if v.ToolTip == _G.SelectWeapon then
					SelectWeapon = v.Name
				end
			end
		end
	end)
	
	local OldTarget = nil
	_G.Cancel = false -- Flag global para cancelar o tween atual
	
	function Tween(targetPosition)
		if OldTarget ~= targetPosition then
			_G.Cancel = true
			OldTarget = targetPosition
		end
	
		task.wait() -- Dá tempo pro cancelamento ocorrer
		_G.Cancel = false
	
		local Players = game:GetService("Players")
		local LocalPlayer = Players.LocalPlayer
		local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
		local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
		local Humanoid = Character:WaitForChild("Humanoid")
	
		HumanoidRootPart.CanCollide = false
		if Humanoid.Sit then
			Humanoid.Sit = false
		end
		local function GetDistance()
			return (targetPosition - HumanoidRootPart.Position).Magnitude
		end
	
		-- Teleporta imediatamente se estiver muito próximo (antes de tudo)
		if GetDistance() <= 200 then
			HumanoidRootPart.CFrame = CFrame.new(targetPosition)
			HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
			return
		end
	
		-- Portais possíveis
		local PortalPos = {}
	
		if Sea1 then
			PortalPos = {
				Vector3.new(-4652, 872, -1754),
				Vector3.new(-7895, 5547, -380),
				Vector3.new(61164, 5, 1820),
				Vector3.new(3865, 5, -1926)
			}
		elseif Sea2 then
			PortalPos = {
				Vector3.new(923, 125, 32853),
				Vector3.new(-6509, 83, -133)
			}
		elseif Sea3 then
			PortalPos = {
				Vector3.new(3029, 2280, -7325),
				Vector3.new(28286, 14897, 103)
			}
		end
	
		local unlocks = FireRemote("GetUnlockables")
	
		if Sea2 and unlocks.FlamingoAccess then
			table.insert(PortalPos, Vector3.new(-289, 306, 600)) -- Don Swan Mansão
			table.insert(PortalPos, Vector3.new(2284, 15, 905)) -- Sala secreta
		end
	
		if Sea3 and unlocks.DefeatedIndraTrueForm then
			table.insert(PortalPos, Vector3.new(-12471, 374, -7551)) -- Mansion
			table.insert(PortalPos, Vector3.new(5661, 1013, -335))   -- Hydra
			table.insert(PortalPos, Vector3.new(-5074, 314, -3153))  -- Castle
		end
	
--		if Sea3 and LocalPlayer.Data.Level.Value > 1950 then
--			table.insert(PortalPos, Vector3.new(5369, 25, -498))
--			table.insert(PortalPos, Vector3.new(-11994, 331, -8864))
--		end
	
		-- Escolher o portal mais próximo do destino
		local closestPortal = nil
		local closestDistance = (HumanoidRootPart.Position - targetPosition).Magnitude
	
		for _, portal in pairs(PortalPos) do
			local portalDistance = (portal - targetPosition).Magnitude
			if portalDistance < closestDistance then
				closestPortal = portal
				closestDistance = portalDistance
			end
		end
	
		-- Executar ações especiais com portais conhecidos
	--[[	if closestPortal == Vector3.new(5369, 25, -498) then
			HumanoidRootPart.CFrame = CFrame.new(-11994, 331, -8864)
			task.wait(0.03)
			FireRemote("requestEntrance", "WaterfallBossHitbox")
		elseif closestPortal == Vector3.new(-11994, 331, -8864) then
			HumanoidRootPart.CFrame = CFrame.new(5369, 25, -498)
			task.wait(0.03)
			FireRemote("requestEntrance", "TurtleEntranceBoss")
			task.wait(0.15)]]
		if closestPortal == Vector3.new(3029, 2280, -7325) then
			Tween(Vector3.new(28609, 14896, 105))
			task.wait(0.1)
			for _ = 1, 3 do
				FireRemote("RaceV4Progress", "TeleportBack")
			end
			task.wait(0.2)
		elseif closestPortal then
			FireRemote("requestEntrance", closestPortal)
			task.wait()
			FireRemote("requestEntrance", closestPortal)
		end
	
		-- Corrige posição Y se necessário
		if HumanoidRootPart.Position.Y ~= targetPosition.Y then
			HumanoidRootPart.CFrame = CFrame.new(
				HumanoidRootPart.Position.X,
				targetPosition.Y,
				HumanoidRootPart.Position.Z
			)
		end
	
		-- Verifica de novo após portais, antes de andar
		if GetDistance() <= 200 then
			HumanoidRootPart.CFrame = CFrame.new(targetPosition)
			HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
			return
		end
	
		-- Movimento gradual até o alvo
		while true do
			if _G.Cancel then return end
			if Humanoid.Sit then
				Humanoid.Sit = false
			end
			local distance = GetDistance()
	
			if distance <= 200 then
				HumanoidRootPart.CFrame = CFrame.new(targetPosition)
				HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
				break
			end
	
			if distance < 2 then return end
	
			local direction = (targetPosition - HumanoidRootPart.Position).Unit
			HumanoidRootPart.CFrame += direction * (_G.TweenSpeed or 1) * task.wait()
			HumanoidRootPart.AssemblyLinearVelocity = Vector3.zero
		end
	end
	
	function Hop()
		local PlaceID = game.PlaceId;
		local AllIDs = {};
		local foundAnything = "";
		local actualHour = (os.date("!*t")).hour;
		local Deleted = false;
		function TPReturner()
			local Site;
			if foundAnything == "" then
				Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100"));
			else
				Site = game.HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. PlaceID .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. foundAnything));
			end;
			local ID = "";
			if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
				foundAnything = Site.nextPageCursor;
			end;
			local num = 0;
			for i, v in pairs(Site.data) do
				local Possible = true;
				ID = tostring(v.id);
				if tonumber(v.maxPlayers) > tonumber(v.playing) then
					for _, Existing in pairs(AllIDs) do
						if num ~= 0 then
							if ID == tostring(Existing) then
								Possible = false;
							end;
						elseif tonumber(actualHour) ~= tonumber(Existing) then
							local delFile = pcall(function()
								AllIDs = {};
								table.insert(AllIDs, actualHour);
							end);
						end;
						num = num + 1;
					end;
					if Possible == true then
						table.insert(AllIDs, ID);
						wait();
						pcall(function()
							wait();
							(game:GetService("TeleportService")):TeleportToPlaceInstance(PlaceID, ID, game.Players.LocalPlayer);
						end);
						wait(4);
					end;
				end;
			end;
		end;
		function Teleport()
			while wait() do
				pcall(function()
					TPReturner();
					if foundAnything ~= "" then
						TPReturner();
					end;
				end);
			end;
		end;
		Teleport();
	end;
	
	task.spawn(function()
		while task.wait() do
			Type = Vector3.new(0, _G.PosY, 0)
		end
	end)
	
	SafeSpawn(function()
		while true do
			if _G.BringMobs and bringmobs then
				for _, mob in pairs(workspace.Enemies:GetChildren()) do
					if mob:IsA("Model") and mob.Name == MobName then
						local humanoid = mob:FindFirstChildOfClass("Humanoid")
						local hrp = mob:FindFirstChild("HumanoidRootPart")
						if humanoid and hrp and humanoid.Health > 0 then 
							local distance = (MobPos - hrp.Position).Magnitude
							
							if distance > 10 and distance < _G.BringDistance then
								humanoid.PlatformStand = true
								task.wait() -- pequena espera para aplicar a física
								-- puxa com menos força, evitando rollback
								hrp.AssemblyLinearVelocity = (MobPos - hrp.Position).Unit * 150
							elseif distance <= 10 then
								humanoid.AutoRotate = false
								humanoid.Sit = true
								humanoid.PlatformStand = false
								hrp.AssemblyLinearVelocity = Vector3.zero
							end
						end
					end
				end
			end
			task.wait(0.1) -- sem floodar o servidor
		end
	end)
	
	local Players = game:GetService("Players")
	local Workspace = workspace
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local LocalPlayer = Players.LocalPlayer
	
	local function IsAlive(entity)
		if not entity then return false end
		local humanoid = entity:FindFirstChild("Humanoid")
		return humanoid and humanoid.Health > 0
	end
	
	local function GetNearbyTargets(originModel, range)
		local nearbyTargets = {}
		local originPos = originModel:GetPivot().Position
	
		-- Encontra inimigos vivos no range
		for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
			local hrp = enemy:FindFirstChild("HumanoidRootPart")
			if hrp and IsAlive(enemy) then
				local dist = (hrp.Position - originPos).Magnitude
				if dist <= range then
					table.insert(nearbyTargets, enemy)
				end
			end
		end
	
		-- Encontra jogadores vivos no range
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= LocalPlayer and player.Character then
				local hrp = player.Character:FindFirstChild("HumanoidRootPart")
				if hrp and IsAlive(player.Character) then
					local dist = (hrp.Position - originPos).Magnitude
					if dist <= range then
						table.insert(nearbyTargets, player.Character)
					end
				end
			end
		end
	
		-- Ordena os alvos do mais próximo pro mais longe
		table.sort(nearbyTargets, function(a, b)
			local aPos = a:FindFirstChild("HumanoidRootPart") and a.HumanoidRootPart.Position or a:GetPivot().Position
			local bPos = b:FindFirstChild("HumanoidRootPart") and b.HumanoidRootPart.Position or b:GetPivot().Position
			return (aPos - originPos).Magnitude < (bPos - originPos).Magnitude
		end)
	
		return nearbyTargets
	end
	
	function AttackNoCoolDown()
		local character = LocalPlayer.Character
		if not character then return end
	
		-- Pega a ferramenta equipada
		local tool
		for _, obj in ipairs(character:GetChildren()) do
			if obj:IsA("Tool") then
				tool = obj
				break
			end
		end
		if not tool then return end
	
		local toolName = tool.Name
		local targets = GetNearbyTargets(character, 100)
		if #targets == 0 then return end
	
		local target = targets[1]
		local hrp = target:FindFirstChild("HumanoidRootPart") or target.PrimaryPart
		if not hrp then return end
	
		-- Lista de partes possíveis pra acertar
		local hitOptions = {
			"RightLowerArm", "RightUpperArm",
			"LeftLowerArm", "LeftUpperArm",
			"RightHand", "LeftHand"
		}
		local partName = hitOptions[math.random(#hitOptions)]
		local hitPart = target:FindFirstChild(partName) or target.PrimaryPart
		if not hitPart then return end
	
		-- Armas de fogo (menos Skull Guitar)
		if tool.ToolTip == "Gun" and toolName ~= "Skull Guitar" then
			local args = {
				hrp.Position, -- posição real do inimigo
				{ hitPart }   -- parte real do corpo
			}
			ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/ShootGunEvent"):FireServer(unpack(args))
			return
		end
	
		-- Skull Guitar
		if toolName == "Skull Guitar" then
			local args = { "TAP", hrp.Position }
			local remote = tool:FindFirstChild("RemoteEvent")
			if remote then
				remote:FireServer(unpack(args))
			end
			return
		end
	
		-- Espadas com LeftClickRemote
		if tool:FindFirstChild("LeftClickRemote") and not table.find({ "Ice-Ice", "Light-Light" }, toolName) then
			local dir = (hrp.Position - character:GetPivot().Position).Unit
			tool.LeftClickRemote:FireServer(dir, 1)
			tool.LeftClickRemote:FireServer(dir, 2)
			return
		end
	
		-- Caso padrão: RegisterAttack/RegisterHit
		local modules = ReplicatedStorage:FindFirstChild("Modules")
		if not modules then return end
	
		local RegisterAttack = modules:WaitForChild("Net"):WaitForChild("RE/RegisterAttack", 3)
		local RegisterHit = modules:WaitForChild("Net"):WaitForChild("RE/RegisterHit", 3)
		if not RegisterAttack or not RegisterHit then return end
	
		local hitParts = { { target, hitPart } }
	
		RegisterAttack:FireServer(0)
	
		local playerScripts = LocalPlayer:FindFirstChild("PlayerScripts")
		if not playerScripts then return end
	
		local localScript = playerScripts:FindFirstChildOfClass("LocalScript")
		while not localScript do
			playerScripts.ChildAdded:Wait()
			localScript = playerScripts:FindFirstChildOfClass("LocalScript")
		end
	
		local internalHitFunc
		if getsenv then
			local success, env = pcall(getsenv, localScript)
			if success and env then
				internalHitFunc = env._G and env._G.SendHitsToServer
			end
		end
	
		local successFlag, combatThreadFlag = pcall(function()
			return require(modules:WaitForChild("Flags")).COMBAT_REMOTE_THREAD
		end)
	
		if successFlag and internalHitFunc and combatThreadFlag then
			internalHitFunc(hitPart, hitParts)
		elseif successFlag and not combatThreadFlag then
			RegisterHit:FireServer(hitPart, hitParts)
		end
	end
	
	function AutoHaki()
	    if not LocalPlayer.Character:FindFirstChild("HasBuso") then
	        FireRemote("Buso")
	    end
	end

	SafeSpawn(function()
		while task.wait() do
		
			if _G.AutoBuso then
				AutoHaki()
			end
			_G.StopAttack = false
			if _G.AutoAttack and _G.StopAttack == false then
				AttackNoCoolDown()
			end
			
			if _G.EnableSkillV3 then
				local gui = LocalPlayer:FindFirstChild("PlayerGui")
				local btn = gui
					and gui:FindFirstChild("MobileContextButtons")
					and gui.MobileContextButtons:FindFirstChild("ContextButtonFrame")
					and gui.MobileContextButtons.ContextButtonFrame:FindFirstChild("BoundActionRaceAbility")
					and gui.MobileContextButtons.ContextButtonFrame.BoundActionRaceAbility:FindFirstChild("Button")
				local cooldown = btn and btn:FindFirstChild("Cooldown")
	
				if cooldown and cooldown.Visible == false then
					FireServer("ActivateAbility")
				end
			end
	
			if _G.EnableKenHaki and not LocalPlayer:GetAttribute("KenActive") then
				FireServer("Ken", true)
			end
			
		end
	end)
	
	SafeSpawn(function()
		while task.wait() do
			if _G.EnableTransformationV4 then
				local char = LocalPlayer.Character
				local energy = char and char:FindFirstChild("RaceEnergy")
				local transformed = char and char:FindFirstChild("RaceTransformed")
	
				if energy and transformed and energy.Value >= 1 and not transformed.Value then
					SendKey("Y")
				end
			end
		end
	end)
	
	function HasV4()
		return LocalPlayer.Character:FindFirstChild("RaceEnergy")
	end
	
	function HasV3()
		return FireRemote("Wenlocktoad", "1") == -2
	end
	
	function HasKen()
		return CollectionService:HasTag(LocalPlayer.Character, "Ken")
	end
	
	Codes = {
		"SUB2FER999",
		"ENYU_IS_PRO",
		"JCWK",
		"STARCODEHEO",
		"MAGICBUS",
		"KITTGAMING",
		"SUB2CAPTAINMAUI",
		"SUB2OFFICIALNOOBIE",
		"THEGREATACE",
		"SUB2NOOBMASTER123",
		"SUB2DAIGROCK",
		"AXIORE",
		"STRAWHATMAINE",
		"TANTAIGAMING",
		"BLUXXY",
		"SUB2GAMERROBOT_EXP1",
		"KITT_RESET",
		"SUB2UNCLEKIZARU",
		"SUB2GAMERROBOT_RESET1",
		"FUDD10",
		"FUDD10_V2",
		"CHANDLER",
		"BIGNEWS"
	}
	
	function Redeem()
		for i, v in pairs(Codes) do
			game:GetService("ReplicatedStorage").Remotes.Redeem:InvokeServer(v)
		end
	end
	
	SafeSpawn(function()
		while true do
			task.wait()
			local char = LocalPlayer.Character
			local root = char and char:FindFirstChild("HumanoidRootPart")
			if not root then
				continue
			end
	
			if not _G.UnlockRengoku and not _G.BartiloQuest and not _G.UnlockThirdSea and not _G.DefeatLawBoss and not _G.UnlockSaber and not _G.DefeatEliteHunter and not _G.AutoRipIndra and not _G.FullyEagleBoss and not _G.FarmDoughKing and not _G.FarmLevel and not _G.FarmNearest and not _G.FarmSkyEnemy and not _G.FarmFactory and not _G.CastleRaid and not _G.FarmChest and not _G.DefeatBoss and not _G.FarmBones and not _G.FarmEctoplasm and not _G.AutoSoulReaper and not _G.AutoMaterial and not _G.FarmCakeBoss then
				local clip = root:FindFirstChild("BodyClip")
				if clip then
					clip:Destroy()
				end
				local hl = char:FindFirstChild("Highlight2")
				if hl then
					hl:Destroy()
				end
				continue
			end
	
			if not root:FindFirstChild("BodyClip") then
				local body = Instance.new("BodyVelocity")
				body.Name = "BodyClip"
				body.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
				body.P = 1500
				body.Velocity = Vector3.zero
				body.Parent = root
			end
	
			if not char:FindFirstChild("Highlight2") then
				local highlight = Instance.new("Highlight")
				highlight.Name = "Highlight2"
				highlight.FillColor = Color3.fromRGB(math.random(0, 255), math.random(0, 255), math.random(0, 255))
				highlight.OutlineTransparency = 0
				highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
				highlight.Parent = char
			end
		end
	end)
	
	-------------------------------[[ Main ]]-------------------------------
	
	function VerifyNPC(name)
		for i, v in pairs(workspace.Enemies:GetChildren()) do
			if v.Name == name and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
				return true
			end
		end
		for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
			if v.Name == name and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
				return true
			end
		end
		return false
	end
	
	function CheckLevel()
	    local MyLevel = LocalPlayer.Data.Level.Value
	    if Sea1 then
	        if MyLevel > 0 and MyLevel < 10 then
				if tostring(LocalPlayer.Team) == "Pirates" then
				    Module = {"Bandit", "BanditQuest1", 1, Vector3.new(1039, 41, 1577)}
				elseif tostring(LocalPlayer.Team) == "Marines" then
					Module = {"Trainee", "MarineQuest", 1, Vector3.new(-2859, 41, 2169)}
				end
	        elseif MyLevel >= 10 and MyLevel <= 14 then
                Module = { "Monkey", "JungleQuest", 1, Vector3.new(-1448, 51, 64) }
	        elseif MyLevel >= 15 and MyLevel <= 29 then
				if VerifyNPC("The Gorilla King") and MyLevel > 19 then
					Module = { "The Gorilla King", "JungleQuest", 3, Vector3.new(-1118, 40, -506)}
				else
	                Module = { "Gorilla", "JungleQuest", 2, Vector3.new(-1143, 40, -515) }
				end
	        elseif MyLevel >= 30 and MyLevel <= 39 then
                Module = { "Pirate", "BuggyQuest1", 1, Vector3.new(-1201, 41, 3858) }
	        elseif MyLevel >= 40 and MyLevel <= 59 then
				if VerifyNPC("Chef") and MyLevel > 54 then
					Module = { "Chef", "BuggyQuest1", 3, Vector3.new(-1142, 60, 4115)}
				else
	                Module = { "Brute", "BuggyQuest1", 2, Vector3.new(-1388, 25, 4101)}
             end
	        elseif MyLevel >= 60 and MyLevel <= 74 then
                Module = { "Desert Bandit", "DesertQuest", 1, Vector3.new(985, 16, 4418) }
	        elseif MyLevel >= 75 and MyLevel <= 89 then
                Module = { "Desert Officer", "DesertQuest", 2, Vector3.new(1547, 14, 4382) }
	        elseif MyLevel >= 90 and MyLevel < 100 then
                Module = { "Snow Bandit", "SnowQuest", 1, Vector3.new(1356, 105, -1328)}
	        elseif MyLevel >= 100 and MyLevel <= 119 then
		       if VerifyNPC("Yeti") and MyLevel > 104 then
			        Module = { "Yeti", "SnowQuest", 3, Vector3.new(1201, 144, -1551)}
				else
			        Module = { "Snowman", "SnowQuest", 2, Vector3.new(1219, 138, -1488)}
				end
	        elseif MyLevel >= 120 and MyLevel <= 149 then
				if VerifyNPC("Vice Admiral") and MyLevel > 129 then
					Module = { "Vice Admiral", "MarineQuest2", 2, Vector3.new(-5077, 99, 4402)}
				else
	                Module = { "Chief Petty Officer", "MarineQuest2", 1, Vector3.new(-4931, 66, 4122)}
                end
	        elseif MyLevel >= 150 and MyLevel <= 174 then
                Module = { "Sky Bandit", "SkyQuest", 1, Vector3.new(-4956, 365, -2908) }
	        elseif MyLevel >= 175 and MyLevel <= 189 then
                Module = { "Dark Master", "SkyQuest", 2, Vector3.new(-5148, 439, -2333) }
	        elseif MyLevel >= 190 and MyLevel <= 209 then
                Module = { "Prisoner", "PrisonerQuest", 1, Vector3.new(4937, 0, 650) }
            elseif MyLevel >= 210 and MyLevel <= 249 then
	            if VerifyNPC("Swan") and MyLevel > 239 then
			        Module = {"Swan", "ImpelQuest", 3, Vector3.new()}
		       elseif VerifyNPC("Chief Warden") and MyLevel > 229 then
				    Module = {"Chief Warden", "ImpelQuest", 2, Vector3.new()}
		       elseif VerifyNPC("Warden") and MyLevel > 219 then
			        Module = {"Warden", "ImpelQuest", 1, Vector3.new()}
				else
	                Module = { "Dangerous Prisoner", "PrisonerQuest", 2, Vector3.new(5100, 0, 1056) }
                end
	        elseif MyLevel >= 250 and MyLevel <= 274 then
                Module = { "Toga Warrior", "ColosseumQuest", 1, Vector3.new(-1873, 49, -2914) }
            elseif MyLevel >= 275 and MyLevel <= 299 then
                Module = { "Gladiator", "ColosseumQuest", 2, Vector3.new(-1521, 81, -3066) }
	        elseif MyLevel >= 300 and MyLevel <= 324 then
                Module = { "Military Soldier", "MagmaQuest", 1, Vector3.new(-5370, 61, 8556) }
            elseif MyLevel >= 325 and MyLevel <= 374 then
	            if VerifyNPC("Magma Admiral") and MyLevel > 349 then
					Module = { "Magma Admiral", "MagmaQuest", 3, Vector3.new(-5539, 18, 8848)}
				else
	                Module = { "Military Spy", "MagmaQuest", 2, Vector3.new(-5787, 76, 8652)}
				end
	        elseif MyLevel >= 375 and MyLevel <= 399 then
                Module = { "Fishman Warrior", "FishmanQuest", 1, Vector3.new(60844, 98, 1298) }
            elseif MyLevel >= 400 and MyLevel <= 449 then
	            if VerifyNPC("Fishman Lord") and MyLevel > 424 then
	                Module = { "Fishman Lord", "FishmanQuest", 3, Vector3.new(61353, 31, 1154)}
	           else
	                Module = { "Fishman Commando", "FishmanQuest", 2, Vector3.new(61738, 64, 1434) }
                end
	        elseif MyLevel >= 450 and MyLevel <= 474 then
                Module = { "God's Guard", "SkyExp1Quest", 1, Vector3.new(-4628, 867, -1931) }
            elseif MyLevel >= 475 and MyLevel <= 524 then
	            if VerifyNPC("Wysper") and MyLevel > 499 then 
	                Module = { "Wysper", "SkyExp1Quest", 3, Vector3.new(-7911, 5545, -672)}
				else
		            Module = { "Shanda", "SkyExp1Quest", 2, Vector3.new(-7685, 5601, -441)}
				end
	        elseif MyLevel >= 525 and MyLevel <= 549 then
                Module = { "Royal Squad", "SkyExp2Quest", 1, Vector3.new(-7654, 5637, -1408) }
	        elseif MyLevel >= 550 and MyLevel <= 624 then
				if VerifyNPC("Thunder God") and MyLevel > 574 then
	                Module = { "Thunder God", "SkyExp2Quest", 3, Vector3.new(-7782, 5606, -2362)}
				else
	                Module = { "Royal Soldier", "SkyExp2Quest", 2, Vector3.new(-7903, 5679, -1885) }
				end
	        elseif MyLevel >= 625 and MyLevel <= 649 then
                Module = { "Galley Pirate", "FountainQuest", 1, Vector3.new(5557, 152, 3999) }
	        elseif MyLevel > 649 then
				if VerifyNPC("Cyborg") and MyLevel > 674 then
					Module = {"Cyborg", "FountainQuest", 3, Vector3.new(6169, 6, 3884)}
				else
					Module = {"Galley Captain", "FountainQuest", 2, Vector3.new(5677, 92, 4966)}
				end
	        end
	    end
	    if Sea2 then
	        if MyLevel >= 700 and MyLevel <= 724 then
                Module = { "Raider", "Area1Quest", 1, Vector3.new(69, 94, 2430) }
	        elseif MyLevel >= 725 and MyLevel <= 774 then
				if VerifyNPC("Diamond") and MyLevel > 749 then
	                Module = { "Diamond", "Area1Quest", 3, Vector3.new(-1677, 198, -81)}
	            else
	                Module = { "Mercenary", "Area1Quest", 2, Vector3.new(-865, 122, 1453)}
	            end
	        elseif MyLevel >= 775 and MyLevel <= 799 then
                Module = { "Swan Pirate", "Area2Quest", 1, Vector3.new(1065, 138, 1324) }
            elseif MyLevel >= 800 and MyLevel <= 874 then
	            if VerifyNPC("Jeremy") and MyLevel > 849 then
	                Module = { "Jeremy", "Area2Quest", 3, Vector3.new(2410, 448, 713)}
				else
	                Module = { "Factory Staff", "Area2Quest", 2, Vector3.new(533, 128, 356)}
		        end
	        elseif MyLevel >= 875 and MyLevel <= 899 then
                Module = { "Marine Lieutenant", "MarineQuest3", 1, Vector3.new(-2489, 85, -3152) }
            elseif MyLevel >= 900 and MyLevel <= 949 then
	            if VerifyNPC("Orbitus") and MyLevel > 924 then
                    Module = { "Orbitus", "MarineQuest3", 3, Vector3.new(-2130, 72, -4297)}
                else
	                Module = { "Marine Captain", "MarineQuest3", 2, Vector3.new(-2335, 80, -3246)}
				end
	        elseif MyLevel >= 950 and MyLevel <= 974 then
                Module = { "Zombie", "ZombieQuest", 1, Vector3.new(-5536, 101, -836) }
            elseif MyLevel >= 975 and MyLevel <= 999 then
                Module = { "Vampire", "ZombieQuest", 2, Vector3.new(-5806, 17, -1164) }
	        elseif MyLevel >= 1000 and MyLevel <= 1049 then
                Module = { "Snow Trooper", "SnowMountainQuest", 1, Vector3.new(535, 433, -5485) }
            elseif MyLevel >= 1050 and MyLevel <= 1099 then
                Module = { "Winter Warrior", "SnowMountainQuest", 2, Vector3.new(1234, 457, -5174) }
	        elseif MyLevel >= 1100 and MyLevel <= 1124 then
                Module = { "Lab Subordinate", "IceSideQuest", 1, Vector3.new(-5721, 63, -4785) }
            elseif MyLevel >= 1125 and MyLevel <= 1174 then
	            if VerifyNPC("Smoke Admiral") and MyLevel > 1149 then
					Module = { "Smoke Admiral", "IceSideQuest", 3, Vector3.new(-5056, 23, -5362)}
				else
	                Module = { "Horned Warrior", "IceSideQuest", 2, Vector3.new(-6293, 91, -5503)}
                end
	        elseif MyLevel >= 1175 and MyLevel <= 1199 then
                Module = { "Magma Ninja", "FireSideQuest", 1, Vector3.new(-5462, 130, -5836) }
            elseif MyLevel >= 1200 and MyLevel <= 1249 then
                Module = { "Lava Pirate", "FireSideQuest", 2, Vector3.new(-5251, 55, -4774) }
	        elseif MyLevel >= 1250 and MyLevel <= 1274 then
                Module = {"Ship Deckhand", "ShipQuest1", 1, Vector3.new(921, 126, 33088)}
            elseif MyLevel >= 1275 and MyLevel <= 1299 then
                Module = {"Ship Engineer", "ShipQuest1", 2, Vector3.new(886, 40, 32801)}
	        elseif MyLevel >= 1300 and MyLevel <= 1324 then
                Module = {"Ship Steward", "ShipQuest2", 1, Vector3.new(944, 130, 33444)}
            elseif MyLevel >= 1325 and MyLevel <= 1349 then
                Module = {"Ship Officer", "ShipQuest2", 2, Vector3.new(955, 181, 33332)}
	        elseif MyLevel >= 1350 and MyLevel <= 1374 then
                Module = { "Arctic Warrior", "FrostQuest", 1, Vector3.new(5935, 77, -6473) }
            elseif MyLevel >= 1375 and MyLevel <= 1424 then
	            if VerifyNPC("Awakened Ice Admiral") and MyLevel > 1399 then
					Module = { "Awakened Ice Admiral", "FrostQuest", 3, Vector3.new(6489, 296, -6955)}
				else
	                Module = { "Snow Lurker", "FrostQuest", 2, Vector3.new(5628, 58, -6618)}
                end
	        elseif MyLevel >= 1425 and MyLevel <= 1449 then
                Module = { "Sea Soldier", "ForgottenQuest", 1, Vector3.new(-3185, 59, -9664) }
	        elseif MyLevel >= 1450 then
				if VerifyNPC("Tide Keeper") and MyLevel > 1474 then
					Module = { "Tide Keeper", "ForgottenQuest", 3, Vector3.new(-3742, 77, -11523)}
				else
	                Module = { "Water Fighter", "ForgottenQuest", 2, Vector3.new(-3263, 299, -10553)}
                end
	        end
	    end
		if Sea3 then
			if MyLevel >= 1500 and MyLevel <= 1524 then
				Module = { "Pirate Millionaire", "PiratePortQuest", 1, Vector3.new(-194, 56, 5756) }
			elseif MyLevel >= 1525 and MyLevel <= 1574 then
				if VerifyNPC("Stone") and MyLevel > 1549 then
					Module = { "Stone", "PiratePortQuest", 3, Vector3.new(-1104, 52, 6815)}
				else
					Module = { "Pistol Billionaire", "PiratePortQuest", 2, Vector3.new(-188, 84, 6337) }
				end
			elseif MyLevel >= 1575 and MyLevel <= 1599 then
				Module = { "Dragon Crew Warrior", "DragonCrewQuest", 1, Vector3.new(6615, 51, -979) }
			elseif MyLevel >= 1600 and MyLevel <= 1624 then
				Module = { "Dragon Crew Archer", "DragonCrewQuest", 2, Vector3.new(6819, 484, 513) }
			elseif MyLevel >= 1625 and MyLevel <= 1649 then
				Module = { "Hydra Enforcer", "VenomCrewQuest", 1, Vector3.new(4547, 1002, 334) }
			elseif MyLevel >= 1650 and MyLevel <= 1699 then
				if VerifyNPC("Hydra Leader") and MyLevel > 1674 then
					Module = { "Hydra Leader", "VenomCrewQuest", 3, Vector3.new(5829, 1019, -76)}
				else
					Module = { "Venomous Assailant", "VenomCrewQuest", 2, Vector3.new(4638, 1078, 882) }
				end
			elseif MyLevel >= 1700 and MyLevel <= 1724 then
				Module = { "Marine Commodore", "MarineTreeIsland", 1, Vector3.new(2198, 129, -7110) }
			elseif MyLevel >= 1725 and MyLevel <= 1774 then
				if VerifyNPC("Kilo Admiral") and MyLevel > 1749 then
					Module = { "Kilo Admiral", "MarineTreeIsland", 3, Vector3.new(3109, 531, -7312)}
				else
					Module = { "Marine Rear Admiral", "MarineTreeIsland", 2, Vector3.new(3294, 385, -7049)}
				end
			elseif MyLevel >= 1775 and MyLevel <= 1799 then
				Module = { "Fishman Raider", "DeepForestIsland3", 1, Vector3.new(-10553, 521, -8177) }
			elseif MyLevel >= 1800 and MyLevel <= 1824 then
				Module = { "Fishman Captain", "DeepForestIsland3", 2, Vector3.new(-10789, 427, -9131) }
			elseif MyLevel >= 1825 and MyLevel <= 1849 then
				Module = { "Forest Pirate", "DeepForestIsland", 1, Vector3.new(-13489, 400, -7770) }
			elseif MyLevel >= 1850 and MyLevel <= 1899 then
				if VerifyNPC("Captain Elephant") and MyLevel > 1874 then
					Module = { "Captain Elephant", "DeepForestIsland", 3, Vector3.new(-13314, 325, -8346)}
				else
					Module = { "Mythological Pirate", "DeepForestIsland", 2, Vector3.new(-13509, 582, -6985)}
				end
			elseif MyLevel >= 1900 and MyLevel <= 1924 then
				Module = { "Jungle Pirate", "DeepForestIsland2", 1, Vector3.new(-12267, 459, -10277) }
			elseif MyLevel >= 1925 and MyLevel <= 1974 then
				Module = { "Musketeer Pirate", "DeepForestIsland2", 2, Vector3.new(-13291, 520, -9905) }
			elseif MyLevel >= 1975 and MyLevel <= 1999 then
				Module = { "Reborn Skeleton", "HauntedQuest1", 1, Vector3.new(-8762, 183, 6168) }
			elseif MyLevel >= 2000 and MyLevel <= 2024 then
				Module = { "Living Zombie", "HauntedQuest1", 2, Vector3.new(-10104, 239, 6180) }
			elseif MyLevel >= 2025 and MyLevel <= 2049 then
				Module = { "Demonic Soul", "HauntedQuest2", 1, Vector3.new(-9712, 205, 6193) }
			elseif MyLevel >= 2050 and MyLevel <= 2074 then
				Module = { "Posessed Mummy", "HauntedQuest2", 2, Vector3.new(-9546, 70, 6340) }
			elseif MyLevel >= 2075 and MyLevel <= 2099 then
				Module = { "Peanut Scout", "NutsIslandQuest", 1, Vector3.new(-2151, 122, -10359) }
			elseif MyLevel >= 2100 and MyLevel <= 2124 then
				Module = { "Peanut President", "NutsIslandQuest", 2, Vector3.new(-2151, 122, -10359) }
			elseif MyLevel >= 2125 and MyLevel <= 2149 then
				Module = { "Ice Cream Chef", "IceCreamIslandQuest", 1, Vector3.new(-790, 209, -11010) }
			elseif MyLevel >= 2150 and MyLevel <= 2199 then
				if VerifyNPC("Cake Queen") and MyLevel > 2174 then
					Module = {"Cake Queen", "IceCreamIslandQuest", 3, Vector3.new(-710, 381, -11052)}
				else
					Module = {"Ice Cream Commander", "IceCreamIslandQuest", 2, Vector3.new(-789, 209, -11009)}
				end
			elseif MyLevel >= 2200 and MyLevel <= 2224 then
				Module = {"Cookie Crafter", "CakeQuest1", 1, Vector3.new(-2321, 36, -12216)}
			elseif MyLevel >= 2225 and MyLevel <= 2249 then
				Module = { "Cake Guard", "CakeQuest1", 2, Vector3.new(-1418, 37, -12256) }
			elseif MyLevel >= 2250 and MyLevel <= 2274 then
				Module = { "Baking Staff", "CakeQuest2", 1, Vector3.new(-1980, 37, -12984) }
			elseif MyLevel >= 2275 and MyLevel <= 2299 then
				Module = { "Head Baker", "CakeQuest2", 2, Vector3.new(-2252, 52, -13033) }
			elseif MyLevel >= 2300 and MyLevel <= 2324 then
				Module = { "Cocoa Warrior", "ChocQuest1", 1, Vector3.new(168, 26, -12239) }
			elseif MyLevel >= 2325 and MyLevel <= 2349 then
				Module = { "Chocolate Bar Battler", "ChocQuest1", 2, Vector3.new(701, 26, -12708) }
			elseif MyLevel >= 2350 and MyLevel <= 2374 then
				Module = { "Sweet Thief", "ChocQuest2", 1, Vector3.new(-140, 26, -12652) }
			elseif MyLevel >= 2375 and MyLevel <= 2400 then
				Module = { "Candy Rebel", "ChocQuest2", 2, Vector3.new(48, 26, -13029) }
			elseif MyLevel >= 2400 and MyLevel <= 2424 then
				Module = { "Candy Pirate", "CandyQuest1", 1, Vector3.new(-1438, 17, -14386) }
			elseif MyLevel >= 2425 and MyLevel <= 2449 then
				Module = { "Snow Demon", "CandyQuest1", 2, Vector3.new(-916, 17, -14639) }
			elseif MyLevel >= 2450 and MyLevel <= 2474 then
				Module = { "Isle Outlaw", "TikiQuest1", 1, Vector3.new(-16163, 12, -96) }
			elseif MyLevel >= 2475 and MyLevel <= 2499 then
				Module = { "Island Boy", "TikiQuest1", 2, Vector3.new(-16357, 21, 1006) }
			elseif MyLevel >= 2500 and MyLevel <= 2524 then
				Module = { "Sun-kissed Warrior", "TikiQuest2", 1, Vector3.new(-16357, 21, 1006) }
			elseif MyLevel >= 2525 and MyLevel <= 2549 then
				Module = { "Isle Champion", "TikiQuest2", 2, Vector3.new(-16849, 22, 1041) }
			elseif MyLevel >= 2550 and MyLevel <= 2574 then
				Module = { "Serpent Hunter", "TikiQuest3", 1, Vector3.new(-16621, 121, 1291) }
			elseif MyLevel >= 2575 then
				Module = { "Skull Slayer", "TikiQuest3", 2, Vector3.new(-16812, 85, 1542)}
			end
		end
	end
	
	SafeSpawn(function()
		while task.wait() do
			if _G.FarmLevel then
				pcall(function()
					CheckLevel()
	
					local QuestGui = LocalPlayer.PlayerGui.Main.Quest
					local QuestTitle = QuestGui.Container.QuestTitle.Title.Text
					local HasQuest = QuestGui.Visible
					local IsWrongQuest = not string.find(QuestTitle, Module[1])
	
					if IsWrongQuest or not HasQuest then
						FireRemote("AbandonQuest")
						Tween(Module[4])
						if (Module[4] - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 5 then
							FireRemote("StartQuest", Module[2], Module[3])
						end
	
					elseif string.find(QuestTitle, Module[1]) or HasQuest then
						local nearestEnemy = nil
						local nearestDist = math.huge
						local playerPos = LocalPlayer.Character.HumanoidRootPart.Position
	
						for _, enemy in pairs(workspace.Enemies:GetChildren()) do
							local humanoid = enemy:FindFirstChild("Humanoid")
							local rootPart = enemy:FindFirstChild("HumanoidRootPart")
	
							if humanoid and rootPart and humanoid.Health > 0 and enemy.Name == Module[1] then
								local dist = (playerPos - rootPart.Position).Magnitude
								if dist < nearestDist then
									nearestDist = dist
									nearestEnemy = enemy
								end
							end
						end
	
						if nearestEnemy then
							local humanoid = nearestEnemy:FindFirstChild("Humanoid")
							local rootPart = nearestEnemy:FindFirstChild("HumanoidRootPart")
							repeat
								task.wait()
								bringmobs = true
								EquipTool(SelectWeapon)
								Tween(rootPart.Position + Type)
								MobPos = rootPart.Position
								MobName = nearestEnemy.Name
							until not _G.AutoLevel
								or not nearestEnemy.Parent
								or humanoid.Health <= 0
								or not QuestGui.Visible
								or not workspace.Enemies:FindFirstChild(nearestEnemy.Name)
							bringmobs = false
						else
							for _, spawn in pairs(workspace['_WorldOrigin'].EnemySpawns:GetChildren()) do
								if string.find(spawn.Name, Module[1]) then
									local distance = (LocalPlayer.Character.HumanoidRootPart.Position - spawn.Position).Magnitude
									if distance >= 10 then
										Tween(spawn.Position)
									end
								end
							end
						end
					end
				end)
			end
		end
	end)
	
	spawn(function()
	    while task.wait() do
	        if _G.FarmNearest then
	            pcall(function()
	                local character = game.Players.LocalPlayer.Character
	                local myHRP = character and character:FindFirstChild("HumanoidRootPart")
	                if not myHRP then return end
	
	                local function GetClosestEnemy()
	                    local closest = nil
	                    local shortest = math.huge
	                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
	                        local hrp = enemy:FindFirstChild("HumanoidRootPart")
	                        local humanoid = enemy:FindFirstChild("Humanoid")
	                        if humanoid and hrp and humanoid.Health > 0 then
	                            local dist = (myHRP.Position - hrp.Position).Magnitude
	                            if dist <= 5000 and dist < shortest then
	                                shortest = dist
	                                closest = enemy
	                            end
	                        end
	                    end
	                    return closest
	                end
	
	                local currentEnemy = GetClosestEnemy()
	
	                while _G.FarmNearest and currentEnemy and currentEnemy:FindFirstChild("Humanoid") and currentEnemy:FindFirstChild("HumanoidRootPart") and currentEnemy.Humanoid.Health > 0 do
	                    local newClosest = GetClosestEnemy()
	                    if newClosest and newClosest ~= currentEnemy then
	                        currentEnemy = newClosest
	                    end
	
	                    local hrp = currentEnemy.HumanoidRootPart
	                    local humanoid = currentEnemy.Humanoid
	
	                    task.wait()
	                    bringmobs = true
	                    EquipTool(SelectWeapon)
	                    Tween(hrp.Position + Type)
	                    MobPos = hrp.Position
	                    MobName = currentEnemy.Name
	                end
	                bringmobs = false
	            end)
	        end
	    end
	end)
	
	local positions = {
		Vector3.new(-7894, 5547, -380),
		Vector3.new(-7947, 5617, -1824),
		Vector3.new(-7670, 5617, -1379)
	}
	local cooldown = 10
	local lastUsed = {0, 0, 0}
	local valid = {
		["Shanda"] = {"SkyExp1Quest", 2},
		["Wysper"] = {"SkyExp1Quest", 3},
		["Royal Squad"] = {"SkyExp2Quest", 1},
		["Royal Soldier"] = {"SkyExp2Quest", 2},
		["Thunder God"] = {"SkyExp2Quest", 3}
	}
	
	task.spawn(function()
		while true do
			task.wait()
			if _G.FarmSkyEnemy then
				pcall(function()
					local LocalPlayer = game.Players.LocalPlayer
					local gui = LocalPlayer:FindFirstChild("PlayerGui")
					local title = nil
					local visible = false
	
					if gui and gui:FindFirstChild("Main") and gui.Main:FindFirstChild("Quest") then
						local questGui = gui.Main.Quest
						if questGui.Visible and questGui.Container and questGui.Container:FindFirstChild("QuestTitle") then
							visible = true
							title = questGui.Container.QuestTitle.Title.Text
						end
					end
	
					local level = LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level")
					local found = false
					if visible and title and title ~= "" then
						for mobName in pairs(valid) do
							if title:find(mobName) then
								found = true
								break
							end
						end
					end
	
					if level and level.Value > 474 then
						if not visible or not title or title == "" then
							local options = {}
							for _, v in pairs(valid) do
								table.insert(options, v)
							end
							if #options > 0 then
								local pick = options[math.random(1, #options)]
								FireRemote("StartQuest", pick[1], pick[2])
							end
						elseif not found then
							FireRemote("AbandonQuest")
							local options = {}
							for _, v in pairs(valid) do
								table.insert(options, v)
							end
							if #options > 0 then
								local pick = options[math.random(1, #options)]
								FireRemote("StartQuest", pick[1], pick[2])
							end
						end
					end
				end)
			end
		end
	end)
	
	task.spawn(function()
		while true do
			task.wait()
			if _G.FarmSkyEnemy then
				pcall(function()
					local LocalPlayer = game.Players.LocalPlayer
					local char = LocalPlayer.Character
					if not char or not char:FindFirstChild("HumanoidRootPart") then return end
					local root = char.HumanoidRootPart
	
					local closest, shortest = nil, math.huge
					for _, e in pairs(workspace.Enemies:GetChildren()) do
						if valid[e.Name] and e:FindFirstChild("Humanoid") and e:FindFirstChild("HumanoidRootPart") and e.Humanoid.Health > 0 then
							local dist = (e.HumanoidRootPart.Position - root.Position).Magnitude
							if dist < shortest then
								closest = e
								shortest = dist
							end
						end
					end
	
					if closest then
						repeat
							task.wait()
							bringmobs = true
							EquipTool(SelectWeapon)
							Tween(closest.HumanoidRootPart.Position + Type)
							MobPos = closest.HumanoidRootPart.Position
							MobName = closest.Name
						until not _G.FarmSky or not closest.Parent or closest.Humanoid.Health <= 0
						bringmobs = false
					else
						local now = os.time()
						local available = {}
						for i, last in ipairs(lastUsed) do
							if now - last >= cooldown then
								table.insert(available, i)
							end
						end
						if #available == 0 then
							task.wait(1)
						else
							local idx = available[math.random(#available)]
							lastUsed[idx] = now
							Tween(positions[idx] + Type)
							task.wait(3)
						end
					end
				end)
			end
		end
	end)
	
	spawn(function()
        while wait() do
            if _G.FarmFactory then
	            pcall(function()
	                if VerifyNPC("Core") then
		                repeat
						task.wait()
						EquipTool(SelectWeapon)
						Tween(Vector3.new(428, 182, -430))
						until not _G.AutoFactory or not VerifyNPC("Core")
					end
                end)
            end
        end
    end)
    
    task.spawn(function()
		while task.wait() do
			if _G.CastleRaid then
				pcall(function()
					local player = game:GetService("Players").LocalPlayer
					local char = player.Character or player.CharacterAdded:Wait()
					local hrp = char:FindFirstChild("HumanoidRootPart")
					if not hrp then return end
	
					for _, enemy in pairs(workspace.Enemies:GetChildren()) do
						local name = enemy.Name:lower()
						if not name:find("friend") and name ~= "rip_indra true form" then
							local hum = enemy:FindFirstChild("Humanoid")
							local ehrp = enemy:FindFirstChild("HumanoidRootPart")
	
							if hum and ehrp and hum.Health > 0 then
								if (ehrp.Position - hrp.Position).Magnitude < 2000 then
									task.spawn(function()
										repeat
											task.wait()
											EquipTool(SelectWeapon)
											Tween(ehrp.Position)
										until hum.Health <= 0 or not enemy.Parent or not _G.CastleRaid
									end)
								end
							end
						end
					end
				end)
			end
		end
	end)
	
	spawn(function()
		while wait() do
			if _G.FarmChest then
				local p = game.Players.LocalPlayer
				local c = p.Character or p.CharacterAdded:Wait()
				local h = c:WaitForChild("HumanoidRootPart")
				local chests = game:GetService("CollectionService"):GetTagged("_ChestTagged")
				local dist, nearest = math.huge, nil
				for _, chest in pairs(chests) do
					local mag = (chest:GetPivot().Position - h.Position).Magnitude
					if not chest:GetAttribute("IsDisabled") and mag < dist then
						dist, nearest = mag, chest
					end
				end
				if nearest then
					local pos = nearest:GetPivot().Position
					Tween(pos)
				end
			end
		end
	end)
	
	EctoplasmEnemies = {
		["Ship Deckhand"] = {"ShipQuest1", 1},
		["Ship Engineer"] = {"ShipQuest1", 2},
		["Ship Steward"] = {"ShipQuest2", 1},
		["Ship Officer"] = {"ShipQuest2", 2},
		["Cursee Captain"] = true,
	}
	
	task.spawn(function()
		while task.wait() do
			pcall(function()
				if _G.FarmEctoplasm then
					local Players = game:GetService("Players")
					local LocalPlayer = Players.LocalPlayer
					local Workspace = workspace
					local Enemies = Workspace:WaitForChild("Enemies")
	
					local character = LocalPlayer.Character
					local hrp = character and character:FindFirstChild("HumanoidRootPart")
					if not hrp then return end
	
					local level = LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level")
					local currentTitle = nil
					local gui = LocalPlayer:FindFirstChild("PlayerGui")
					if gui and gui:FindFirstChild("Main") and gui.Main:FindFirstChild("Quest") then
						local questGui = gui.Main.Quest
						if questGui.Container and questGui.Container:FindFirstChild("QuestTitle") then
							currentTitle = questGui.Container.QuestTitle.Title.Text
						end
					end
	
					local hasValidQuest = false
					if currentTitle and currentTitle ~= "" then
						for mobName, v in pairs(EctoplasmEnemies) do
							if type(v) == "table" and currentTitle:find(mobName) then
								hasValidQuest = true
								break
							end
						end
					end
	
					if level and level.Value > 1249 then
						if not hasValidQuest then
							FireRemote("AbandonQuest")
							local options = {}
							for _, v in pairs(EctoplasmEnemies) do
								if type(v) == "table" then
									table.insert(options, v)
								end
							end
							if #options > 0 then
								local pick = options[math.random(1, #options)]
								FireRemote("StartQuest", pick[1], pick[2])
							end
						end
					end
	
					local closestMob = nil
					local shortestDist = math.huge
					for _, mob in pairs(Enemies:GetChildren()) do
						local info = EctoplasmEnemies[mob.Name]
						if info and mob:FindFirstChild("Humanoid") and mob:FindFirstChild("HumanoidRootPart") then
							if mob.Humanoid.Health > 0 then
								local dist = (mob.HumanoidRootPart.Position - hrp.Position).Magnitude
								if dist < shortestDist then
									shortestDist = dist
									closestMob = mob
								end
							end
						end
					end
	
					if closestMob then
						repeat
							task.wait()
							bringmobs = true
							EquipTool(SelectWeapon)
							Tween(closestMob.HumanoidRootPart.Position + Type)
							MobPos = closestMob.HumanoidRootPart.Position
							MobName = closestMob.Name
						until
							not _G.FarmEctoplasm or
							not closestMob.Parent or
							closestMob.Humanoid.Health <= 0 or
							not Enemies:FindFirstChild(closestMob.Name)
						bringmobs = false
					else
						local targetPos = Vector3.new(904.407, 181.058, 33341.387)
						local dist = (targetPos - hrp.Position).Magnitude
						if dist > 5000 then
							Tween(targetPos)
						end
					end
				end
			end)
		end
	end)
	
	local BoneEnemies = {
		["Reborn Skeleton"] = {"HauntedQuest1", 1},
		["Living Zombie"] = {"HauntedQuest1", 2},
		["Demonic Soul"] = {"HauntedQuest2", 1},
		["Posessed Mummy"] = {"HauntedQuest2", 2},
		["Soul Reaper"] = true,
	}
	
	spawn(function()
		while task.wait() do
			if _G.FarmBones then
				pcall(function()
					local player = game.Players.LocalPlayer
					local gui = player:FindFirstChild("PlayerGui")
					local level = player:FindFirstChild("Data") and player.Data:FindFirstChild("Level")
					if not level or level.Value <= 1974 then return end
	
					local questGui = gui and gui:FindFirstChild("Main") and gui.Main:FindFirstChild("Quest")
					local title = questGui and questGui.Container and questGui.Container:FindFirstChild("QuestTitle") and questGui.Container.QuestTitle.Title.Text or ""
					local visible = questGui and questGui.Visible
	
					local hasValidQuest = false
					if visible and title ~= "" then
						for mob, v in pairs(BoneEnemies) do
							if type(v) == "table" and title:find(mob) then
								hasValidQuest = true
								break
							end
						end
					end
	
					local questOptions = {}
					for _, v in pairs(BoneEnemies) do
						if type(v) == "table" then
							table.insert(questOptions, v)
						end
					end
	
					if not visible or title == "" then
						if #questOptions > 0 then
							local pick = questOptions[math.random(1, #questOptions)]
							FireRemote("StartQuest", pick[1], pick[2])
						end
					elseif not hasValidQuest then
						FireRemote("AbandonQuest")
						if #questOptions > 0 then
							local pick = questOptions[math.random(1, #questOptions)]
							FireRemote("StartQuest", pick[1], pick[2])
						end
					end
				end)
			end
		end
	end)
	
	task.spawn(function()
		while task.wait() do
			if _G.FarmBones then
				pcall(function()
					local player = game.Players.LocalPlayer
					local char = player.Character
					local root = char and char:FindFirstChild("HumanoidRootPart")
					if not root then return end
	
					local Enemies = workspace:WaitForChild("Enemies")
					local closest, shortest = nil, math.huge
	
					for _, mob in pairs(Enemies:GetChildren()) do
						if BoneEnemies[mob.Name] and mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
							local dist = (mob.HumanoidRootPart.Position - root.Position).Magnitude
							if dist < shortest then
								shortest = dist
								closest = mob
							end
						end
					end
	
					if not closest and workspace:FindFirstChild("Map") then
						local pos = workspace.Map["Haunted Castle"].Summoner.Detection.Position
						Tween(pos)
						return
					end
	
					if closest then
						repeat
							task.wait()
							bringmobs = true
							EquipTool(SelectWeapon)
							Tween(closest.HumanoidRootPart.Position + Type)
							MobPos = closest.HumanoidRootPart.Position
							MobName = closest.Name
						until not _G.FarmBones or closest.Humanoid.Health <= 0 or not closest.Parent
						bringmobs = false
					end
				end)
			end
		end
	end)
	
	task.spawn(function()
		while task.wait() do
			if _G.AutoSoulReaper then
				pcall(function()
					if workspace.Enemies:FindFirstChild("Soul Reaper") then
						for _, v in pairs(workspace.Enemies:GetChildren()) do
							if v.Name:find("Soul Reaper") then
								repeat
									task.wait()
									EquipTool(SelectWeapon)
									Tween(v.HumanoidRootPart.Position + Type)
									sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
								until v.Humanoid.Health <= 0 or not _G.AutoSoulReaper
							end
						end
					elseif game.ReplicatedStorage:FindFirstChild("Soul Reaper") then
						Tween(game.ReplicaterStorage["Soul Reaper"].HumanoidRootPart.Position)
					elseif VerifyTool("Hallow Essence") then
						local pos = workspace.Map["Haunted Castle"].Summoner.Detection.Position
						repeat
							EquipTool("Hallow Essence")
							Tween(pos)
							task.wait()
						until (pos - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 8 or not _G.AutoSoulReaper or not VerifyTool("Hallow Essence")
					end
				end)
			end
		end
	end)
	
	task.spawn(function()
		while task.wait() do
			if _G.RandomBones then
				FireRemote("Bones", "Buy", 1, 1)
			end
		end
	end)
	
	function GetBossQuest(name)
		BossesQuest = {
		    ["The Gorilla King"] = {"JungleQuest", 3, 25},
		    ["Chef"] = {"BuggyQuest1", 3, 55},
		    ["Yeti"] = {"SnowQuest", 3, 105},
		    ["Vice Admiral"] = {"MarineQuest2", 2, 130},
		    ["Swan"] = {"ImpelQuest", 3, 240},
		    ["Chief Warden"] = {"ImpelQuest", 2, 230},
		    ["Warden"] = {"ImpelQuest", 1, 220},
		    ["Magma Admiral"] = {"MagmaQuest", 3, 300},
		    ["Fishman Lord"] = {"FishmanQuest", 3, 425},
		    ["Wysper"] = {"SkyExp1Quest", 3, 500},
		    ["Thunder God"] = {"SkyExp2Quest", 3, 575},
		    ["Cyborg"] = {"FountainQuest", 3, 625},
		    ["Diamond"] = {"Area1Quest", 3, 750},
		    ["Jeremy"] = {"Area2Quest", 3, 850},
		    ["Orbitus"] = {"MarineQuest3", 3, 925},
		    ["Smoke Admiral"] = {"IceSideQuest", 3, 1150},
		    ["Awakened Ice Admiral"] = {"FrostQuest", 3, 1400},
		    ["Tide Keeper"] = {"ForgottenQuest", 3, 1475},
		    ["Stone"] = {"PiratePortQuest", 3, 1550},
		    ["Hydra Leader"] = {"VenomCrewQuest", 3, 1575},
		    ["Kilo Admiral"] = {"MarineTreeIsland", 3, 1600},
		    ["Captain Elephant"] = {"DeepForestIsland", 3, 1700},
		    ["Cake Queen"] = {"IceCreamIslandQuest", 3, 2175}
		}
		return BossesQuest[name]
	end
	
	SafeSpawn(function()
		while task.wait() do
			if _G.DefeatBoss and typeof(_G.SelectedBoss) == "string" and _G.SelectedBoss ~= "" then
				local guiPath = LocalPlayer:FindFirstChild("PlayerGui") and LocalPlayer.PlayerGui:FindFirstChild("Main")
				local questUI = guiPath and guiPath:FindFirstChild("Quest")
				local questTitle = questUI and questUI:FindFirstChild("Title")
				local questText = questTitle and questTitle:FindFirstChild("Text")
				if questText and not questText:find(_G.SelectedBoss) then
					FireRemote("AbandonQuest")
				end
				local enemies = workspace:FindFirstChild("Enemies")
				local backup = game.ReplicatedStorage
				local boss = (enemies and enemies:FindFirstChild(_G.SelectedBoss)) or (backup and backup:FindFirstChild(_G.SelectedBoss))
				if _G.GetBossQuest == true then
					local questData = GetBossQuest(_G.SelectedBoss)
					if questData and typeof(questData[1]) == "string" and typeof(questData[2]) == "number" and typeof(questData[3]) == "number" then
						local level = LocalPlayer and LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level")
						if level and level.Value >= questData[3] then
							FireRemote("StartQuest", questData[1], questData[2])
						end
					end
				end
				if boss and boss:FindFirstChild("Humanoid") and boss:FindFirstChild("HumanoidRootPart") and boss.Humanoid.Health > 0 then
					repeat
						task.wait()
						if SelectWeapon then EquipTool(SelectWeapon) end
						Tween(boss.HumanoidRootPart.Position + Type)
					until boss.Humanoid.Health <= 0 or not _G.DefeatBoss
				end
			end
		end
	end)
	
	BossesList = {}
	
	function IsValidBoss(name)
		return name ~= "rip_indra" and name ~= "Mob Leader" and name ~= "Ice Admiral"
	end
	
	for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
		if v:GetAttribute("IsBoss") and IsValidBoss(v.Name) then
			table.insert(BossesList, v.Name)
		end
	end
	
	for i, v in pairs(workspace.Enemies:GetChildren()) do
		if v:GetAttribute("IsBoss") and IsValidBoss(v.Name) then
			table.insert(BossesList, v.Name)
		end
	end
	
	function UpdateBossList()
		BossesList = {}
		for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
			if v:GetAttribute("IsBoss") and IsValidBoss(v.Name) then
				table.insert(BossesList, v.Name)
			end
		end
		for i, v in pairs(workspace.Enemies:GetChildren()) do
			if v:GetAttribute("IsBoss") and IsValidBoss(v.Name) then
				table.insert(BossesList, v.Name)
			end
		end
		BossList:Set(BossesList)
	end
	
	if Sea1 then
    MaterialList = {
        "Scrap Metal & Leather",
        "Angel Wings",
        "Magma Ore",
        "Fish Tail"
    }
elseif Sea2 then
    MaterialList = {
        "Scrap Metal & Leather",
        "Radioactive Material",
        "Mystic Droplet",
        "Magma Ore",
        "Vampire Fang"
    }
elseif Sea3 then
    MaterialList = {
        "Scrap Metal & Leather",
        "Demonic Wisp",
        "Conjured Cocoa",
        "Dragon Scale",
        "Gunpowder",
        "Fish Tail",
        "Mini Tusk",
    }
end
	
	local SeaLevel = Sea1 and 1 or Sea2 and 2 or Sea3 and 3

	local MaterialData = {
	    ["Scrap Metal & Leather"] = {
	        [1] = {
	            {Name = "Brute", Position = Vector3.new(-1145, 15, 4350)},
	            {Name = "Pirate", Position = Vector3.new(-1200, 16, 4400)}
	        },
	        [2] = {
	            {Name = "Marine Captain", Position = Vector3.new(-2010, 73, -3326)},
	            {Name = "Marine Lieutenant", Position = Vector3.new(-2050, 73, -3300)}
	        },
	        [3] = {
	            {Name = "Jungle Pirate", Position = Vector3.new(-11975, 331, -10620)},
	        }
	    },
	    ["Fish Tail"] = {
	        [1] = {
	            {Name = "Fishman Warrior", Position = Vector3.new(61123, 19, 1569)},
				{Name = "Fishman Commando", Position = Vector3.new(61738, 64, 1434)}
	        },
	        [3] = {
	            {Name = "Fishman Raider", Position = Vector3.new(-10993, 332, -8940)},
				{Name = "Fishman Captain", Position = Vector3.new(-10789, 427, -9131)}
	        }
	    },
	    ["Angel Wings"] = {
	        [1] = {
	            {Name = "Shanda", Position = Vector3.new(-7685, 5601, -441)},
				{Name = "Royal Squad", Position = Vector3.new(-7654, 5637, -1408)},
				{Name = "Royal Soldier", Position = Vector3.new(-7903, 5679, -1885)}
	        }
	    },
	    ["Radioactive Material"] = {
	        [2] = {
	            {Name = "Factory Staff", Position = Vector3.new(295, 73, -56)}
	        }
	    },
	    ["Mystic Droplet"] = {
	        [2] = {
				{Name = "Sea Soldier", Position = Vector3.new(-3185, 59, -9664)},
	            {Name = "Water Fighter", Position = Vector3.new(-3385, 239, -10542)}
	        }
	    },
	    ["Magma Ore"] = {
	        [1] = {
	            {Name = "Military Spy", Position = Vector3.new(-5815, 84, 8820)},
				{Name = "Military Soldier", Position = Vector3.new(-5370, 61, 8556)}
	        },
	        [2] = {
	            {Name = "Magma Ninja", Position = Vector3.new(-5428, 78, -5959)},
				{Name = "Lava Pirate", Position = Vector3.new(-5251, 55, -4774)}
	        }
	    },
	    ["Demonic Wisp"] = {
	        [3] = {
	            {Name = "Demonic Soul", Position = Vector3.new(-9507, 172, 6158)}
	        }
	    },
	    ["Vampire Fang"] = {
	        [2] = {
	            {Name = "Vampire", Position = Vector3.new(-6033, 7, -1317)}
	        }
	    },
	    ["Conjured Cocoa"] = {
	        [3] = {
	            {Name = "Chocolate Bar Battler", Position = Vector3.new(620, 78, -12581)},
				{Name = "Cocoa Warrior", Position = Vector3.new(168, 26, -12239)}
	        }
	    },
	    ["Dragon Scale"] = {
	        [3] = {
				{Name = "Dragon Crew Warrior", Position = Vector3.new(6615, 51, -979)},
	            {Name = "Dragon Crew Archer", Position = Vector3.new(6827, 609, 252)}
	        }
	    },
	    ["Gunpowder"] = {
	        [3] = {
	            {Name = "Pistol Billionaire", Position = Vector3.new(-189, 84, 6243)}
	        }
	    },
	    ["Mini Tusk"] = {
	        [3] = {
	            {Name = "Mythological Pirate", Position = Vector3.new(-13509, 582, -6985)}
	        }
	    }
	}
	
	SafeSpawn(function()
	    while task.wait() do
	        if _G.AutoMaterial then
	            pcall(function()
	                local entries = MaterialData[_G.SelectMaterial]
	                if not entries then return end
	
	                local mobs = entries[SeaLevel]
	                if not mobs then return end
	
	                for _, mob in ipairs(mobs) do
	
	                    Tween(mob.Position)
	
	                    for _, enemy in pairs(game.Workspace.Enemies:GetChildren()) do
	                        if enemy.Name == mob.Name and enemy:FindFirstChild("Humanoid") and enemy:FindFirstChild("HumanoidRootPart") and enemy.Humanoid.Health > 0 then
	                            repeat
	                                task.wait()
	                                bringmobs = true
	                                EquipTool(SelectWeapon)
	                                Tween(enemy.HumanoidRootPart.Position + Type)
	                                MobPos = enemy.HumanoidRootPart.Position
	                                MobName = enemy.Name
	                            until not _G.AutoMaterial or not enemy.Parent or enemy.Humanoid.Health <= 0
	                            bringmobs = false
	                        end
	                    end
	                end
	            end)
	        end
	    end
	end)
	
	local function IsFarming()
		return _G.FarmCakeBoss
	end
	
	local function GetCakePrince()
		for _, v in pairs(workspace.Enemies:GetChildren()) do
			if v.Name == "Cake Prince" and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
				return v
			end
		end
		return nil
	end
	
	local function GetClosestEnemy(names)
		local closest, dist = nil, math.huge
		for _, v in pairs(workspace.Enemies:GetChildren()) do
			if not IsFarming() then return nil end
			if table.find(names, v.Name) and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
				local mag = (v.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
				if mag < dist then
					closest, dist = v, mag
				end
			end
		end
		return closest
	end
	
	local function AttackEnemy(v)
		while IsFarming() and v and v.Parent and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 do
			EquipTool(SelectWeapon)
			Tween(v.HumanoidRootPart.Position + Type)
			task.wait()
		end
	end
	
	spawn(function()
		while task.wait() do
			if IsFarming() or _G.FarmDoughKing then
				FireRemote("CakePrinceSpawner", true)
				FireRemote("CakePrinceSpawner")
			end
		end
	end)
	
	spawn(function()
		while task.wait() do
			if not IsFarming() then continue end
	
			pcall(function()
				local doughKing = workspace.Enemies:FindFirstChild("Dough King")
				if IsFarming() and doughKing and doughKing:FindFirstChild("Humanoid") and doughKing.Humanoid.Health > 0 then
					AttackEnemy(doughKing)
					return
				end
	
				local cakePrince = GetCakePrince()
				if cakePrince then
					AttackEnemy(cakePrince)
					return
				end
	
				local otherNames = { "Cookie Crafter", "Cake Guard", "Baking Staff", "Head Baker" }
				local enemy = GetClosestEnemy(otherNames)
	
				if enemy then
					AttackEnemy(enemy)
				else
					for _, name in pairs(otherNames) do
						if not IsFarming() then break end
						local npc = game:GetService("ReplicatedStorage"):FindFirstChild(name)
						if npc and npc:FindFirstChild("HumanoidRootPart") then
							Tween(npc.HumanoidRootPart.Position + Type)
							break
						end
					end
				end
			end)
		end
	end)
	
	spawn(function()
		while task.wait() do
			if not _G.FarmDoughKing then continue end
	
			pcall(function()
				local hasSweetChalice = VerifyTool("Sweet Chalice")
				local hasGodsChalice = VerifyTool("God's Chalice")
				local cocoaCount = CheckMaterial("Conjured Cocoa")
	
				if hasSweetChalice then
					-- Farmar NPCs normais
					local npcs = { "Cookie Crafter", "Cake Guard", "Baking Staff", "Head Baker" }
					for _, name in pairs(npcs) do
						if not _G.FarmDoughKing then break end
						local npc = workspace.Enemies:FindFirstChild(name)
						if npc then
							AttackEnemy(npc)
						end
					end
	
				elseif hasGodsChalice and cocoaCount > 9 then
					FireRemote("SweetChaliceNpc")
					-- Farmar NPCs normais
					local npcs = { "Cookie Crafter", "Cake Guard", "Baking Staff", "Head Baker" }
					for _, name in pairs(npcs) do
						if not _G.FarmDoughKing then break end
						local npc = workspace.Enemies:FindFirstChild(name)
						if npc then
							AttackEnemy(npc)
						end
					end
	
				elseif not hasGodsChalice and cocoaCount > 9 then
					-- Ir pro espelho e esperar bosses
					Tween(workspace.Map.CakeLoaf.BigMirror.Other.Position)
					local bosses = { "Urban", "Diablo", "Deandre" }
					while _G.FarmDoughKing do
						local foundBoss = false
						for _, boss in pairs(workspace.Enemies:GetChildren()) do
							if table.find(bosses, boss.Name) and boss.Humanoid and boss.Humanoid.Health > 0 then
								AttackEnemy(boss)
								foundBoss = true
								break
							end
						end
						for _, boss in pairs(game.ReplicatedStorage:GetChildren()) do
							if table.find(bosses, boss.Name) then
								AttackEnemy(boss)
								foundBoss = true
								break
							end
						end
						if foundBoss then
							while _G.FarmDoughKing and not VerifyTool("God's Chalice") do
								task.wait(1)
							end
							break
						end
						task.wait(2)
					end
	
				elseif hasGodsChalice and cocoaCount <= 9 then
					-- Farmar Chocolate Bar Battler até ter cocoa suficiente
					Tween(Vector3.new(620, 78, -12581))
					local battler = workspace.Enemies:FindFirstChild("Chocolate Bar Battler")
					if battler then
						AttackEnemy(battler)
					end
				end
			end)
		end
	end)
	
	spawn(function()
		while task.wait() do
			if not _G.FullyEagleBoss then continue end
	
			pcall(function()
				local enemies = workspace:FindFirstChild("Enemies")
				local boss = nil
				if enemies then
					for _, v in pairs(enemies:GetChildren()) do
						if v.Name == "Tyrant of the Skies" and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
							boss = v
							break
						end
					end
				end
	
				local bossInReplicated = nil
				for _, v in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
					if v.Name == "Tyrant of the Skies" and v:FindFirstChild("Humanoid") then
						bossInReplicated = v
						break
					end
				end
	
				local eye = workspace.Map.TikiOutpost.IslandModel.IslandChunks.E:FindFirstChild("Eye4")
				local eyeVisible = eye and eye.Transparency < 1
	
				if boss then
					repeat
						EquipTool(SelectWeapon)
						Tween(boss.HumanoidRootPart.Position + Type)
						task.wait()
					until not _G.FullyEagleBoss or not boss or not boss.Parent or boss.Humanoid.Health <= 0
	
				elseif bossInReplicated then
					while _G.FullyEagleBoss and bossInReplicated and bossInReplicated.Parent do
						Tween(bossInReplicated:GetPivot().Position + Type)
						task.wait()
					end
	
				elseif eyeVisible then
					local eagleArena = workspace.Map.TikiOutpost.IslandModel.IslandChunks.D.EagleBossArena
					local tree = nil
					for _, child in pairs(eagleArena:GetChildren()) do
						if child.Name == "Tree" then
							tree = child
							break
						end
					end
	
					if tree and tree:FindFirstChild("Group") then
						local closestPart = nil
						local dist = math.huge
						for _, part in pairs(tree.Group:GetChildren()) do
							if part:IsA("MeshPart") then
								local mag = (part.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
								if mag < dist then
									dist = mag
									closestPart = part
								end
							end
						end
						if closestPart then
							Tween(closestPart.Position)
							while _G.FullyEagleBoss and tree.Parent and not boss and not bossInReplicated do
								local validTools = {}
								for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
									if S["Use " .. tool.ToolTip] then
										table.insert(validTools, tool.Name)
									end
								end
								if #validTools > 0 then
									local tool = validTools[math.random(1, #validTools)]
									EquipTool(tool)
	
									local keys = { "Z", "X", "C", "V", "F" }
									local usableKeys = {}
									for _, key in pairs(keys) do
										if S[tool.ToolTip .. " Use Skill " .. key] then
											table.insert(usableKeys, key)
										end
									end
									if #usableKeys > 0 then
										local key = usableKeys[math.random(1, #usableKeys)]
										local holdTime = S[tool.ToolTip .. " Hold Time Skill " .. key] or 0
										SendKey(key, holdTime)
									end
									task.wait(1)
								end
								task.wait(1)
							end
						end
					end
	
				else
					local farmNpcs = {
						"Sun-kissed Warrior",
						"Isle Champion",
						"Serpent Hunter",
						"Skull Slayer"
					}
					for _, name in pairs(farmNpcs) do
						if not _G.FullyEagleBoss then break end
						local npc = workspace.Enemies:FindFirstChild(name)
						if npc and npc:FindFirstChild("Humanoid") and npc.Humanoid.Health > 0 then
							repeat
								bringmobs = true
								EquipTool(SelectWeapon)
								Tween(npc.HumanoidRootPart.Position + Type)
								MobName = npc.Name
								MobPos = npc.HumanoidRootPart.Position
								task.wait()
							until not _G.FullyEagleBoss or not npc or not npc.Parent or npc.Humanoid.Health <= 0
							bringmobs = false
						end
					end
				end
			end)
		end
	end)
	
	function EquipColor(colorName)
		local args = {
			{
				StorageName = colorName,
				Type = "AuraSkin",
				Context = "Equip"
			}
		}
		game:GetService("ReplicatedStorage")
			:WaitForChild("Modules")
			:WaitForChild("Net")
			:WaitForChild("RF/FruitCustomizerRF")
			:InvokeServer(unpack(args))
	end
	
	spawn(function()
		while task.wait() do
			if not _G.ActiveColors then continue end
	
			local castle = workspace.Map["Boat Castle"].Summoner.Circle
			local order = {
				{ color = "Snow White",  model = castle:GetChildren()[4] },
				{ color = "Winter Sky",  model = castle.Part },
				{ color = "Pure Red",    model = castle:GetChildren()[3] },
			}
	
			for _, step in ipairs(order) do
				local model = step.model
				local part = model:FindFirstChild("Part")
				if part and part.Color ~= Color3.fromRGB(0, 255, 0) then
					EquipColor(step.color)
					repeat task.wait() Tween(model.Position) until part.Color == Color3.fromRGB(0, 255, 0) or not _G.ActiveColors
				end
			end
		end
	end)
	
	spawn(function()
	    while wait() do
	        if _G.AutoRipIndra then
	            pcall(function()
	                local workspace = game:GetService("Workspace")
	                local replicated = game:GetService("ReplicatedStorage")
	                local localPlayer = game:GetService("Players").LocalPlayer
	
	                local enemies = workspace.Enemies
	                local ripTrueForm = enemies:FindFirstChild("rip_indra True Form")
	                if not ripTrueForm then
	                    ripTrueForm = replicated:FindFirstChild("rip_indra True Form")
	                end
	
	                if ripTrueForm and ripTrueForm:FindFirstChild("Humanoid") and ripTrueForm.Humanoid.Health > 0 and ripTrueForm:FindFirstChild("HumanoidRootPart") then
	                    repeat
	                        task.wait()
	                        EquipTool(SelectWeapon)
	                        Tween(ripTrueForm.HumanoidRootPart.Position + Type)
	                    until not _G.AutoRipIndra or ripTrueForm.Humanoid.Health <= 0
	
	                elseif VerifyTool("God's Chalice") then
						local Circle = workspace.Map["Boat Castle"].Summoner.Circle
						if Circle:GetChildren()[3].Part.BrickColor == "Lime Green" and Circle.Part.Part.BrickColor == "Lime Green" and Circle:GetChildren()[4].Part.BrickColor == "Lime Green" then
		                    Tween(workspace.Map["Boat Castle"].Summoner.Detection.Position)
						end
	                else
	                    local npcsToCheck = {"Diablo", "Deandre", "Urban"}
	
	                    local npcFound = nil
	                    for _, npcName in pairs(npcsToCheck) do
	                        if replicated:FindFirstChild(npcName) then
	                            npcFound = replicated:FindFirstChild(npcName)
	                            Tween(npcFound.HumanoidRootPart.Position + Type)
	                            break
	                        elseif enemies:FindFirstChild(npcName) then
	                            npcFound = enemies:FindFirstChild(npcName)
	                            break
	                        end
	                    end
	
	                    if npcFound and npcFound.Parent == enemies then
	                        repeat
	                            task.wait()
	                            EquipTool(SelectWeapon)
	                            Tween(npcFound.HumanoidRootPart.Position + Type)
	                        until not _G.AutoRipIndra or npcFound.Humanoid.Health <= 0
	                    end
	                end
	            end)
	        end
	    end
	end)
	
	function GetEliteSpawn()
		local Progress = FireRemote("EliteHunter", "Progress")
		local npcName = nil
		if VerifyNPC("Deandre") then
			npcName = "Deandre"
		elseif VerifyNPC("Diablo") then
			npcName = "Diablo"
		elseif VerifyNPC("Urban") then
			npcName = "Urban"
		end
		if npcName then
			return "Elite Hunter: " .. npcName .. " | Progress: " .. Progress
		else
			return "Elite Hunter Status: None | Progress: " .. Progress
		end
	end
	
	SafeSpawn(function()
	    while wait() do
	        if _G.DefeatEliteHunter then
	            pcall(function()
	                local enemies = workspace.Enemies
	                local replicated = game:GetService("ReplicatedStorage")
	                local player = game.Players.LocalPlayer
	                local gui = player.PlayerGui.Main
	                local eliteNames = { "Diablo", "Deandre", "Urban" }
	                local target = nil
	
	                -- Buscar o Elite no Enemies ou Replicated
	                for _, name in pairs(eliteNames) do
	                    if enemies:FindFirstChild(name) then
	                        target = enemies:FindFirstChild(name)
	                        break
	                    elseif replicated:FindFirstChild(name) then
	                        target = replicated:FindFirstChild(name)
	                        break
	                    end
	                end
	
	                if target then
	                    FireRemote("EliteHunter")
	
	                    local hasQuest = false
	                    for _, name in pairs(eliteNames) do
	                        if gui and gui:FindFirstChild("Quest") and gui.Quest:FindFirstChild("Container") and gui.Quest.Container:FindFirstChild("QuestTitle") and gui.Quest.Container.QuestTitle:FindFirstChild("Title") then
	                            if gui.Quest.Container.QuestTitle.Title.Text:find(name) then
	                                hasQuest = true
	                                break
	                            end
	                        end
	                    end
	
	                    if not hasQuest then
	                        FireRemote("AbandonQuest")
	                        FireRemote("EliteHunter")
	                        return
	                    end
	
	                    if target:IsDescendantOf(replicated) then
	                        Tween(target.HumanoidRootPart.Position + Type)
	
	                    elseif target:IsDescendantOf(enemies) then
	                        repeat task.wait()
	                            pcall(function()
	                                EquipTool(SelectWeapon)
	                                Tween(target.HumanoidRootPart.Position + Type)
	                            end)
	                        until not _G.DefeatEliteStatus or target.Humanoid.Health <= 0
	                    end
	                end
	            end)
	        end
	    end
	end)
	-------------------------------[[ Quest ]]-------------------------------
	
	 SafeSpawn(function()
            while task.wait() do 
                if _G.UnlockSecondSea then
                    pcall(function()
                        local MyLevel = LocalPlayer.Data.Level.Value
                        if MyLevel >= 700 then
                        local IceDoor = workspace.Map.Ice.Door
                            if IceDoor.CanCollide == true and IceDoor.Transparency ==  0 then
                                FireRemote("DressrosaQuestProgress","Detective")
                                task.wait(0.5)
                                EquipTool("Key")
                                repeat Tween(IceDoor.Position) wait() until (IceDoor.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 3 or not _G.UnlockSecondSea
                                wait(0.5)
                            else
                                if IceDoor.CanCollide == false and IceDoor.Transparency == 1 then
                                    if workspace.Enemies:FindFirstChild("Ice Admiral") then
                                        for i,v in pairs(workspace.Enemies:GetChildren()) do
                                            if v.Name == "Ice Admiral" then
                                                if not v.Humanoid.Health <= 0 then
                                                    if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                                        repeat task.wait()
                                                            EquipTool(SelectWeapon)
                                                            Tween(v.HumanoidRootPart.Position + Type)
                                                        until not _G.UnlockSecondSea or not v.Parent or v.Humanoid.Health <= 0
                                                    end
                                                else 
                                                    FireRemote("TravelDressrosa")
                                                    AutoSecondSea:Set(false)
                                                end
                                            end
                                        end
                                    else
                                        if ReplicatedStorage:FindFirstChild("Ice Admiral") then
                                            Tween(ReplicatedStorage["Ice Admiral"].HumanoidRootPart.Position + Type)
                                        end
                                    end
                                end
                            end
                        end
                    end)
                end
            end
        end)
    
	spawn(function()
		while task.wait() do
			if _G.UnlockSaber and game.Players.LocalPlayer.Data.Level.Value >= 200 then
				pcall(function()
					local workspace = game:GetService("Workspace")
					local map = workspace.Map
					local remotes = game:GetService("ReplicatedStorage").Remotes
					local localPlayer = game.Players.LocalPlayer
					local enemies = workspace.Enemies
					local replicatedStorage = game:GetService("ReplicatedStorage")
	
					local function firePlate(plateNumber)
						FireRemote("ProQuestProgress", "Plate", plateNumber)
						task.wait(0.1)
					end
					if map.Jungle.Final.Part.Transparency == 0 then
						if map.Jungle.QuestPlates.Door.Transparency == 0 then
							for i = 1, 5 do
								firePlate(i)
							end
							task.wait(0.2)
						else
							FireRemote("ProQuestProgress", "GetTorch")
						end
					end
					if map.Desert.Burn.Part.Transparency == 0 then
						if VerifyTool("Torch") then
							EquipTool("Torch")
							task.wait(0.1)
							FireRemote("ProQuestProgress", "DestroyTorch")
						else
							FireRemote("ProQuestProgress", "GetTorch")
						end
					end
					if FireRemote("ProQuestProgress", "SickMan") ~= 0 then
						FireRemote("ProQuestProgress", "GetCup")
						task.wait(0.1)
						EquipTool("Cup")
						task.wait(0.1)
						FireRemote("ProQuestProgress", "FillCup", localPlayer.Character.Cup)
						task.wait(0.1)
						FireRemote("ProQuestProgress", "SickMan")
					end
					if FireRemote("ProQuestProgress", "RichSon") == nil then
						FireRemote("ProQuestProgress", "RichSon")
					end
					if FireRemote("ProQuestProgress", "RichSon") == 0 then
						if enemies:FindFirstChild("Mob Leader") or replicatedStorage:FindFirstChild("Mob Leader") then
							Tween(Vector3.new(-2967, 4, 5328))
	
							for _, mob in pairs(enemies:GetChildren()) do
								if mob.Name == "Mob Leader"
									and mob:FindFirstChild("Humanoid")
									and mob:FindFirstChild("HumanoidRootPart")
									and mob.Humanoid.Health > 0 then
	
									repeat
										task.wait()
										EquipTool(SelectWeapon)
										Tween(mob.HumanoidRootPart.Position + Type)
									until mob.Humanoid.Health <= 0 or not _G.UnlockSaber
								end
							end
	
							if replicatedStorage:FindFirstChild("Mob Leader") then
								Tween(replicatedStorage["Mob Leader"].HumanoidRootPart.Position + Type)
							end
						end
					end
					if FireRemote("ProQuestProgress", "RichSon") == 1 and map.Jungle.Final.Invis.CanCollide == false and map.Jungle.Final.Invis.Transparency == 1 then
						FireRemote("ProQuestProgress", "RichSon")
						task.wait(0.2)
						EquipTool("Relic")
						task.wait(0.2)
						FireRemote("ProQuestProgress", "PlaceRelic")
					end
					local bossDoor = map.Jungle.Final.Invis
					if bossDoor and bossDoor.Transparency > 1 and bossDoor.CanCollide == false then
						local saber = enemies:FindFirstChild("Saber Expert") or replicatedStorage:FindFirstChild("Saber Expert")
						if saber and saber:FindFirstChild("Humanoid") and saber:FindFirstChild("HumanoidRootPart") and saber.Humanoid.Health > 0 then
							repeat
								task.wait()
								EquipTool(SelectWeapon)
								Tween(saber.HumanoidRootPart.Position + Type)
							until saber.Humanoid.Health <= 0 or not _G.UnlockSaber
						else
							Tween(Vector3.new(-1460, 29, -51))
						end
					else
						return
					end
				end)
			end
		end
	end)
        
    task.spawn(function()
		while task.wait() do
			if _G.CollectBerries then
				local bushes = CollectionService:GetTagged("BerryBush")
				local character = LocalPlayer.Character
				local hrp = character and character:FindFirstChild("HumanoidRootPart")
				if not hrp then task.wait(1) continue end
	
				local closestBush = nil
				local closestDist = math.huge
	
				for _, bush in ipairs(bushes) do
					if next(bush:GetAttributes()) == nil then continue end
					local model = bush.Parent
					if not model then continue end
	
					local dist = (model:GetPivot().Position - hrp.Position).Magnitude
					if dist < closestDist then
						closestDist = dist
						closestBush = bush
					end
				end
	
				if not closestBush then task.wait(1) continue end
	
				local model = closestBush.Parent
				local distToModel = (model:GetPivot().Position - hrp.Position).Magnitude
	
				if distToModel > 100 then
					Tween(model:GetPivot().Position)
				end
	
				if not _G.CollectBerries then continue end
	
				local child = closestBush:FindFirstChildOfClass("Model")
				if child then
					Tween(child.WorldPivot.Position)
					for name, value in pairs(closestBush:GetAttributes()) do
						if name and value then
							game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RF/ClaimBerry"):InvokeServer(closestBush.Parent.Name, name)
						end
					end
				end
			end
		end
	end)
	
	function Get1MFruit()
	    local Fruits = {
	        "Quake-Quake",
	        "Love-Love",
	        "Phoenix-Phoenix",
	        "Spider-Spider",
	        "Pain-Pain",
	        "Sound-Sound",
	    }
	    local LocalFruits = {}
	    for _, v in pairs(FireRemote("getInventoryFruits")) do
	        table.insert(LocalFruits, v.Name)
	    end
	    for _, Fruit in pairs(Fruits) do
	        for _, LocalFruit in pairs(LocalFruits) do
	            if Fruit == LocalFruit then
	                return Fruit
	            end
	        end
	    end
	    return nil
	end
	
	spawn(function()
	    while task.wait() do
	        pcall(function()
	            if _G.UnlockThirdSea and LocalPlayer.Data.Level.Value >= 1500 then
	                if FireRemote("ZQuestProgress", "Zou") ~= 0 then
	                    if not FireRemote("BartiloQuestProgress").DidPlates then
	                        local Unlockables = FireRemote("GetUnlockables")
	                        if not Unlockables.FlamingoAccess then
	                            local FruitToUse = Get1MFruit()
	                            if FruitToUse then
	                                FireRemote("LoadFruit", FruitToUse)
	                                wait(0.1)
	                                FireRemote("TalkTrevor", "1")
	                                FireRemote("TalkTrevor", "2")
	                                FireRemote("TalkTrevor", "3")
	                            end
	                        elseif not Unlockables.SwanShip then
	                            for _, swan in pairs(workspace.Enemies:GetChildren()) do
	                                if swan.Name == "Don Swan" and swan:FindFirstChild("Humanoid") and swan:FindFirstChild("HumanoidRootPart") and swan.Humanoid.Health > 0 then
	                                    repeat task.wait()
	                                        EquipTool(SelectWeapon)
	                                        Tween(swan.HumanoidRootPart.Position + Type)
	                                    until not _G.UnlockThirdSea or swan.Humanoid.Health <= 0 or not swan.Parent
	                                    break
	                                end
	                            end
	                            if game.ReplicatedStorage:FindFirstChild("Don Swan") then
	                                Tween(game.ReplicatedStorage["Don Swan"].HumanoidRootPart.Position + Type)
	                            end
	                        else
	                            local indra = workspace.Enemies:FindFirstChild("rip_indra")
	                            if not indra then
	                                FireRemote("ZQuestProgress", "Begin")
	                            elseif indra:FindFirstChild("Humanoid") and indra:FindFirstChild("HumanoidRootPart") and indra.Humanoid.Health > 0 then
	                                repeat task.wait()
	                                    EquipTool(SelectWeapon)
	                                    Tween(indra.HumanoidRootPart.Position + Type)
	                                until not _G.UnlockThirdSea or indra.Humanoid.Health <= 0 or not indra.Parent
	                                FireRemote("TravelZou") -- Executa só no final
	                            end
	                        end
	                    end
	                else
	                    FireRemote("TravelZou")
	                end
	            end
	        end)
	    end
	end)
	
	local function TweenTo(pos)
	    repeat
	        Tween(pos)
	        task.wait()
	    until not _G.BartiloQuest or (LocalPlayer.Character.HumanoidRootPart.Position - pos).Magnitude <= 10
	end
	
	spawn(function()
	    pcall(function()
	        while task.wait(0.1) do
	            if _G.BartiloQuest then
	                local level = LocalPlayer.Data.Level.Value
	                local progress = FireRemote("BartiloQuestProgress", "Bartilo")
	
	                if level >= 800 and progress == 0 then
	                    local gui = LocalPlayer.PlayerGui.Main.Quest
	                    if gui.Visible and
	                       gui.Container and
	                       gui.Container.QuestTitle and
	                       gui.Container.QuestTitle.Title and
	                       string.find(gui.Container.QuestTitle.Title.Text, "Swan Pirates") and
	                       string.find(gui.Container.QuestTitle.Title.Text, "50") then
	
	                        if workspace.Enemies:FindFirstChild("Swan Pirate") then
	                            local Ms = "Swan Pirate"
	                            for _, v in pairs(workspace.Enemies:GetChildren()) do
	                                if v.Name == Ms then
	                                    pcall(function()
	                                        repeat
	                                            bringmobs = true
	                                            EquipTool(SelectWeapon)
	                                            Tween(v.HumanoidRootPart.Position + Type)
	                                            MobPos = v.HumanoidRootPart.Position
	                                            MobName = v.Name
	                                            task.wait()
	                                        until not v.Parent or v.Humanoid.Health <= 0 or not _G.BartiloQuest or not gui.Visible
	                                        bringmobs = false
	                                    end)
	                                end
	                            end
	                        else
	                            TweenTo(Vector3.new(932, 156, 1180)) -- Local do Swan Pirate
	                        end
	                    else
	                        TweenTo(Vector3.new(-456, 73, 299)) -- Local do Bartilo
	                        wait(1.1)
	                        FireRemote("StartQuest", "BartiloQuest", 1)
	                    end
	
	                elseif level >= 800 and progress == 1 then
	                    if workspace.Enemies:FindFirstChild("Jeremy") then
	                        for _, v in pairs(workspace.Enemies:GetChildren()) do
	                            if v.Name == "Jeremy" then
	                                repeat
	                                    EquipTool(SelectWeapon)
	                                    Tween(v.HumanoidRootPart.Position + Type)
	                                    task.wait()
	                                until not v.Parent or v.Humanoid.Health <= 0 or not _G.BartiloQuest
	                            end
	                        end
	                    elseif ReplicatedStorage:FindFirstChild("Jeremy") then
	                        TweenTo(Vector3.new(-456, 73, 299)) -- Volta pro Bartilo
	                        wait(1.1)
	                        FireRemote("BartiloQuestProgress", "Bartilo")
	                        wait(1)
	                        TweenTo(Vector3.new(2099.88159, 448.931, 648.997375)) -- Porta escondida
	                        wait(2)
	                    else
	                        TweenTo(Vector3.new(2099.88159, 448.931, 648.997375))
	                    end
	
	                elseif level >= 800 and progress == 2 then
	                    for i = 1, 8 do
	                        local plate = workspace.Map.Dressrosa.BartiloPlates:FindFirstChild("Plate" .. i)
	                        if plate then
	                            local decal = plate:FindFirstChildWhichIsA("Decal")
	                            if decal and decal.Color3 == Color3.fromRGB(255, 255, 255) then
	                                TweenTo(plate.Position)
	                                wait(1)
	                            end
	                        end
	                    end
	
	                    if _G.BartiloQuest then
	                        TweenTo(Vector3.new(-1813.51843, 14.8604736, 1724.79541)) -- Local final
	                    end
	                end
	            end
	        end
	    end)
	end)
	
	spawn(function()
	    pcall(function()
	        while wait() do
	            if _G.DefeatLawBoss then
	                if (not workspace.Enemies:FindFirstChild("Order") and not game:GetService("ReplicatedStorage"):FindFirstChild("Order")) then
	                    if VerifyTool("Microchip") then
	                        fireclickdetector(workspace.Map.CircleIsland.RaidSummon.Button.Main.ClickDetector)
	                    end
	                end
	                if (game:GetService("ReplicatedStorage"):FindFirstChild("Order") or workspace.Enemies:FindFirstChild("Order")) then
	                    if workspace.Enemies:FindFirstChild("Order") then
	                        for _, enemy in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
	                            if (enemy.Name == "Order") then
	                                repeat
	                                    task.wait()
	                                    EquipTool(SelectWeapon)
	                                    Tween(enemy.HumanoidRootPart.Position + Type)
	                                until not enemy.Parent or enemy.Humanoid.Health <= 0 or _G.DefeatLawBoss == false
	                            end
	                        end
	                    elseif game:GetService("ReplicatedStorage"):FindFirstChild("Order") then
	                        Tween(Vector3.new(-6217, 28, - 5053))
	                    end
	                end
	            end
	        end
	    end)
	end)
	
	function CheckHakiColor()
        local v141, v142 = FireRemote("ColorsDealer", "1")
            if not v141 or v141 == 1 then
                return "None", "0\198\146"
            end
            if v141 ~= 1 then
                return v141, tostring(v142) .. "\198\146"
            end
        end
        
        task.spawn(function()
	        while task.wait() do
				if _G.UnlockColors then
					FireRemote("ColorsDealer","2")
				end
			end
        end)
        
   spawn(function()
        pcall(function()
            while wait() do
            if _G.UnlockRengoku then
            local Enemies = game:GetService("Workspace").Enemies
	            if VerifyTool("Library Key") then
					EquipTool("Library Key")
					FireRemote("OpenLibrary")
				end
                    if VerifyTool("Hidden Key") then
                        EquipTool("Hidden Key")
                        FireRemote("OpenRengoku")
                    elseif Enemies:FindFirstChild("Snow Lurker") or Enemies:FindFirstChild("Arctic Warrior") or Enemies:FindFirstChild("Awakened Ice Admiral") then
                        for i,v in pairs(Enemies:GetChildren()) do
                            if (v.Name == "Snow Lurker" or v.Name == "Arctic Warrior" or v.Name == "Awakened Ice Admiral") and v.Humanoid.Health > 0 then
                                repeat task.wait()
                                bringmobs = true
                                    EquipTool(SelectWeapon)
                                    Tween(v.HumanoidRootPart.Position + Type)
                                    MobPos = v.HumanoidRootPart.Position
                                    MobName = v.Name
                                until VerifyTool("Hidden Key") or VerifyTool("Library Key") or _G.UnlockRengoku == false or not v.Parent or v.Humanoid.Health <= 0
                                bringmobs = false
                            end
                        end
                    else
                        Tween(Vector3.new(5439, 84, -6715))
                    end
                end
            end
        end)
    end)
    
    task.spawn(function()
	    while task.wait() do
			if _G.UnlockTTK then
				pcall(function()
				
				end) 
			end
		end
    end)
    
    spawn(function()
		while wait() do
			if _G.UnlockTushita then
				local progress = FireRemote("TushitaProgress")
				if progress and progress.OpenedDoor then
					local enemies = game:GetService("Workspace").Enemies
					if enemies:FindFirstChild("Longma") then
						for _, enemy in pairs(enemies:GetChildren()) do
							if enemy.Name == "Longma" and enemy:IsA("Model") and
							   enemy:FindFirstChild("Humanoid") and enemy:FindFirstChild("HumanoidRootPart") and
							   enemy.Humanoid.Health > 0 then
								repeat
									wait()
									EquipTool(SelectWeapon)
									Tween(enemy.HumanoidRootPart.Position + Type)
								until not _G.UnlockTushita or not enemy.Parent or enemy.Humanoid.Health <= 0
								StartMagnet = false
							end
						end
					else
						Tween(Vector3.new(-10238, 389, -9549))
					end
				elseif VerifyTool("Holy Torch") then
					EquipTool("Holy Torch")
					wait(0.2)
					for i = 1, 5 do
						if not _G.UnlockTushita then break end
						FireRemote("TushitaProgress", "Torch", i)
						wait(0.2)
					end
				end
			end
		end
	end)
	
	SkinsColors = {
		"Orange Soda",
		"Bright Yellow",
		"Slimy Green",
		"Green Lizard",
		"Blue Jeans",
		"Plump Purple",
		"Fiery Rose",
		"Heat Wave",
		"Absolute Zero",
		"Snow White",
		"Pure Red",
		"Winter Sky",
		"Dragon"
	}
	
	CraftData = {
		["Orange Soda"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Orange Berry"] = 1
			}
		},
		["Bright Yellow"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Yellow Star Berry"] = 1
			}
		},
		["Slimy Green"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Green Toad Berry"] = 1
			}
		},
		["Green Lizard"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Green Toad Berry"] = 1,
				["White Cloud Berry"] = 1
			}
		},
		["Blue Jeans"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Blue Icicle Berry"] = 3
			}
		},
		["Plump Purple"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Purple Jelly Berry"] = 3
			}
		},
		["Fiery Rose"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Pink Pig Berry"] = 2,
				["Red Cherry Berry"] = 2
			}
		},
		["Heat Wave"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Orange Berry"] = 2,
				["Red Cherry Berry"] = 2
			}
		},
		["Absolute Zero"] = {
			["Fragments"] = 1500,
			["Berries"] = {
				["Blue Icicle Berry"] = 5
			}
		},
		["Snow White"] = {
			["Fragments"] = 7500,
			["Berries"] = {
				["White Cloud Berry"] = 10
			}
		},
		["Pure Red"] = {
			["Fragments"] = 7500,
			["Berries"] = {
				["Red Cherry Berry"] = 15
			}
		},
		["Winter Sky"] = {
			["Fragments"] = 7500,
			["Berries"] = {
				["Pink Pig Berry"] = 15
			}
		},
		["Dragon"] = {
			["Fragments"] = 0,
			["Berries"] = {
				["Red Cherry Berry"] = 6,
				["Pink Pig Berry"] = 8,
				["Orange Berry"] = 3
			}
		}
	}
	
	task.spawn(function()
	    while task.wait() do
	        if _G.CraftSkinColor then
	            if _G.SelectSkinColor ~= nil then
	                local craftInfo = _G.CraftSkinColor[_G.SelectSkinColor]
	                if craftInfo then
	                    local hasFragments = LocalPlayer.Data.Fragments.Value >= craftInfo.Fragments
	                    local hasBerries = true
	                    for berryName, qtyNeeded in pairs(craftInfo.Berries) do
	                        if CheckMaterial(berryName) < qtyNeeded then
	                            hasBerries = false
	                            break
	                        end
	                    end
	                    if hasFragments and hasBerries then
	                        local args = {
	                            {
	                                StorageName = _G.SelectSkinColor,
	                                Type = "AuraSkin",
	                                Context = "Craft"
	                            }
	                        }
	                        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RF/JuiceNetworkRF"):InvokeServer(unpack(args))
	                    end
	                end
	            end
	        end
	    end
	end)
	
task.spawn(function()
	while _G.UnlockTTK do task.wait()
		FireRemote("LegendarySwordDealer", "1")
		FireRemote("LegendarySwordDealer", "2")
		FireRemote("LegendarySwordDealer", "3")
		FireRemote("MysteriousMan", "1")
		FireRemote("MysteriousMan", "2")
	end
end)
	
	
	spawn(function()
		while wait() do
			if _G.UnlockYama then
				if FireRemote("EliteHunter", "Progress") >= 30 then
					repeat
						wait()
						fireclickdetector(game:GetService("Workspace").Map.Waterfall.SealedKatana.Handle.ClickDetector)
					until CheckSword("Yama") or not _G.UnlockYama
				end
			end
		end
	end)
	
	spawn(function()
			while wait() do
				pcall(function()
					if _G.UnlockCDK then
					local Enemies = game:GetService("Workspace").Enemies
					local Map = game:GetService("Workspace").Map
					repeat
					task.wait()
					Auto_Quest_Yama_1 = CheckMaterial("Alucard Fragment") == 0
					Auto_Quest_Yama_2 = CheckMaterial("Alucard Fragment") == 1
					Auto_Quest_Yama_3 = CheckMaterial("Alucard Fragment") == 2
					Auto_Quest_Tushita_1 = CheckMaterial("Alucard Fragment") == 3
					Auto_Quest_Tushita_2 = CheckMaterial("Alucard Fragment") == 4
					Auto_Quest_Tushita_3 = CheckMaterial("Alucard Fragment") == 5
					until not _G.UnlockCDK or CheckSword("Cursed Dual Katana")
						if CheckMaterial("Alucard Fragment") == 6 then
							if Enemies:FindFirstChild("Cursed Skeleton Boss") or game.ReplicatedStorage:FindFirstChild("Cursed Skeleton Boss") then
							local Boss = Enemies:FindFirstChild("Cursed Skeleton Boss") or game.ReplicatedStorage:FindFirstChild("Cursed Skeleton Boss")
								if Enemies:FindFirstChild("Cursed Skeleton Boss") or Enemies:FindFirstChild("Cursed Skeleton [Lv. 2200]") then
									if Boss then
										if Boss.Humanoid.Health > 0 then
											Tween(Boss.HumanoidRootPart.Position + Vector3.new(0, 0, -4))
										end
									end
								end
							else
								if (Vector3.new(-12361, 603, -6550) - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 100 then
									FireRemote("CDKQuest","Progress","Good")
									wait(1)
									FireRemote("CDKQuest","Progress","Evil")
									wait(1)
									Tween(Vector3.new(-12361, 603, -6550))
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)
									Tween(Vector3.new(-12253, 598, -6546))
								else
									Tween(Vector3.new(-12361, 603, -6550))
								end   
							end
						end
					end
				end)
			end
		end)
	
		spawn(function()
			while wait() do
				if Auto_Quest_Yama_1 then
					pcall(function()
					FireRemote("CDKQuest","Progress","Evil")
					FireRemote("CDKQuest","StartTrial","Evil")
					task.wait(0.1)
						if Enemies:FindFirstChild("Mythological Pirate") then
							for i,v in pairs(Enemies:GetChildren()) do
								if v.Name == "Mythological Pirate" then
									repeat wait()
										_G.StopAttack = true
										Tween(v.HumanoidRootPart.Position + Vector3.new(0, 0, -4))
									until _G.UnlockCDK  == false or Auto_Quest_Yama_1 == false
									_G.StopAttack = false
									FireRemote("CDKQuest","StartTrial","Evil")
								end
							end
						else
							Tween(Vector3.new(-13451, 543, -6961))
						end
					end)
				end
			end
		end)
	
		spawn(function()
			while wait() do
				if Auto_Quest_Yama_2 then 
				FireRemote("CDKQuest","Progress","Evil")
				FireRemote("CDKQuest","StartTrial","Evil")
					pcall(function() 
						for i,v in pairs(Enemies:GetChildren()) do
							if v:FindFirstChild("HazeESP") then
								repeat wait()
										EquipTool(SelectWeapon)
										Tween(v.HumanoidRootPart.Position + Type)
								until _G.UnlockCDK == false or Auto_Quest_Yama_2 == false or not v.Parent or v.Humanoid.Health <= 0 or not v:FindFirstChild("HazeESP")
							else
								for x,y in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do
									if y:FindFirstChild("HazeESP") then
										EquipTool(SelectWeapon)
										Tween(y.HumanoidRootPart.Position + Type)
									end
								end
							end
						end
					end)
				end
			end
		end)
	
		spawn(function()
			while wait() do
				if Auto_Quest_Yama_3 then
					pcall(function()
					FireRemote("CDKQuest","Progress","Evil")
					FireRemote("CDKQuest","StartTrial","Evil")
						if VeriftTool("Hallow Essence") and not Map:FindFirstChild("HellDimension") then         
							_G.FarmBones = false           
							Tween(Map["Haunted Castle"].Summoner.Detection.Position)
						elseif Map:FindFirstChild("HellDimension") then
							repeat wait()
								if Enemies:FindFirstChild("Cursed Skeleton") or Enemies:FindFirstChild("Cursed Skeleton") or Enemies:FindFirstChild("Hell's Messenger") then
									for i,v in pairs(Enemies:GetChildren()) do
										if v.Name == "Cursed Skeleton" or v.Name == "Cursed Skeleton" or v.Name == "Hell's Messenger" then
											if v.Humanoid.Health > 0 then
												repeat wait()
													EquipTool(SelectWeapon)
													Tween(v.HumanoidRootPart.Position + Type)
												until v.Humanoid.Health <= 0 or not v.Parent or Auto_Quest_Yama_3 == false or _G.UnlockCDK == false
											end
										end
									end
								else
									wait(5)
									Tween(Map.HellDimension.Torch1.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)        
									Tween(Map.HellDimension.Torch2.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)     
									Tween(Map.HellDimension.Torch3.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)     
									Tween(Map.HellDimension.Exit.Position)
								end
							until _G.UnlockCDK == false or Auto_Quest_Yama_3 == false or CheckMaterial("Alucard Fragment") == 3
						else
							if Enemies:FindFirstChild("Soul Reaper") or game.ReplicatedStorage:FindFirstChild("Soul Reaper") then
								if Enemies:FindFirstChild("Soul Reaper") then
									for i,v in pairs(Enemies:GetChildren()) do
										if v.Name == "Soul Reaper" then
											if v.Humanoid.Health > 0 then
												repeat wait()
													_G.StopAttack = true
													Tween(v.HumanoidRootPart.Position + Vector3.new(0, 0, -4))
												until _G.UnlockCDK == false or Auto_Quest_Yama_3 == false or Map:FindFirstChild("HellDimension")
												_G.StopAttack = false
											end
										end
									end
								else
									Tween(Vector3.new(-9570, 315, 6726))
								end
							else
								_G.FarmBones = true
								FireRemote("Bones", "Buy", 1, 1)
							end
						end
					end)
				end
			end
		end)
	
		spawn(function() 
			while wait() do
				if Auto_Quest_Tushita_1 then
					FireRemote("CDKQuest","Progress","Good")
					FireRemote("CDKQuest","StartTrial","Good")
					FireRemote("CDKQuest","BoatQuest", workspace.NPCs:FindFirstChild("Luxury Boat Dealer"))
				end
			end
		end)
		
		spawn(function()
			while wait() do
				if Auto_Quest_Tushita_1 then
					local p = game.Players.LocalPlayer
					local destinos = {
						Vector3.new(-9546, 21, 4686),
						Vector3.new(-6120, 16, -2250),
						Vector3.new(-9533, 7, -8372)
					}
					for _, pos in ipairs(destinos) do
						repeat wait() until p:DistanceFromCharacter(pos) < 5 or not _G.UnlockCDK
						Tween(pos)
						wait(5)
					end
				end
			end
		end)
	
		spawn(function()
			while wait() do
				if Auto_Quest_Tushita_2 then
				FireRemote("CDKQuest","Progress","Good")
				FireRemote("CDKQuest","StartTrial","Good")
					pcall(function()
						if (Vector3.new(-5539, 313, -2972) - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 500 then
							for i,v in pairs(Enemies:GetChildren()) do
								if Auto_Quest_Tushita_2 and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
									if (v.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 2000 and v.Name == "rip_indra True Form" and v.Name:lower():find("friend") then
										repeat wait()
											EquipTool(SelectWeapon)
											Tween(v.HumanoidRootPart.Position + Type)
										until v.Humanoid.Health <= 0 or not v.Parent or Auto_Quest_Tushita_2 == false or _G.UnlockCDK == falde
									end
								end
							end
						else
							Tween(Vector3.new(-5545, 313, -2976))
						end
					end)
				end
			end
		end)
	
		spawn(function()
			while wait() do
				if Auto_Quest_Tushita_3 then
				FireRemote("CDKQuest","Progress","Good")
				FireRemote("CDKQuest","StartTrial","Good")
					pcall(function()
						if Enemies:FindFirstChild("Cake Queen") or game.ReplicatedStorage:FindFirstChild("Cake Queen") then
							if Enemies:FindFirstChild("Cake Queen") then
								for i,v in pairs(Enemies:GetChildren()) do
									if v.Name == "Cake Queen" then
										if v.Humanoid.Health > 0 then
											repeat wait()
												EquipTool(SelectWeapon)
												Tween(v.HumanoidRootPart.Position + Type)
											until _G.UnlockCDK == false or Auto_Quest_Tushita_3 == false or Map:FindFirstChild("HeavenlyDimension")
										end
									end
								end
							else
								Tween(Vector3.new(-709, 381, -11011))
							end
						elseif Map:FindFirstChild("HeavenlyDimension") then
							repeat wait()
								if Enemies:FindFirstChild("Cursed Skeleton") or Enemies:FindFirstChild("Cursed Skeleton") or Enemies:FindFirstChild("Heaven's Guardian") then
									for i,v in pairs(Enemies:GetChildren()) do
										if v.Name == "Cursed Skeleton" or v.Name == "Cursed Skeleton" or v.Name == "Heaven's Guardian" then
											if v.Humanoid.Health > 0 then
												repeat wait()
													EquipTool(SelectWeapon)
													Tween(v.HumanoidRootPart.Position + Type)
												until v.Humanoid.Health <= 0 or not v.Parent or Auto_Quest_Tushita_3 == false or not _G.UnlockCDK
											end
										end
									end
								else
									wait(5)
									Tween(Map.HeavenlyDimension.Torch1.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)        
									Tween(Map.HeavenlyDimension.Torch2.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)     
									Tween(Map.HeavenlyDimension.Torch3.Position)
									wait(1.5)
									SendKey("E", 1.5)
									wait(1.5)     
									Tween(Map.HeavenlyDimension.Exit.Position)
								end
							until _G.UnlockCDK == false or Auto_Quest_Tushita_3 == false or CheckMaterial("Alucard Fragment") == 6
						end
					end)
				end
			end
	 end)
	
	


task.spawn(function()
	pcall(function()
		while task.wait() do
			if _G.FarmDodge then
				if workspace.Enemies:FindFirstChild("Forest Pirate") then
					if LocalPlayer:GetAttribute("KenActive") == true then
						repeat
							task.task.wait()
							Tween(workspace.Enemies["Forest Pirate"].HumanoidRootPart.Position)
						until _G.FarmDodge == false or LocalPlayer:GetAttribute("KenActive") == false
					else
						if LocalPlayer:GetAttribute("KenActive") == false and _G.HopToFarm then
							Hop()
						end
					end
				else
					Tween(Vector3.new(-13370, 332, -7625))
				end
			end
		end
	end)
end)

task.spawn(function()
	pcall(function()
		while task.wait() do
			if _G.AutoMusketeerHat then
				if LocalPlayer.Data.Level.Value >= 1800 and FireRemote("CitizenQuestProgress").KilledBandits == false then
					if string.find(LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Forest Pirate") and string.find(LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "50") and LocalPlayer.PlayerGui.Main.Quest.Visible == true then
						if workspace.Enemies:FindFirstChild("Forest Pirate") then
							for i, v in pairs(workspace.Enemies:GetChildren()) do
								if v.Name == "Forest Pirate" then
									repeat
										task.task.wait()
										pcall(function()
											bringmobs = true
											EquipTool(SelectWeapon)
											Tween(v.HumanoidRootPart.Position + Type)
											MobPos = v.HumanoidRootPart.Position
											MobName = v.Name
										end)
									until _G.AutoMusketeerHat == false or (not v.Parent) or v.Humanoid.Health <= 0 or LocalPlayer.PlayerGui.Main.Quest.Visible == false
									bringmobs = false
								end
							end
						else
							Tween(Vector3.new(-13370, 332, -7625))
						end
					else
						FireRemote("StartQuest", "CitizenQuest", 1)
					end
				elseif LocalPlayer.Data.Level.Value >= 1800 and FireRemote("CitizenQuestProgress").KilledBoss == false then
					if LocalPlayer.PlayerGui.Main.Quest.Visible and string.find(LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Captain Elephant") and LocalPlayer.PlayerGui.Main.Quest.Visible == true then
						if workspace.Enemies:FindFirstChild("Captain Elephant") then
							for i, v in pairs(workspace.Enemies:GetChildren()) do
								if v.Name == "Captain Elephant" then
									repeat
										task.task.wait()
										pcall(function()
											EquipTool(SelectWeapon)
											Tween(v.HumanoidRootPart.Position + Type)
										end)
									until _G.AutoMusketeerHat == false or v.Humanoid.Health <= 0 or (not v.Parent) or LocalPlayer.PlayerGui.Main.Quest.Visible == false
								end
							end
						else
							Tween(Vector3.new(-13375, 421, -8225))
						end
					else
							FireRemote("CitizenQuestProgress", "Citizen")
					end
				elseif LocalPlayer.Data.Level.Value >= 1800 and FireRemote("CitizenQuestProgress", "Citizen") == 2 then
					Tween(Vector3.new(-12512, 340, -9872))
				end
			end
		end
	end)
end)

	task.spawn(function()
		while task.wait() do
			pcall(function()
				if _G.CompleteCitizenQuest then
					if FireRemote("CitizenQuestProgress", "Citizen") == 3 then
						_G.AutoMusketeerHat = false
						if VerifyTool("Banana") and VerifyTool("Apple") and VerifyTool("Pineapple") then
							FireRemote("CitizenQuestProgress", "Citizen")
						elseif VerifyTool("Fruit Bowl") then
							FireRemote("KenTalk2", "Start")
							FireRemote("KenTalk2", "Buy")
						else
							for i, v in pairs(workspace.AppleSpawner:GetDescendants()) do
								if v.Name == "Apple" then
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 0)
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 1)
								end
							end
							for i, v in pairs(workspace.PineappleSpawner:GetDescendants()) do
								if v.Name == "Pineapple" then
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 0)
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 1)
								end
							end
							for i, v in pairs(workspace.BananaSpawner:GetDescendants()) do
								if v.Name == "Banana" then
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 0)
									firetouchinterest(LocalPlayer.Character.HumanoidRootPart, v.Handle, 1)
								end
							end
						end
					else
						_G.AutoMusketeerHat = true
					end
				end
			end)
		end
	end)
	-------------------------------[[ SeaEvent ]]-------------------------------
	local isBuyingBoat = false
	
	local BoatBuy
	if Sea2 then
		BoatBuy = Vector3.new(-15, 10, 2902)
	elseif Sea3 then
		BoatBuy = Vector3.new(-6123, 16, -2247)
	end
	
	local TargetPos = nil
	_G.BoatTween = false
	
	function NewBoat()
		if isBuyingBoat then return end
		isBuyingBoat = true
	
		local dist = (LocalPlayer.Character.Head.Position - BoatBuy).Magnitude
		if dist > 5 then
			Tween(BoatBuy)
			repeat task.wait() dist = (LocalPlayer.Character.Head.Position - BoatBuy).Magnitude until dist <= 5
		end
	
		FireRemote("BuyBoat", "Guardian")
	
		for _ = 1, 30 do
			task.wait(0.1)
			if GetBoat() then
				break
			end
		end
	
		isBuyingBoat = false
	end
	
	function GetBoat()
		for _, boat in pairs(workspace.Boats:GetChildren()) do
			if boat.Name == "Guardian" and tostring(boat.Owner.Value) == LocalPlayer.Name then
				local seat = boat:FindFirstChild("VehicleSeat")
				if seat and (not seat.Occupant or tostring(seat.Occupant) == LocalPlayer.Name) then
					return seat
				end
			end
		end
		return nil
	end
	
	function BoatTween(pos)
		if TargetPos ~= pos then _G.BoatTween = false end
		TargetPos = pos
		_G.BoatTween = true
	
		local Seat = GetBoat()
		if not Seat then
			NewBoat()
			return
		end
	
		if not Seat.Occupant then
			Tween(Seat.Position)
			return
		end
	
		while _G.BoatTween do
			if not Seat or not Seat.Parent then break end
	
			if not Seat.Occupant or Seat.Occupant ~= LocalPlayer.Character then
				_G.BoatTween = false
				break
			end
	
			local dir = (TargetPos - Seat.Position)
			local dist = dir.Magnitude
	
			if dist < 5 then
				_G.BoatTween = false
				break
			end
	
			local step = dir.Unit * (_G.BoatSpeed or 350) * task.wait()
			Seat.CFrame = Seat.CFrame + step
		end
	end
	
	local BoatLevelSecondSea = {Vector3.new(648, 20, 3595), Vector3.new(-792, 20, 3943)}
	SeaLeveis = {
		["1"] = Vector3.new(-2200, 20, -1000),
		["2"] = -Vector3.new(-28000, 20, -1000),
		["3"] = Vector3.new(-30000, 20, -1000),
		["4"] = Vector3.new(-34000, 20, -1000),
		["5"] = Vector3.new(-38000, 20, -1000),
		["6"] = Vector3.new(-42700, 20, -1000),
		["Inf"] = Vector3.new(-100000000, 20, -1000),
	}
	HasEvent = false
	task.spawn(function()
		while task.wait() do
			if _G.DriveBoat then
				if HasEvent == false then
					Pos = nil
					repeat
					Pos = BoatLevelSecondSea[math.random(1, #BoatLevelSecondSea)]
					_G.BoatTween = true
					BoatTween(Pos)
					task.wait()
					until not _G.DriveBoat or (Pos - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude < 10
				else
					_G.BoatTween = false
				end
			end
		end
	end)
	
	function DodgeSeabeasts()
	if not _G.EvadeSeaBeast then return false end
		local seaBeastsFolder = (game:GetService("Workspace")).SeaBeasts;
		for _, seaBeast in pairs(seaBeastsFolder:GetChildren()) do
			if seaBeast:FindFirstChild("Humanoid") and seaBeast:FindFirstChild("Anims") then
				local humanoid = seaBeast.Humanoid;
				local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid;
				for _, anim in pairs(seaBeast.Anims:GetChildren()) do
					if anim:IsA("Animation") then
						if anim.AnimationId == "rbxassetid://8708221792" or anim.AnimationId == "rbxassetid://8708222556" or anim.AnimationId == "rbxassetid://8708223619" or anim.AnimationId == "rbxassetid://8708225668" then
							for _, animationTrack in pairs(animator:GetPlayingAnimationTracks()) do
								if animationTrack.Animation.AnimationId == anim.AnimationId then
									if animationTrack.IsPlaying then
										return true
									else
										return false
									end
								end
							end;
						end
					end
				end
			end
		end
	end
	
	-------------------------------[[ Islands ]]-------------------------------
	if workspace:FindFirstChild("Rocks") then
		workspace.Rocks:Destroy()
	end
	
	function DestroyLava()
		local Map = workspace:FindFirstChild("Map")
		if not Map then return end
		local Prehistoric = Map:FindFirstChild("PrehistoricIsland")
		if not Prehistoric then return end
		local Core = Prehistoric:FindFirstChild("Core")
		if not Core then return end
		if Core:FindFirstChild("InteriorLava") then
			Core.InteriorLava:Destroy()
			for _, v in pairs(Prehistoric:GetChildren()) do
				if v.Name:lower():find("lava") then
					v:Destroy()
				end
			end
		end
	end
	
	SafeSpawn(function()
		while task.wait() do
			if _G.CollectDragonEggs then
				local map = workspace:FindFirstChild("Map")
				local island = map and map:FindFirstChild("PrehistoricIsland")
				local core = island and island:FindFirstChild("Core")
				local eggsFolder = core and core:FindFirstChild("SpawnedDragonEggs")
				local head = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Head")
				if core then
					DestroyLava()
				end
				if map and island and core and eggsFolder and head and #eggsFolder:GetChildren() > 0 then
					for _, egg in ipairs(eggsFolder:GetChildren()) do
						local prompt
						for _, desc in ipairs(egg:GetDescendants()) do
							if desc:IsA("ProximityPrompt") then
								prompt = desc
								break
							end
						end
						if prompt and egg.PrimaryPart then
							Tween(egg.PrimaryPart.Position)
							repeat task.wait() until (egg.PrimaryPart.Position - head.Position).Magnitude < 10
							task.wait(0.3)
							fireproximityprompt(prompt)
						end
					end
				end
			end
		end
	end)
	
	SafeSpawn(function()
		while task.wait() do
			if _G.CollectBones then
				local head = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Head")
				if not head then task.wait(0.1) continue end
	
				for _, v in pairs(workspace:GetChildren()) do
					if v.Name == "DinoBone" and v:IsA("MeshPart") then
						DestroyLava()
						Tween(v.Position)
						task.wait()
					end
				end
			end
		end
	end)
	
	SafeSpawn(function()
		while task.wait() do
			if _G.TeleportToPrehistoricIsland then
				local map = workspace:FindFirstChild("Map")
				local island = map and map:FindFirstChild("PrehistoricIsland")
				local core = island and island:FindFirstChild("Core")
				local skull = core and core: FindFirstChild("PrehistoricRelic") and core.PrehistoricRelic:FindFirstChild("Skull")
				local head = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Head")
	
				if map and island and core and skull and head then
					DestroyLava()
					Tween(skull.Position)
					local dist = (skull.Position - head.Position).Magnitude
					if dist < 3 then
						TeleportToPrehistoric:Set(false)
					end
				end
			end
		end
	end)
	
	function ClosestRock()
	    local Map = game.Workspace:FindFirstChild("Map")
	    if not Map then return nil end
	    
	    local Island = Map:FindFirstChild("PrehistoricIsland")
	    if not Island then return nil end
	    
	    local Core = Island:FindFirstChild("Core")
	    if not Core then return nil end
	    
	    local VolcanoRocks = Core:FindFirstChild("VolcanoRocks")
	    if not VolcanoRocks then return nil end
	    
	    for _, rock in pairs(VolcanoRocks:GetChildren()) do
	        if rock:IsA("Model") then
	            local volcanorock = rock:FindFirstChild("volcanorock")
	            if volcanorock and volcanorock:IsA("MeshPart") then
	                local color = volcanorock.Color
	                if color == Color3.fromRGB(185, 53, 56) or color == Color3.fromRGB(185, 53, 57) then
	                    return volcanorock
	                end
	            end
	        end
	    end
	    
	    return nil
	end
	
	local ToolsList = {Melee = true, Sword = true, Gun = true, ["Blox Fruit"] = true}
	local SkillsList = {"Z", "X", "C", "V", "F"}
	
	SafeSpawn(function()
	    while task.wait() do
	        if _G.AutoPatchVolcano then
				DestroyLava()
	            local rock = ClosestRock()
	            if rock then
	                Tween(rock.Position)
	                task.wait(1)
	                
	                for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
	                    if tool:IsA("Tool") and ToolsList[tool.Name] then
	                        EquipTool(tool.Name)
	                        task.wait(2.5)
	                        
	                        for _, key in ipairs(SkillsList) do
	                            if not rock or not rock.Parent then break end
	                            
	                            local volcanorock = rock.Parent:FindFirstChild("volcanorock")
	                            if not volcanorock then break end
	                            
	                            local color = volcanorock.Color
	                            if color ~= Color3.fromRGB(185, 53, 56) and color ~= Color3.fromRGB(185, 53, 57) then
	                                break
	                            end
	                            
	                            SendKey(key, 0.2)
	                            task.wait(0.3)
	                        end
	                    end
	                end
	            end
	        end
	    end
	end)
	
	
	-------------------------------[[ Fruits ]]-------------------------------
	
	function Store(where)
	    if not where then return end
	    for _, fruit in pairs(where:GetChildren()) do
	        if fruit:IsA("Tool") and fruit.Name:find("Fruit") then
	            FireRemote("StoreFruit", fruit:GetAttribute("OriginalName"), fruit)
	        end
	    end
	end
	
	task.spawn(function()
        while true do
            if _G.RandomFruits then
                FireRemote("Cousin", "Buy")
            end
			task.wait()
        end
	end)
	
	task.spawn(function()
        while true do
			if _G.StoreFruits then
	            local backpack = LocalPlayer:FindFirstChild("Backpack")
	            local character = LocalPlayer.Character
	            if backpack then Store(backpack) end
	            if character then Store(character) end
	        end
			task.wait()
        end
	end)
	
	task.spawn(function()
        while true do
            if _G.CollectFruits then
	            for i, v in pairs(workspace:GetChildren()) do
					if string.find(v.Name, "Fruit") then
						if v:FindFirstChild("Handle") and v:FindFirstChild("FruitAnimator") then
							Tween(v.Handle.Position)
						end
					end
	            end
            end
			task.wait()
        end
	end)
	
	task.spawn(function()
		while true do
			if _G.BringFruits then
				local plr = game.Players.LocalPlayer
				local hrp = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
				if hrp then
					for _, v in ipairs(workspace:GetChildren()) do
						local handle = v:FindFirstChild("Handle")
						if handle and v:FindFirstChild("FruitAnimator") and v.Name:find("Fruit") and v:IsA("Tool") then
							handle.Anchored = false
							handle.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 0, 0))
							firetouchinterest(handle, hrp, 0)
							firetouchinterest(handle, hrp, 1)
						end
					end
				end
			end
			task.wait()
		end
	end)
	
	local RaidList = {
	    "Flame",
	    "Ice",
	    "Sand",
	    "Dark",
	    "Light",
	    "Magma",
	    "Quake",
	    "Buddha",
	    "Spider",
	    "Rumble",
	    "Phoenix",
	    "Dough"
	}
	
	
	spawn(function()
	    while wait() do
	        if _G.BuyChips then
				FireRemote("RaidsNpc", "Select", _G.SelectChips)
	        end
	    end
	end)
	
	spawn(function()
		local visitedIslands = {}
		while task.wait() do
			if _G.AutoRaid then
				pcall(function()
					local player = game.Players.LocalPlayer
					local char = player.Character
					local hrp = char and char:FindFirstChild("HumanoidRootPart")
					local locations = workspace['_WorldOrigin'].Locations
					if player:GetAttribute("IslandRaiding") == false then
						visitedIslands = {}
						return
					end
					if not RaidTimer then
						local chip = VerifyTool("Special Microchip")
						local island1 = locations:FindFirstChild("Island 1")
						if not island1 and chip then
							if Sea2 then
								fireclickdetector(game.Workspace.Map.CircleIsland.RaidSummon2.Button.Main.ClickDetector)
							elseif Sea3 then
								fireclickdetector(game.Workspace.Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
							end
						end
					end
					if hrp and locations then
						for i = 2, 5 do
							local islandName = "Island " .. i
							local island = locations:FindFirstChild(islandName)
							if island and not visitedIslands[islandName] then
								if (hrp.Position - island.Position).Magnitude <= 1000 then
									Tween(island.Position)
									repeat task.wait() until (hrp.Position - island.Position).Magnitude < 5
									visitedIslands[islandName] = true
									for _, enemy in pairs(workspace.Enemies:GetChildren()) do
										local humanoid = enemy:FindFirstChildOfClass("Humanoid")
										local enemyHRP = enemy:FindFirstChild("HumanoidRootPart")
										if humanoid and enemyHRP and humanoid.Health > 0 then
											if (enemyHRP.Position - island.Position).Magnitude <= 1500 then
												repeat
													pcall(function()
														EquipTool(SelectWeapon)
														Tween(enemyHRP.Position + Type)
													end)
													task.wait()
												until not _G.AutoRaid or not enemyHRP or not humanoid or humanoid.Health <= 0
												break
											end
										end
									end
									break
								end
							end
						end
					end
					if _G.AutoRaid then
						pcall(function()
							FireRemote("Awakener", "Awaken")
						end)
					end
				end)
			end
		end
	end)
	
	local FruitsToRaid = {
		"Rocket-Rocket",
		"Spin-Spin",
		"Blade-Blade",
		"Spring-Spring",
		"Bomb-Bomb",
		"Smoke-Smoke",
		"Spike-Spike",
		"Flame-Flame",
		"Ice-Ice",
		"Sand-Sand",
		"Dark-Dark",
		"Eagle-Eagle",
		"Light-Light",
		"Rubber-Rubber",
		"Diamond-Diamond",
		"Ghost-Ghost",
		"Magma-Magma",
		"Quake-Quake",
	}
	
	local function Load(name)
		return FireRemote("LoadFruit", name)
	end
	
	task.spawn(function()
		while task.wait() do
			if _G.LoadFruits then
				for _, fullName in ipairs(FruitsToRaid) do
					local fruitName = fullName:split("-")[1]
					if CheckFruit(fruitName) and not VerifyTool(fruitName .. " Fruit") then
						Load(fullName)
						break
					end
				end
			end
		end
	end)
	
	-------------------------------[[ Teleport ]]-------------------------------
	
	if Sea1 then
	    IslandList = {
	        "Pirate Starter",
	        "Marine Starter",
	        "Middle Town",
	        "Jungle",
	        "Pirate Village",
	        "Desert",
	        "Frozen Village",
	        "Marine Fortress",
	        "Colosseum",
	        "Skylands",
	        "Prison",
	        "Magma Village",
	        "Fountain City",
	    }
	elseif Sea2 then
	    IslandList = {
	        "Café",
	        "Kingdom Of Rose",
	        "Dark Arena",
	        "Green Zone",
	        "Graveyard Island",
	        "Snow Mountain",
	        "Hot And Cold",
	        "Ice Castle",
	        "Forgotten Island",
	        "Ussop Island",
	    }
	elseif Sea3 then
	    IslandList = {
	        "Port Town",
	        "Great Tree",
	        "Floating Turtle",
	        "Haunted Castle",
	        "Ice Cream Island",
	        "Peanut Island",
	        "Cake Island",
	        "Cocoa Island",
	        "North Pole",
	        "Tiki Outpost"
	    }
	end
	local IslandsPositions = {
	    ["Pirate Starter"] = Vector3.new(888, 16, 1433),
	    ["Marine Starter"] = Vector3.new(-2729, 24, 2055),
	    ["Middle Town"] = Vector3.new(-688, 14, 1585),
	    ["Jungle"] = Vector3.new(-1614, 36, 145),
	    ["Pirate Village"] = Vector3.new(-1173, 44, 3836),
	    ["Desert"] = Vector3.new(1054, 52, 4489),
	    ["Frozen Village"] = Vector3.new(1298, 87, -1345),
	    ["Marine Fortress"] = Vector3.new(-4810, 20, 4358),
	    ["Colosseum"] = Vector3.new(-1535, 7, -3015),
	    ["Skylands"] = Vector3.new(-4814, 717, -2552),
	    ["Prison"] = Vector3.new(4870, 5, 736),
	    ["Magma Village"] = Vector3.new(-5291, 8, 8349),
	    ["Fountain City"] = Vector3.new(5040, 1, 4100),
	    ["Café"] = Vector3.new(-382, 73, 290),
	    ["Kingdom Of Rose"] = Vector3.new(-11, 29, 2771),
	    ["Dark Arena"] = Vector3.new(3493, 13, -3260),
	    ["Green Zone"] = Vector3.new(-2259, 73, -2696),
	    ["Graveyard Island"] = Vector3.new(-5552, 194, -777),
	    ["Snow Mountain"] = Vector3.new(752, 408, -5278),
	    ["Hot And Cold"] = Vector3.new(-5898, 18, -5096),
	    ["Ice Castle"] = Vector3.new(5504, 39, -6178),
	    ["Forgotten Island"] = Vector3.new(-3050, 239, -10179),
	    ["Ussop Island"] = Vector3.new(4816, 8, 2862),
	    ["Port Town"] = Vector3.new(-345, 20, 5542),
	    ["Great Tree"] = Vector3.new(2683, 275, -7009),
	    ["Floating Turtle"] = Vector3.new(-12528, 331, -8659),
	    ["Haunted Castle"] = Vector3.new(-9518, 142, 5527),
	    ["Ice Cream Island"] = Vector3.new(-903, 65, -10988),
	    ["Peanut Island"] = Vector3.new(-2062, 38, -10232),
	    ["Cake Island"] = Vector3.new(-1897, 13, -11576),
	    ["Cocoa Island"] = Vector3.new(213, 126, -12607),
	    ["North Pole"] = Vector3.new(-1047, 24, -14175),
	    ["Tiki Outpost"] = Vector3.new(-16225, 9, 439)
	}
	
	local PortalPositions = {}
	
		if Sea1 then
			PortalPositions = {
				["Skylands 2"] = Vector3.new(-4652, 872, -1754),
				["Skylands 3"] = Vector3.new(-7895, 5547, -380),
				["Underwater City"] = Vector3.new(61164, 5, 1820),
				["Whirlpool"] = Vector3.new(3865, 5, -1926)
			}
		elseif Sea2 then
			PortalPositions = {
				["Cursed Ship"] = Vector3.new(923, 125, 32853),
				["Cursed Ship Entrance"] = Vector3.new(-6509, 83, -133)
			}
		elseif Sea3 then
			PortalPositions = {	
			}
		end
	
		local unlocks = FireRemote("GetUnlockables")
		if Sea2 and unlocks.FlamingoAccess then
			PortalPositions["Mansion"] = Vector3.new(-289, 306, 600)
			PortalPositions["Swan's Room"] = Vector3.new(2284, 15, 905)
		elseif Sea3 and unlocks.DefeatedIndraTrueForm then
			PortalPositions["Mansion"] = Vector3.new(-12471, 374, -7551)
			PortalPositions["Hydra Island"] = Vector3.new(5661, 1013, -335)
			PortalPositions["Castle On The Sea"] = Vector3.new(-5074, 314, -3153)
		end
		
		local PortalList = {}
	
		if Sea1 then
			PortalList = {
				"Skylands 2",
				"Skylands 3",
				"Underwater City",
				"Whirlpool",
			}
		elseif Sea2 then
			PortalList = {
				"Cursed Ship",
				"Cursed Ship Entrance",
			}
		elseif Sea3 then
			PortalList = {
			}
		end
	
		local unlocks = FireRemote("GetUnlockables")
		if Sea2 and unlocks.FlamingoAccess then
			table.insert(PortalList, "Mansion")
			table.insert(PortalList, "Swan's Room")
		elseif Sea3 and unlocks.DefeatedIndraTrueForm then
			table.insert(PortalList, "Mansion")
			table.insert(PortalList, "Hydra Island")
			table.insert(PortalList, "Castle On The Sea")
		end
		
		if Sea1 then
		NPCList = {
			"Ability Teacher",
			"Advanced Weapon Dealer",
			"Aura Editor",
			"Blacksmith",
			"Blox Fruit Dealer",
			"Blox Fruit Gacha",
			"Dark Step Teacher",
			"Experienced Captain",
			"Hasan",
			"Instinct Teacher",
			"Living Skeleton",
			"Love Letter 1",
			"Love Letter 2",
			"Love Letter 3",
			"Mad Scientist",
			"Marine Recruiter",
			"Master Sword Dealer",
			"Military Detective",
			"Mole",
			"Parlus",
			"Pirate Recruiter",
			"Remove Blox Fruit",
			"Rich Man",
			"Robotmega",
			"Sword Dealer",
			"Sword Dealer of the East",
			"Sword Dealer of the West",
			"Water Kung-fu Teacher",
			"Weapon Dealer",
			"Yoshi",
		}
		elseif Sea2 then
		NPCList = {
			"Alchemist",
			"Arlthmetic",
			"Arowe",
			"Aura Editor",
			"Awakenings Expert",
			"Barista",
			"Barista Cousin",
			"Bartilo",
			"Blacksmith",
			"Blox Fruit Dealer",
			"Blox Fruit Gacha",
			"Bounty/Honor Expert",
			"Crew Captain",
			"Customer",
			"Cyborg",
			"Cyborg Machine",
			"Daigrock, The Sharkman",
			"Dark Step Teacher",
			"Doghouse",
			"Dragon Tamer",
			"El Admin",
			"El Perro",
			"El Rodolfo",
			"Experimic",
			"Guashiem",
			"King Red Head",
			"Mad Scientist",
			"Manager",
			"Marine Recruiter",
			"Martial Arts Master",
			"Mr. Captain",
			"Mysterious Entity",
			"Mysterious Man",
			"Mysterious Scientist",
			"Nerd",
			"Phoeyu, The Reformed",
			"Pirate Recruiter",
			"Plokster",
			"Rip_Indra",
			"Sabi",
			"Sea Captain",
			"The Strongest God",
			"Thunder God",
			"Titles Specialist",
			"Trevor",
			"Tort",
			"Water Kung-fu Teacher",
		}
		elseif Sea3 then
		NPCList = {
			"Ancient Monk",
			"Ancient One",
			"Arena Trainer",
			"Aura Editor",
			"Awakenings Expert",
			"Barista",
			"Barista Cousin",
			"Beast Hunter",
			"Blacksmith",
			"Blox Fruit Dealer",
			"Blox Fruit Gacha",
			"Bounty/Honor Expert",
			"Butler",
			"Cake Scientist",
			"Citizen",
			"Crew Captain",
			"Crypt Master",
			"Daigrock the Sharkman",
			"Dark Step Teacher",
			"Death King",
			"Doghouse",
			"Dojo Trainer",    
			"DojoHiddenRoom",    
			"Draco Statue",
			"Dragon Hunter",
			"Dragon Talon Sage",
			"Dragon Tamer",
			"Dragon Wizard",
			"Elite Hunter",
			"Experienced Captain",
			"Fossil Expert",
			"Frozen Watcher",
			"Ghost",
			"Gravestone",
			"Horned Man",
			"Hungry Man",
			"Lunoven",
			"Mad Scientist",
			"Marine Recruiter",
			"Martial Arts Master",
			"Mysterious Entity",
			"Mysterious Force",
			"Mysterious Force3",
			"Mysterious Scientist",
			"Nerd",
			"Phoeyu the Reformed",
			"Pirate Recruiter",
			"Player Hunter",
			"Plokster",
			"Previous Hero",
			"Remove Blox Fruit",
			"Sabi",
			"Sealed King",
			"Shafi",
			"Shark Hunter",
			"Shipwright Teacher",
			"Sick Scientist",
			"Skeleton Machine",
			"Spy",
			"Submarine Worker",
			"Sweet Crafter",
			"Tacomura",
			"Thunder God",
			"Titles Specialist",
			"Uzoth",
			"Water Kung-fu Teacher",
			"drip_mama",
			"erin",
			"tort"
		}
		end
		
		if Sea1 then
		NPCListPos = {
			["Ability Teacher"] = Vector3.new(-5379, 7, 8526),
			["Advanced Weapon Dealer"] = Vector3.new(-4999, 39, 4401),
			["Aura Editor"] = Vector3.new(-1060, 9, 1803),
			["Blacksmith"] = Vector3.new(-1096, 13, 4009),
			["Blox Fruit Dealer"] = Vector3.new(928, 14, 1412),
			["Blox Fruit Gacha"] = Vector3.new(-1440, 61, 5),
			["Dark Step Teacher"] = Vector3.new(-983, 12, 3990),
			["Experienced Captain"] = Vector3.new(-1163, 6, 1727),
			["Hasan"] = Vector3.new(1320, 14, 4486),
			["Instinct Teacher"] = Vector3.new(-8037, 5755, -1929),
			["Living Skeleton"] = Vector3.new(-5461, 7, 8877),
			["Love Letter 1"] = Vector3.new(1005, 4, -1355),
			["Love Letter 2"] = Vector3.new(-4944, 717, -2650),
			["Love Letter 3"] = Vector3.new(-5230, 24, 4394),
			["Mad Scientist"] = Vector3.new(-5382, 12, -2148),
			["Marine Recruiter"] = Vector3.new(880, 4, 1336),
			["Master Sword Dealer"] = Vector3.new(-4748, 716, -2654),
			["Military Detective"] = Vector3.new(4853, 4, 717),
			["Mole"] = Vector3.new(-7859, 5544, -381),
			["Parlus"] = Vector3.new(-4929, 95, 3869),
			["Pirate Recruiter"] = Vector3.new(-2573, 6, 2170),
			["Remove Blox Fruit"] = Vector3.new(5660, 63, 866),
			["Rich Man"] = Vector3.new(-906, 12, 4077),
			["Robotmega"] = Vector3.new(-1038, 9, 1800),
			["Sword Dealer"] = Vector3.new(895, 14, 1412),
			["Sword Dealer of the East"] = Vector3.new(1432, 86, -1388),
			["Sword Dealer of the West"] = Vector3.new(-1277, 12, 3985),
			["Water Kung-fu Teacher"] = Vector3.new(61586, 19, 987),
			["Weapon Dealer"] = Vector3.new(-699, 6, 1516),
			["Yoshi"] = Vector3.new(-4990, 345, -3000)
		}
		elseif Sea2 then
		NPCListPos = {
			["Alchemist"] = Vector3.new(-2774, 71, -3568),
			["Aura Editor"] = Vector3.new(-345, 72, 1195),
			["Awakenings Expert"] = Vector3.new(-413, 15, 247),
			["Barista"] = Vector3.new(-380, 72, 256),
--			["Barista Cousin"] = game:GetService("ReplicatedStorage").NPCs["Barista Cousin"].WorldPivot.Position or workspace.NPCs["Barista Cousin"].WorldPivot.Position,
			["Bartilo"] = Vector3.new(-461, 72, 300),
			["Blacksmith"] = Vector3.new(-137, 19, 2851),
			["Blox Fruit Dealer"] = Vector3.new(-452, 71, 358),
			["Blox Fruit Gacha"] = Vector3.new(-422, 72, 386),
			["Bounty/Honor Expert"] = Vector3.new(-305, 72, 333),
			["Crew Captain"] = Vector3.new(-5697, 125, -825),
			["Customer"] = Vector3.new(-414, 72, 331),
			["Cyborg"] = Vector3.new(629, 305, -531),
			["Cyborg Machine"] = Vector3.new(-5570, 295, -5964),
			["Daigrock, The Sharkman"] = Vector3.new(-2599, 238, -10316),
			["Dark Step Teacher"] = Vector3.new(-4998, 41, -4500),
			["Doghouse"] = Vector3.new(-1983, 127, -83),
			["Dragon Tamer"] = Vector3.new(-5876, 333, -380),
			["El Admin"] = Vector3.new(1321, 125, 33134),
			["El Perro"] = Vector3.new(637, 125, 33220),
			["El Rodolfo"] = Vector3.new(938, 40, 32783),
			["Experimic"] = Vector3.new(918, 124, 33454),
			["Guashiem"] = Vector3.new(902, 178, 33294),
			["King Red Head"] = Vector3.new(-1928, 12, 1738),
			["Mad Scientist"] = Vector3.new(-4949, 41, -4436),
			["Manager"] = Vector3.new(-383, 72, 330),
			["Marine Recruiter"] = Vector3.new(-1347, 71, -1049),
			["Martial Arts Master"] = Vector3.new(1377, 246, -5189),
			["Mr. Captain"] = Vector3.new(-1906, 5, -2532),
			["Mysterious Entity"] = Vector3.new(244, 0, 1807),
			["Mysterious Man"] = Vector3.new(-2573, 1623, -3745),
			["Mysterious Scientist"] = Vector3.new(-6433, 249, -4500),
			["Nerd"] = Vector3.new(-397, 72, 258),
			["Phoeyu, The Reformed"] = Vector3.new(6356, 296, -6762),
			["Pirate Recruiter"] = Vector3.new(-428, 72, 1444),
			["Plokster"] = Vector3.new(-1891, 87, -1908),
			["Sabi"] = Vector3.new(699, 185, 654),
			["Sea Captain"] = Vector3.new(109, 18, 2832),
			["The Strongest God"] = Vector3.new(4742, 6, 2914),
			["Thunder God"] = Vector3.new(-262, 49325, -35279),
			["Titles Specialist"] = Vector3.new(-345, 15, 304),
			["Trevor"] = Vector3.new(-337, 331, 643),
			["Water Kung-fu Teacher"] = Vector3.new(-4989, 43, -4457),
			["Arlthmetic"] = Vector3.new(-4976, 143, -5394),
			["Arowe"] = Vector3.new(-1988, 124, -70),
			["Rip_Indra"] = Vector3.new(-5651, 178, -1351),
			["Tort"] = Vector3.new(-308, 72, 355)
		}
		elseif Sea3 then
		NPCListPos = {
			["Ancient Monk"] = Vector3.new(-13774, 333, -9879),
			["Ancient One"] = Vector3.new(28974, 14888, -119),
			["Arena Trainer"] = Vector3.new(3580, 8, 323),
			["Aura Editor"] = Vector3.new(-4889, 370, -2860),
			["Awakenings Expert"] = Vector3.new(-12649, 374, -7557),
			["Barista"] = Vector3.new(-12460, 337, -7431),
		--	["Barista Cousin"] = (game:GetService("ReplicatedStorage"):FindFirstChild("NPCs") and game:GetService("ReplicatedStorage").NPCs:FindFirstChild("Barista Cousin") or workspace:FindFirstChild("NPCs") and workspace.NPCs:FindFirstChild("Barista Cousin").WorldPivot.Position),
			["Beast Hunter"] = Vector3.new(-16282, 71, 259),
			["Blacksmith"] = Vector3.new(-464, 19, 5735),
			["Blox Fruit Dealer"] = Vector3.new(-12510, 335, -7441),
			["Blox Fruit Gacha"] = Vector3.new(-12488, 336, -7445),
			["Bounty/Honor Expert"] = Vector3.new(-12650, 373, -7492),
			["Butler"] = Vector3.new(-5116, 315, -3133),
			["Cake Scientist"] = Vector3.new(-2710, 63, -12895),
			["Citizen"] = Vector3.new(-12441, 330, -7676),
			["Crew Captain"] = Vector3.new(2770, 163, -6327),
			["Crypt Master"] = Vector3.new(-12133, 576, -6707),
			["Daigrock, the Sharkman"] = Vector3.new(-5020, 313, -3203),
			["Dark Step Teacher"] = Vector3.new(-5058, 313, -3198),
			["Death King"] = Vector3.new(-8722, 141, 6247),
			["Doghouse"] = Vector3.new(-13619, 333, -7746),
			["Dojo Trainer"] = Vector3.new(5868, 1207, 870),
			["DojoHiddenRoom"] = Vector3.new(5666, 971, 942),
			["Draco Statue"] = Vector3.new(-7, -7541, 16),
			["Dragon Hunter"] = Vector3.new(5862, 1208, 807),
			["Dragon Talon Sage"] = Vector3.new(-15906, 483, 945),
			["Dragon Tamer"] = Vector3.new(5392, 1109, 959),
			["Dragon Wizard"] = Vector3.new(5771, 1208, 804),
			["Elite Hunter"] = Vector3.new(-5417, 313, -2822),
			["Experienced Captain"] = Vector3.new(-385, 19, 5438),
			["Fossil Expert"] = Vector3.new(0, -10000, 0),
			["Frozen Watcher"] = Vector3.new(0, -10000, 0),
			["Ghost"] = Vector3.new(-9758, 270, 6291),
			["Gravestone"] = Vector3.new(-8653, 140, 6170),
			["Horned Man"] = Vector3.new(-11893, 929, -8760),
			["Hungry Man"] = Vector3.new(-10921, 623, -10270),
			["Lunoven"] = Vector3.new(-5114, 314, -3089),
			["Mad Scientist"] = Vector3.new(-5044, 313, -3204),
			["Marine Recruiter"] = Vector3.new(-12798, 331, -7699),
			["Martial Arts Master"] = Vector3.new(-5004, 313, -3222),
			["Mysterious Entity"] = Vector3.new(-11560, 48, -7600),
			["Mysterious Force"] = Vector3.new(3032, 2280, -7325),
			["Mysterious Force3"] = Vector3.new(28611, 14896, 105),
			["Mysterious Scientist"] = Vector3.new(-5013, 313, -2815),
			["Nerd"] = Vector3.new(-12450, 373, -7522),
			["Phoeyu, The Reformed"] = Vector3.new(-5060, 314, -3187),
			["Pirate Recruiter"] = Vector3.new(-12258, 331, -7399),
			["Player Hunter"] = Vector3.new(-5562, 313, -2838),
			["Plokster"] = Vector3.new(-5144, 314, -3166),
			["Previous Hero"] = Vector3.new(-10371, 330, -10131),
			["Remove Blox Fruit"] = Vector3.new(-5574, 1087, -2659),
			["Sabi"] = Vector3.new(-4967, 313, -3228),
			["Sealed King"] = Vector3.new(-5356, 313, -2493),
			["Shafi"] = Vector3.new(-16515, 22, -188),
			["Shark Hunter"] = Vector3.new(-16525, 107, 753),
			["Shipwright Teacher"] = Vector3.new(-16528, 74, 310),
			["Sick Scientist"] = Vector3.new(-2812, 254, -12592),
			["Skeleton Machine"] = Vector3.new(-9707, -71, 6517),
			["Spy"] = Vector3.new(-16469, 527, 537),
			["Submarine Worker"] = Vector3.new(-16271, 23, 1382),
			["Sweet Crafter"] = Vector3.new(223, 23, -12770),
			["Tacomura"] = Vector3.new(-5062, 370, -3140),
			["Thunder God"] = Vector3.new(-263, 49325, -35282),
			["Titles Specialist"] = Vector3.new(-12655, 336, -7518),
			["Uzoth"] = Vector3.new(5661, 1210, 863),
			["Water Kung-fu Teacher"] = Vector3.new(-5030, 314, -3209),
			["drip_mama"] = Vector3.new(-2137, 69, -12326),
			["erin"] = Vector3.new(-4876, 313, -2866),
			["tort"] = Vector3.new(-12487, 336, -7565)
		}
		end
	-------------------------------[[ Stats ]]-------------------------------
	
	-------------------------------[[ Player ]]-------------------------------
	task.spawn(function()
		while true do
			local char = LocalPlayer.Character
			if char then
				local baseSpeed = 36
				local hum = char:FindFirstChild("Humanoid")
	
				if hum then
					if _G.ModifySpeed then
						local desiredSpeed = math.clamp(_G.SelectModifySpeed or 50, 10, 300)
						local multiplier = desiredSpeed / baseSpeed
						char:SetAttribute("SpeedMultiplier", multiplier)
					else
						char:SetAttribute("SpeedMultiplier", 1)
					end
				end
			end
			task.wait()
		end
	end)
	
	task.spawn(function()
		while true do
			local char = LocalPlayer.Character
			if char then
				local hum = char:FindFirstChild("Humanoid")
				if hum then
					if _G.ModifyJumpPower then
						hum.JumpPower = _G.SelectJumpPower
					else
						hum.JumpPower = 50
					end
				end
			end
			task.wait()
		end
	end)
	
	task.spawn(function()
		while true do
			local char = LocalPlayer.Character
			if char then
				if _G.ModifyDash then
					char:SetAttribute("DashLength", _G.SelectDashDistance)
					char:SetAttribute("DashLengthAir", _G.SelectDashDistance)
					char:SetAttribute("DashLengthGround", _G.SelectDashDistance)
					char:SetAttribute("DashSpeed", _G.SelectDashDistance)
				else
					char:SetAttribute("DashLength", 1)
					char:SetAttribute("DashLengthAir", 1)
					char:SetAttribute("DashLengthGround", 1)
					char:SetAttribute("DashSpeed", 1)
				end
			end
			task.wait()
		end
	end)
	
	local AllPlayersList = {}
	for _, player in pairs(game.Players:GetPlayers()) do
		if player ~= LocalPlayer then
			table.insert(AllPlayersList, player.Name)
		end
	end
	
	function UpdatePlayerList()
		local AllPlayersList = {}
		for _, player in pairs(game.Players:GetPlayers()) do
			if player ~= LocalPlayer then
				table.insert(AllPlayersList, player.Name)
			end
		end
		PlayersList:Set(AllPlayersList)
	end
	
	SafeSpawn(function()
		while task.wait() do
			if _G.TeleportToPlayer then
				for _, player in pairs(game.Players:GetPlayers()) do
					if player.Name == _G.SelectPlayer then
						if player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0 then
							repeat task.wait()
							Tween(player.Character.HumanoidRootPart.Position)
							until not _G.TeleportToPlayer or player.Character.Humanoid.Health <= 0
						end
					end
				end
			end
		end
	end)
	
	spawn(function()
		while wait() do
			pcall(function()
				local MaxDistance = math.huge
				for i,v in pairs(game.Players:GetPlayers()) do
					if v.Name ~= LocalPlayer.Name then
						local Distance = v:DistanceFromCharacter(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
						if Distance < MaxDistance then
							MaxDistance = Distance
							TargetPlayerAim = v.Name
						end
					end
				end
			end)
		end
	end)
	
	spawn(function()
		pcall(function()
			game:GetService("RunService").RenderStepped:connect(function()
				if _G.AimbotNearest and TargetPlayerAim ~= nil and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and game.Players.LocalPlayer.Character[game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name]:FindFirstChild("MousePos") then
					local args = {
						[1] = game:GetService("Players"):FindFirstChild(TargetPlayerAim).Character.HumanoidRootPart.Position
					}
					game:GetService("Players").LocalPlayer.Character[game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name].RemoteEvent:FireServer(unpack(args))
				end
			end)
		end)
	end)
	
	spawn(function()
		pcall(function()
			while task.wait() do
				if _G.AimbotPlayerSelected and _G.SelectPlayer ~= nil and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool") and game.Players.LocalPlayer.Character[game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name]:FindFirstChild("MousePos") then
					local args = {
						[1] = game:GetService("Players"):FindFirstChild(_G.SelectPlayer).Character.HumanoidRootPart.Position
					}
					game:GetService("Players").LocalPlayer.Character:FindFirstChild(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name).RemoteEvent:FireServer(unpack(args))
				end
			end
		end)
	end)
	-------------------------------[[ Race ]]-------------------------------
	function CheckRace()
		local RacasTable = {
			["Human"] = "Human",
			["Mink"] = "Mink",
			["Fishman"] = "Sharkman",
			["Skypiea"] = "Angel",
			["Ghoul"] = "Ghoul",
			["Cyborg"] = "Cyborg",
			["Draco"] = "Draco",
		}
		
		if LocalPlayer.Character:FindFirstChild("RaceTransformed") then
			return RacasTable[LocalPlayer.Data.Race.Value].." V4"
		end
		if FireRemote("Wenlocktoad", "1") == -2 then
			return RacasTable[LocalPlayer.Data.Race.Value].." V3"
		end
		if FireRemote("Alchemist", "1") == -2 then
			return RacasTable[LocalPlayer.Data.Race.Value].." V2"
		end
		return RacasTable[LocalPlayer.Data.Race.Value].." V1"
	end 
	
	function CheckAcientOneStatus()
        if not LocalPlayer.Character:FindFirstChild("RaceTransformed") then
            return "You Have Yet To Achieve Greatness"
        end
        local v227 = nil
        local v228 = nil
        local v229 = nil
        if LocalPlayer.Data.Race.Value ~= "Draco" then
	        v229, v228, v227 = FireRemote("UpgradeRace", "Check")
        else
	        v229, v228, v227 = FireRemote("UpgradeRace", "Check", 2)
        end
        if v229 == 1 then
            return "Required Train More"
        elseif v229 == 2 or v229 == 4 or v229 == 7 then
            return "Can Buy Gear With "..(v227).."\198\146"
        elseif v229 == 3 then
            return "Required Train More"
        elseif v229 == 5 then
            return "You Are Done Your Race."
        elseif v229 == 6 then
            return "Upgrades completed: "..(v228 - 2).."/3, Need Trains More"
        end
        if v229 ~= 8 then
            if v229 == 0 then
                return "Ready For Trial"
            else
                return "You Have Yet To Achieve Greatness"
            end
        end
        return "Remaining "..(10 - v228).." Training Sessions."
    end
        
	spawn(function()
		pcall(function()
			while wait() do
				if _G.UnlockV2Race then
					if not LocalPlayer.Data.Race:FindFirstChild("Evolved") then
						if FireRemote("Alchemist", "1") == 0 then
							FireRemote("Alchemist", "2")
						elseif FireRemote("Alchemist", "1") == 1 then
							pcall(function()
								if not VerifyTool("Flower 1") then
									Tween(game:GetService("Workspace").Flower1.Position)
								elseif not VerifyTool("Flower 2") then
									Tween(game:GetService("Workspace").Flower2.Position)
								elseif not VerifyTool("Flower 3") then
									if workspace.Enemies:FindFirstChild("Swan Pirate") then
										for _, swan in pairs(workspace.Enemies:GetChildren()) do
											if swan.Name == "Swan Pirate" then
												repeat
													wait()
													bringmobs = true
													EquipTool(SelectWeapon)
													Tween(swan.HumanoidRootPart.Position + Type)
													MobPos = swan.HumanoidRootPart.Position
													MobName = swan.Name
													StartMagnet = true
												until VerifyTool("Flower 3") or not swan.Parent or swan.Humanoid.Health <= 0 or _G.UnlockV2Race == false;
												bringmobs = false
											end
										end
									else
										Tween(Vector3.new(1193, 72, 1199))
										bringmobs = false
									end
								end
							end)
						elseif FireRemote("Alchemist", "1") == 2 then
							FireRemote("Alchemist", "3")
						end
					end
				end
			end
		end)
	end)
	
	function GetQuestV3()
            if FireRemote("Wenlocktoad", "1") == 0 then
                FireRemote("Wenlocktoad", "2")
                wait(.1)
            end
        end
        function BuyV3Race()
            FireRemote("Wenlocktoad", "1")
            FireRemote("Wenlocktoad", "3")
        end

	task.spawn(function()
		while task.wait() do
			if _G.UnlockV3Race then
				local RaceName = LocalPlayer.Data.Race.Value
				local IsV3 = FireRemote("Wenlocktoad", "1") == -2
				if RaceName == "Cyborg" then
					GetQuestV3()
					if CheckFruit("Rocket") then
						FireRemote("LoadFruit", "Rocket-Rocket")
					end
					BuyV3Race()
				elseif RaceName == "Mink" then
					GetQuestV3()
					repeat task.wait()
						_G.FarmChests = true
						BuyV3Race()
					until IsV3 or not _G.UnlockV3Race
					_G.FarmChests = false
				elseif RaceName == "Human" then
					if VerifyNPC("Diamond") and VerifyNPC("Jeremy") and VerifyNPC("Orbitus") then
						GetQuestV3()
						local Bosses = { Diamond = true, Jeremy = true, Orbitus = true }
						for _, enemy in pairs(workspace.Enemies:GetChildren()) do
							if Bosses[enemy.Name] and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 and enemy:FindFirstChild("HumanoidRootPart") then
								repeat task.wait()
									GetQuestV3()
									EquipTool(SelectWeapon)
									Tween(enemy.HumanoidRootPart.Position + Type)
								until not VerifyNPC(enemy.Name) or enemy.Humanoid.Health <= 0 or not _G.UnlockV3Race
							end
						end
					end
				end
			end
		end
	end)  
	
		spawn(function()
            while wait() do
                local s, e = pcall(function()
                    if _G.UnlockCyborg and LocalPlayer.Data.Race.Value ~= "Cyborg" then
                        if workspace.Map.CircleIsland:FindFirstChild("BlockPart") and workspace.Map.CircleIsland.BlockPart.CanCollide then
	                        if VerifyTool("Fist of Darkness") then
								fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon.Button.Main.ClickDetector) 
								end
                            if VerifyTool("Core Brain") then
                                fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon.Button.Main.ClickDetector) 
                            else
                                if not VerifyTool("Microchip") and not game:GetService("Workspace").Enemies:FindFirstChild("Order") then 
                                    if not game:GetService("Workspace").Enemies:FindFirstChild("Order") then
	                                    FireRemote("BlackbeardReward", "Microchip", "1")
                                        FireRemote("BlackbeardReward", "Microchip", "2")
                                    end
                                else
                                    fireclickdetector(game:GetService("Workspace").Map.CircleIsland.RaidSummon.Button.Main.ClickDetector) 
                                end
                                v = game:GetService("Workspace").Enemies:FindFirstChild("Order")
                                if v and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                    repeat task.wait()
                                        EquipTool(SelectWeapon)
                                        Tween(v.HumanoidRootPart.Position + Type)
                                    until not _G.UnlockCyborg or v.Humanoid.Health <= 0 or not v.Parent
                                end
                            end
                        else               
                            FireRemote("CyborgTrainer", "Check")
                            wait()
                            FireRemote("CyborgTrainer", "Buy")
                        end
                    end
                end)
            end
        end)
        
     spawn(function()
	    while task.wait() do
	        pcall(function()
	            if _G.UnlockGhoulRace then
	                if LocalPlayer.Data.Race.Value ~= "Ghoul" then
	                    FireRemote("Ectoplasm", "BuyCheck", 4)
	                    FireRemote("Ectoplasm", "Change", 4)
	
	                    if not VerifyTool("Hellfire Torch") then
	                        local captain = game.Workspace.Enemies:FindFirstChild("Cursed Captain")
	                        
	                        if captain then
	                            if captain:FindFirstChild("HumanoidRootPart") and captain:FindFirstChild("Humanoid") then
	                                if captain.Humanoid.Health > 0 then
	                                    repeat task.wait()
	                                        EquipTool(SelectWeapon)
	                                        Tween(captain.HumanoidRootPart.Position + Type)
	                                    until not _G.UnlockGhoulRace or not captain.Parent or captain.Humanoid.Health <= 0
	                                end
	                            end
	
	                        elseif game.ReplicatedStorage:FindFirstChild("Cursed Captain") then
	                            local ghostCap = game.ReplicatedStorage:FindFirstChild("Cursed Captain")
	                            if ghostCap:FindFirstChild("HumanoidRootPart") then
	                                Tween(ghostCap.HumanoidRootPart.Position + Type)
	                                wait(2)
	                            end
	
	                        else
	                            if CheckMaterial("Ectoplasm") < 100 then
	                                local Enemies = game:GetService("Workspace").Enemies
	                                for _, enemy in pairs(Enemies:GetChildren()) do
	                                    if enemy.Name == "Ship Deckhand" or enemy.Name == "Ship Steward" or enemy.Name == "Ship Officer" or enemy.Name == "Ship Engineer" then
	                                        if enemy:FindFirstChild("Humanoid") and enemy:FindFirstChild("HumanoidRootPart") and enemy.Humanoid.Health > 0 then
	                                            repeat task.wait()
	                                                EquipTool(SelectWeapon)
	                                                Tween(enemy.HumanoidRootPart.Position + Type)
	                                            until not _G.UnlockGhoulRace or not enemy.Parent or enemy.Humanoid.Health <= 0
	                                        end
	                                    end
	                                end
	                            else
	                                Tween(Vector3.new(924, 200, 33170))
	                            end
	                        end
	                    else
	                        FireRemote("Ectoplasm", "BuyCheck", 4)
	                        FireRemote("Ectoplasm", "Buy", 4)
	                        FireRemote("Ectoplasm", "Change", 4)
	                    end
	                end
	            end
	        end)
	    end
	end)
	
	task.spawn(function()
		while task.wait() do
			if _G.AutoTrial then
				local plr = game.Players.LocalPlayer
				local RaceName = plr.Data.Race.Value
				if RaceName == "Draco" then
					local char = plr.Character or plr.CharacterAdded:Wait()
					local hrp = char:WaitForChild("HumanoidRootPart")
					local map = workspace:FindFirstChild("Map")
					local trial = map and (map:FindFirstChild("DracoTrial") or map:FindFirstChild("DracoTrail"))
					local remote = game.ReplicatedStorage:WaitForChild("Remotes"):FindFirstChild("DracoTrial")
					if workspace:FindFirstChild("NPCs") and remote then
						for _, npc in ipairs(workspace.NPCs:GetChildren()) do
							if npc.Name:find("Draco Statue") and npc:FindFirstChild("HumanoidRootPart") then
								if (hrp.Position - npc.HumanoidRootPart.Position).Magnitude < 2000 then
									remote:InvokeServer()
									task.wait(1)
									break
								end
							end
						end
					end
					map = workspace:FindFirstChild("Map")
					trial = map and (map:FindFirstChild("DracoTrial") or map:FindFirstChild("DracoTrail"))
					if not trial then continue end
					local doneRelics = {}
					for _, relic in pairs(trial:GetDescendants()) do
						if relic.Name == "Relic1" and not doneRelics["Relic1"] then
							doneRelics["Relic1"] = true
							local Pos = relic.WorldPivot.Position
							local PosEnd = trial.EndRelic1.WorldPivot.Position
							Tween(Pos)
							repeat task.wait() until (Pos - hrp.Position).Magnitude < 10
							SendKey("E", 0.1)
							Tween(PosEnd)
							repeat task.wait() until (PosEnd - hrp.Position).Magnitude < 5
							SendKey("E", 0.1)
						elseif relic.Name == "Relic2" and not doneRelics["Relic2"] then
							doneRelics["Relic2"] = true
							local Pos = relic.WorldPivot.Position
							local PosEnd = trial.EndRelic2.WorldPivot.Position
							Tween(Pos)
							repeat task.wait() until (Pos - hrp.Position).Magnitude < 10
							SendKey("E", 0.1)
							wait(1)
							Tween(PosEnd)
							repeat task.wait() until (PosEnd - hrp.Position).Magnitude < 5
							SendKey("E", 0.1)
						elseif relic.Name == "Relic3" and not doneRelics["Relic3"] then
							doneRelics["Relic3"] = true
							local Pos = relic.WorldPivot.Position
							local PosEnd = trial.EndRelic3.WorldPivot.Position
							Tween(Pos)
							repeat task.wait() until (Pos - hrp.Position).Magnitude < 10
							SendKey("E", 0.1)
							wait(1)
							Tween(PosEnd)
							repeat task.wait() until (PosEnd - hrp.Position).Magnitude < 5
							SendKey("E", 0.1)
						end
					end
					if trial:FindFirstChild("TrialDoor") and trial.TrialDoor:FindFirstChild("DoorTouch") then
						Tween(trial.TrialDoor.DoorTouch.Position)
					end
				elseif RaceName == "Ghoul" then
					pcall(function()
						for _, enemy in pairs(workspace.Enemies:GetChildren()) do
							if enemy.Name == "Ancient Vampire" or enemy.Name == "Ancient Zombie" then
								local humanoid = enemy:FindFirstChild("Humanoid")
								local hrp = enemy:FindFirstChild("HumanoidRootPart")
								
								if humanoid and humanoid.Health > 0 and hrp then
									repeat
										task.wait()
										bringmobs = true
										EquipTool(SelectWeapon)
										Tween(hrp.Position + Type)
										MobName = enemy.Name
										MobPos = hrp.Position
									until not _G.AutoTrial or humanoid.Health <= 0
									bringmobs = false
								end
							end
						end
					end)
				elseif RaceName == "Human" then
					pcall(function()
						for _, enemy in pairs(workspace.Enemies:GetChildren()) do
							if enemy.Name == "Flame Master" or enemy.Name == "Dark Master" or enemy.Name == "Light Master" or enemy.Name == "Quake Master" or enemy.Name == "Rumble Master" then
								if enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
									repeat
									task.wait()
									EquipTool(SelectWeapon)
									Tween(enemy.HumanoidRootPart.Position + Type)
									until not _G.AutoTrial or enemy.Humanoid.Health <= 0
								end
							end
						end
					end)
				elseif RaceName == "Skypiea" then
					for i,v in pairs(workspace.Map.SkyTrial.Model:GetDescendants()) do
						if v.Name ==  "snowisland_Cylinder.081" then
							Tween(v.Position)
						end
					end
				elseif RaceName == "Mink" then
					for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
						if v.Name == "StartPoint" then
							Tween(v.Position)
						end
					end
				elseif RaceName == "Cyborg" then
					Tween(Vector3.new(28286, 14897, 103)) 
				elseif RaceName == "Fishman" then
					for i,v in pairs(workspace.SeaBeasts.SeaBeast1:GetDescendants()) do
						if v.Name ==  "HumanoidRootPart" then
							Tween(v.Position + Vector3.new(0, 100, 0))
							if S["Use Melee"] them
								for i,v in pairs(LocalPlayer.Backpack:GetChildren()) do
									if v:IsA("Tool") then
										if v.ToolTip == "Melee" then
											EquipTool(v.Name)
										end
									end
								end
								if S["Melee Use Skill Z"] then
									SendKey("Z", S["Melee Hold Time Skill Z"])
									wait(S["Melee Hold Time Skill Z"])
								end
								if S["Melee Use Skill X"] then
									SendKey("X", S["Melee Hold Time Skill X"])
									wait(S["Melee Hold Time Skill X"])
								end
								if S["Melee Use Skill C"] then
									SendKey("C", S["Melee Hold Time Skill C"])
									wait(S["Melee Hold Time Skill C"])
								end
							end
							if S["Use Blox Fruit"] then
								for i,v in pairs(LocalPlayer.Backpack:GetChildren()) do
									if v:IsA("Tool") then
										if v.ToolTip == "Blox Fruit" and v.Name ~= "Portal-Portal" and v.Name ~= "Buddha-Buddha" then
											EquipTool(v.Name)
										end
									end
								end
								if S["Blox Fruit Use Skill Z"] then
									SendKey("Z", S["Blox Fruit Hold Time Skill Z"])
									wait(S["Blox Fruit Hold Time Skill Z"])
								end
								if S["Blox Fruit Use Skill X"] then
									SendKey("X", S["Blox Fruit Hold Time Skill X"])
									wait(S["Blox Fruit Hold Time Skill X"])
								end
								if S["Blox Fruit Use Skill C"] then
									SendKey("C", S["Blox Fruit Hold Time Skill C"])
									wait(S["Blox Fruit Hold Time Skill C"])
								end
								if S["Blox Fruit Use Skill F"] then
									SendKey("F", S["Blox Fruit Hold Time Skill F"])
									wait(S["Blox Fruit Hold Time Skill F"])
								end
								if S["Blox Fruit Use Skill V"] then
									SendKey("V", S["Blox Fruit Hold Time Skill V"])
									wait(S["Blox Fruit Hold Time Skill V"])
								end
							end
							if S["Use Sword"] then
								for i,v in pairs(LocalPlayer.Backpack:GetChildren()) do
									if v:IsA("Tool") then
										if v.ToolTip == "Sword" then
											EquipTool(v.Name)
										end
									end
								end
								if S["Sword Use Skill Z"] then
									SendKey("Z", S["Sword Hold Time Skill Z"])
									wait(S["Sword Hold Time Skill Z"])
								end
								if S["Sword Use Skill X"] then
									SendKey("X", S["Sword Hold Time Skill X"])
									wait(S["Sword Hold Time Skill X"])
								end
							end
							if S["Use Gun"] then
								for i,v in pairs(LocalPlayer.Backpack:GetChildren()) do
									if v:IsA("Tool") then
										if v.ToolTip == "Gun" then
											EquipTool(v.Name)
										end
									end
								end
								if S["Gun Use Skill Z"] then
									SendKey("Z", S["Gun Hold Time Skill Z"])
									wait(S["Gun Hold Time Skill Z"])
								end
								if S["Gun Use Skill X"] then
									SendKey("X", S["Gun Hold Time Skill X"])
									wait(S["Gun Hold Time Skill X"])
								end
							end
						end
					end
				end
			end
		end
	end)
	
	function CheckMiragePuzzle()
        if FireRemote("CheckTempleDoor") then
            return "✅"
        end
        return "❌"
    end 
    
    local GearsInfos = {
	    ["Human"] = {
			["A"] = "",
			["B"] = "Psycho",
		},
		["Mink"] = {
			["A"] = "",
			["B"] = "",
		},
		["Fishman"] = {
			["A"] = "",
			["B"] = "",
		},
		["Skypiea"] = {
			["A"] = "",
			["B"] = "",
		},
		["Ghoul"] = {
			["A"] = "",
			["B"] = "",
		},
		["Cyborg"] = {
			["A"] = "",
			["B"] = "",
		},
		["Draco"] = {
			["A"] = "",
			["B"] = "",
		},
    }
    
    function GetGearColor(position)
	    if FireRemote("TempleClock", "Check").RaceDetails.Gears[position] == "A" then
			return "Red"
		elseif FireRemote("TempleClock", "Check").RaceDetails.Gears[position] == "B" then
			return "Blue"
		else
			return "None"
		end
    end
    
    function GetGears()
	    return #FireRemote("TempleClock", "Check").RaceDetails.Gears or "0"
    end
    
    task.spawn(function()
		while task.wait() do
			if _G.BuyStage then
				if LocalPlayer.Data.Race.Value ~= "Draco" then
					FireRemote("UpgradeRace", "Buy")
				else
					FireRemote("UpgradeRace", "Buy", 2)
				end
			end
		end
	end)
    
	function GetCurrentHour()
		return math.floor(game.Lighting.ClockTime)
	end
	
	function GetMoonTexture()
		if Sea1 then
			return game:GetService("Lighting").Sky.MoonTextureId
		elseif Sea2 then
			return game:GetService("Lighting").FantasySky.MoonTextureId
		elseif Sea3 then
			return game:GetService("Lighting").Sky.MoonTextureId
		end
	end
	
	function GetMoonPhase()
		local moon1 = "http://www.roblox.com/asset/?id=9709135895"
		local moon2 = "http://www.roblox.com/asset/?id=9709139597"
		local moon3 = "http://www.roblox.com/asset/?id=9709143733"
		local moon4 = "http://www.roblox.com/asset/?id=9709149052" -- Next Night 🌖
		local moon5 = "http://www.roblox.com/asset/?id=9709149431" -- Full Moon 🌕
		local moon6 = "http://www.roblox.com/asset/?id=9709149680" -- 🌔
		local moon7 = "http://www.roblox.com/asset/?id=9709150086"
		local moon8 = "http://www.roblox.com/asset/?id=9709150401"
	
		local moonCycle = {
			moon1,
			moon2,
			moon3,
			moon4, -- Next Night (4)
			moon5, -- Full Moon (5)
			moon6,
			moon7,
			moon8
		}
	
		local currentTexture = GetMoonTexture()
		local phase = "Bad Moon"
		for i, id in ipairs(moonCycle) do
			if currentTexture == id then
				if i == 5 then
					phase = "Full Moon"
				elseif i == 4 then
					phase = "Next Night"
				else
					phase = "Bad Moon_" .. i
				end
				break
			end
		end
		return phase
	end
	
	function FormatTimeRemaining(targetTime, currentTime)
		local diff = targetTime - currentTime
		if diff > 1 then
			return math.floor(diff) .. " Minutes"
		else
			return math.floor(diff * 60) .. " Seconds"
		end
	end
	
	function GetMoonStatus()
		local currentTime = game.Lighting.ClockTime
		local hour = tostring(GetCurrentHour())
		local phase = GetMoonPhase()
		if phase == "Full Moon" and currentTime <= 5 then
			return "Time Of Day: " .. hour .. " - End Of The Moon in " .. FormatTimeRemaining(5, currentTime)
		elseif phase == "Full Moon" and currentTime > 5 and currentTime < 12 then
			return "Time Of Day: " .. hour .. " - Fake Moon"
		elseif phase == "Full Moon" and currentTime > 12 and currentTime < 18 then
			return "Time Of Day: " .. hour .. " - The Moon Will Arrive In " .. FormatTimeRemaining(18, currentTime)
		elseif phase == "Full Moon" and currentTime >= 18 and currentTime <= 24 then
			return "Time Of Day: " .. hour .. " - End Of The Moon in " .. FormatTimeRemaining(30, currentTime)
		end
		if phase == "Next Night" and currentTime < 12 then
			return "Time Of Day: " .. hour .. " - Full Moon Will Arrive In A While " .. FormatTimeRemaining(18, currentTime)
		elseif phase == "Next Night" and currentTime >= 12 then
			return "Time Of Day: " .. hour .. " - The Full Moon Will Arrive In " .. FormatTimeRemaining(42, currentTime)
		end
		if string.find(phase, "Bad Moon_") then
			local index = tonumber(string.match(phase, "%d+"))
			local nightsUntilFull = (5 - index) % 8
			local totalHours = (nightsUntilFull * 24) + (18 - currentTime)
			return "Time Of Day: " .. hour .. " - The Full Moon Will Arrive In " .. FormatTimeRemaining(currentTime + totalHours, currentTime)
		end
		return "Time Of Day: " .. hour
	end
	-------------------------------[[ Shop ]]-------------------------------
	
	-------------------------------[[ Visual ]]-------------------------------
		FruitsId = {
		["rbxassetid://15124425041"] = {Name = "Rocket Fruit", Image = "rbxassetid://124904243114736"},
		["rbxassetid://15123685330"] = {Name = "Spin Fruit", Image = "rbxassetid://125987181378388"},
		["rbxassetid://15123613404"] = {Name = "Blade Fruit", Image = "rbxassetid://133974387882071"},
		["rbxassetid://15123689268"] = {Name = "Spring Fruit", Image = "rbxassetid://134013067789926"},
		["rbxassetid://15123595806"] = {Name = "Bomb Fruit", Image = "rbxassetid://139922914635788"},
		["rbxassetid://15123677932"] = {Name = "Smoke Fruit", Image = "rbxassetid://99523390558254"},
		["rbxassetid://15124220207"] = {Name = "Spike Fruit", Image = "rbxassetid://124890777809197"},
		["rbxassetid://121545956771325"] = {Name = "Flame Fruit", Image = "rbxassetid://97880651761965"},
		["rbxassetid://15100433167"] = {Name = "Ice Fruit", Image = "rbxassetid://136877468840396"},
		["rbxassetid://15123673019"] = {Name = "Sand Fruit", Image = "rbxassetid://93883477293511"},
		["rbxassetid://15123618591"] = {Name = "Dark Fruit", Image = "rbxassetid://115322940089418"},
		["rbxassetid://77885466312115"] = {Name = "Eagle Fruit", Image = "rbxassetid://74870738047722"},
		["rbxassetid://15112600534"] = {Name = "Diamond Fruit", Image = "rbxassetid://119743790291961"},
		["rbxassetid://15123640714"] = {Name = "Light Fruit", Image = "rbxassetid://71526210186918"},
		["rbxassetid://15123668008"] = {Name = "Rubber Fruit", Image = "rbxassetid://122402408521248"},
		["rbxassetid://15123662036"] = {Name = "Ghost Fruit", Image = "rbxassetid://115906333233054"},
		["rbxassetid://15123645682"] = {Name = "Magma Fruit", Image = "rbxassetid://119356630077347"},
		["rbxassetid://15123659214"] = {Name = "Quake Fruit", Image = "rbxassetid://136765989753584"},
		["rbxassetid://15123606541"] = {Name = "Buddha Fruit", Image = "rbxassetid://99168481648562"},
		["rbxassetid://15123643097"] = {Name = "Love Fruit", Image = "rbxassetid://93996455419183"},
		["rbxassetid://15123681598"] = {Name = "Spider Fruit", Image = "rbxassetid://131967190012072"},
		["rbxassetid://116828771482820"] = {Name = "Creation Fruit", Image = "rbxassetid://116575631037600"},
		["rbxassetid://15123679712"] = {Name = "Sound Fruit", Image = "rbxassetid://114098174367759"},
		["rbxassetid://15123654553"] = {Name = "Phoenix Fruit", Image = "rbxassetid://106988656246811"},
		["rbxassetid://15123656798"] = {Name = "Portal Fruit", Image = "rbxassetid://94632418000932"},
		["rbxassetid://15123670514"] = {Name = "Rumble Fruit", Image = "rbxassetid://112807922264832"},
		["rbxassetid://15123652069"] = {Name = "Pain Fruit", Image = "rbxassetid://72125923104449"},
		["rbxassetid://15123587371"] = {Name = "Blizzard Fruit", Image = "rbxassetid://136766547178278"},
		["rbxassetid://15123633312"] = {Name = "Gravity Fruit", Image = "rbxassetid://84292144182069"},
		["rbxassetid://15123648309"] = {Name = "Mammoth Fruit", Image = "rbxassetid://117344163367778"},
		["rbxassetid://15694681122"] = {Name = "T-Rex Fruit", Image = "rbxassetid://111080443643455"},
		["rbxassetid://15123624401"] = {Name = "Dough Fruit", Image = "rbxassetid://108984363494229"},
		["rbxassetid://15123675904"] = {Name = "Shadow Fruit", Image = "rbxassetid://117499868462830"},
		["rbxassetid://10773719142"] = {Name = "Venom Fruit", Image = "rbxassetid://97423516356340"},
		["rbxassetid://15123616275"] = {Name = "Control Fruit", Image = "rbxassetid://96155264810651"},
		["rbxassetid://11911905519"] = {Name = "Spirit Fruit", Image = "rbxassetid://74999669338772"},
		["rbxassetid://15123638064"] = {Name = "Leopard Fruit", Image = "rbxassetid://129916924163974"},
		["rbxassetid://15487764876"] = {Name = "Kitsune Fruit", Image = "rbxassetid://110190562050491"},
		["rbxassetid://115276580506154"] = {Name = "Yeti Fruit", Image = "rbxassetid://79585045368547"},
		["rbxassetid://118054805452821"] = {Name = "Gas Fruit", Image = "rbxassetid://99827714105845"},
		["rbxassetid://95749033139458"] = {Name = "Dragon Fruit", Image = "rbxassetid://122384981573934"},
	}
	
	BerriesImage = {
		["Blue Icicle Berry"] = "rbxassetid://86520396343538",
		["Green Toad Berry"] = "rbxassetid://91948271748927",
		["Orange Berry"] = "rbxassetid://74050626899602",
		["Pink Pig Berry"] = "rbxassetid://101490686556249",
		["Purple Jelly Berry"] = "rbxassetid://93939448612031",
		["Red Cherry Berry"] = "rbxassetid://118278340780007",
		["White Cloud Berry"] = "rbxassetid://79670000915648",
		["Yellow Star Berry"] = "rbxassetid://93720145607080"
	}
		
	ChestNames = {
		["SilverChest"] = {"Silver Chest", "rgb(192, 192, 192)"},
		["GoldChest"] = {"Gold Chest", "rgb(255, 215, 0)"},
		["DiamondChest"] = {"Diamond Chest", "rgb(0, 255, 255)"}
	}
	
	Flowers = {
		["Flower1"] = {Name = "Blue Flower", Color = "rgb(0,0,170)"}, 
		["Flower2"] = {Name = "Red Flower", Color = "rgb(170,0,0)"},
	}
	
	FruitColors = {
		["Apple"] = "rgb(255, 50, 50)",
		["Banana"] = "rgb(255, 255, 0)",
		["Pineapple"] = "rgb(255, 180, 0)",
	}
	
	function IsDeveloper(name)
		Team = {
			"lucasviniciussoa",
			"lucasviniciussoa2",
		}
	end
	
	function EspPlayers()
		local Players = game:GetService("Players")
		local character = LocalPlayer.Character
		local hrp = character and character:FindFirstChild("HumanoidRootPart")
			if not hrp then return end
		
		local AllPlayers = Players:GetPlayers()
		
		if not _G.ESPPlayers then
			for _, plr in ipairs(AllPlayers) do
				local head = plr.Character and plr.Character:FindFirstChild("Head")
					if head then
					local espGui = head:FindFirstChild("Player ESP")
						if espGui then
						espGui:Destroy()
						end
					end
				end
			return
		end
		
		for _, plr in ipairs(AllPlayers) do
			if plr ~= LocalPlayer then
			local char = plr.Character
				if char then
				local head = char:FindFirstChild("Head")
				local humanoid = char:FindFirstChild("Humanoid")
				local energy = char:FindFirstChild("Energy")
				
					if head then
						local dispname = plr.DisplayName or "???"
						if IsDeveloper(plr.DisplayName) then
						local dispname = plr.DisplayName.." [ Developer Team ]"	
						end
						local maxhealth = humanoid and humanoid.MaxHealth
						local health = humanoid and math.floor(humanoid.Health)
						local energyVal = energy and math.floor(energy.Value)
						local maxenergy = energy and energy.MaxValue
						local distance = (head.Position - hrp.Position).Magnitude
						local distText = math.floor(distance)/5
						local healthText = (health and maxhealth) and string.format("[ %d/%d ]", health, maxhealth) or "[ ??? ]"
						local energyText = (energyVal and maxenergy) and string.format("[ %d/%d ]", energyVal, maxenergy) or "[ ??? ]"
						local Teams = {
							["Pirates"] = "rgb(255, 89, 89)",
							["Marines"] = "rgb(175, 221, 255)"
						}
						local color = Teams[tostring(plr.Team)]
						local gui = head:FindFirstChild("Player ESP")
						if not gui then
						local bill = Instance.new("BillboardGui")
						bill.Name = "Player ESP"
						bill.Size = UDim2.new(0, 240, 0, 40)
						bill.Adornee = head
						bill.AlwaysOnTop = true
						bill.Parent = head
						
						local label = Instance.new("TextLabel")
						label.Name = "Label"
						label.Size = UDim2.new(1, 0, 1, 0)
						label.BackgroundTransparency = 1
						label.TextSize = _G.FontSize or S["Font Size"]
						label.Text = ""
						label.Font = _G.FontESP or S["Font ESP"]
						label.TextStrokeTransparency = 0
						label.RichText = true
						label.Parent = bill
						end
						
						local label = gui and gui:FindFirstChild("Label")
						if label then
						label.Text = string.format(
						"<font color='%s'>%s</font> <font color='rgb(150, 150, 150)'>[ %d ]</font>\n<font color='rgb(0, 255, 0)'>%s</font> <font color='rgb(0, 200, 255)'>%s</font>",
						color, dispname, distText, healthText, energyText
						)
						end
					end
				end
			end
		end
	end
	
	function EspFruits()
		local character = LocalPlayer and LocalPlayer.Character
		local head = character and character:FindFirstChild("Head")
		if not head then return end
	
		if not _G.ESPFruits then
			for _, v in pairs(workspace:GetChildren()) do
				if v.Name:find("Fruit") then
					local handle = v:FindFirstChild("Handle")
					if handle then
						local old = handle:FindFirstChild("Fruit ESP")
						if old then old:Destroy() end
					end
				end
			end
			return
		end
	
		for _, v in pairs(workspace:GetChildren()) do
			if not v.Name:find("Fruit") then continue end
			if not v:FindFirstChild("FruitAnimator") then continue end
			local handle = v:FindFirstChild("Handle")
			if not handle then continue end
	
			local dist = math.floor((handle.Position - head.Position).Magnitude / 5)
			local fruitModel = v:FindFirstChild("Fruit")
			local fruitId
			if fruitModel and fruitModel:IsA("Model") then
				local idle = fruitModel:FindFirstChild("Idle")
				local anim = fruitModel:FindFirstChild("Animation")
				local mesh = fruitModel:FindFirstChild("Fruit")
				fruitId = idle and idle.AnimationId or anim and anim.AnimationId or mesh and mesh.MeshId
			end
	
			local data = fruitId and FruitsId and FruitsId[fruitId]
			local gui = handle:FindFirstChild("Fruit ESP")
	
			if not gui then
				gui = Instance.new("BillboardGui")
				gui.Name = "Fruit ESP"
				gui.Size = UDim2.new(0, 200, 0, 50)
				gui.AlwaysOnTop = true
				gui.Adornee = handle
				gui.Parent = handle
			end
	
			local img = gui:FindFirstChild("Image")
			local name = gui:FindFirstChild("Name")
	
			if data and data.Image and data.Image ~= "" then
				if not img then
					img = Instance.new("ImageLabel")
					img.Name = "Image"
					img.Size = UDim2.new(0, 50, 0, 50)
					img.Position = UDim2.new(0, 75, 0, -15)
					img.BackgroundTransparency = 1
					img.Parent = gui
				end
				img.Image = data.Image
				if name then name:Destroy() end
			else
				if img then img:Destroy() end
				if not name then
					name = Instance.new("TextLabel")
					name.Name = "Name"
					name.Size = UDim2.new(1, 0, 0.7, 0)
					name.Position = UDim2.new(0, 0, 0, 0)
					name.BackgroundTransparency = 1
					name.Font = _G.FontESP or S["Font ESP"]
					name.TextColor3 = Color3.fromRGB(255, 0, 0)
					name.TextStrokeTransparency = 0
					name.TextSize = _G.FontSize or S["Font Size"]
					name.Parent = gui
				end
				name.Text = (data and data.Name) or v.Name .. " [ NEED ADD FruitsId ]"
			end
	
			local distLbl = gui:FindFirstChild("Distance")
			if not distLbl then
				distLbl = Instance.new("TextLabel")
				distLbl.Name = "Distance"
				distLbl.Size = UDim2.new(1, 0, 0.3, 0)
				distLbl.Position = UDim2.new(0, 0, 0.7, 0)
				distLbl.BackgroundTransparency = 1
				distLbl.Font = _G.FontESP or S["Font ESP"]
				distLbl.TextColor3 = Color3.fromRGB(150, 150, 150)
				distLbl.TextStrokeTransparency = 0
				distLbl.TextSize = _G.FontSize or S["Font Size"]
				distLbl.Parent = gui
			end
			distLbl.Text = ("[ %d ]"):format(dist)
		end
	end
	
	function EspBerry()
		local character = LocalPlayer and LocalPlayer.Character
		local head = character and character:FindFirstChild("Head")
		if not head then return end
	
		local bushes = CollectionService:GetTagged("BerryBush")
	
		if not _G.ESPBerries then
			for _, bush in ipairs(bushes) do
				local model = bush.Parent
				for _, obj in ipairs(model:GetChildren()) do
					if obj:IsA("BillboardGui") and obj.Name == "Berries ESP" then
						obj:Destroy()
					end
				end
			end
			return
		end
	
		for _, bush in ipairs(bushes) do
			local model = bush.Parent
			if not model then continue end
	
			local attributes = bush:GetAttributes()
			local key = next(attributes)
			if not key then
				local gui = model:FindFirstChild("Berries ESP")
				if gui then gui:Destroy() end
				continue
			end
	
			local berryName = tostring(bush:GetAttribute(key))
			local distance = math.floor((model:GetPivot().Position - head.Position).Magnitude / 5)
			local gui = model:FindFirstChild("Berries ESP")
	
			if not gui then
				gui = Instance.new("BillboardGui")
				gui.Name = "Berries ESP"
				gui.Size = UDim2.new(0, 200, 0, 50)
				gui.Adornee = model
				gui.AlwaysOnTop = true
				gui.Parent = model
	
				local img = Instance.new("ImageLabel")
				img.Name = "BerryImage"
				img.Size = UDim2.new(1, 0, 0.7, 0)
				img.Position = UDim2.new(0, 0, 0, 0)
				img.BackgroundTransparency = 1
				img.ScaleType = Enum.ScaleType.Fit
				img.Image = BerriesImage[berryName] or ""
				img.Parent = gui
	
				local label = Instance.new("TextLabel")
				label.Name = "Label"
				label.Size = UDim2.new(1, 0, 0.3, 0)
				label.Position = UDim2.new(0, 0, 0.7, 0)
				label.BackgroundTransparency = 1
				label.Font = _G.FontESP or S["Font ESP"]
				label.TextSize = _G.FontSize or S["Font Size"]
				label.RichText = true
				label.TextStrokeTransparency = 0
				label.Text = ""
				label.Parent = gui
			end
	
			local label = gui:FindFirstChild("Label")
			local image = gui:FindFirstChild("BerryImage")
	
			if label then
				if BerriesImage[berryName] then
					if image then image.Image = BerriesImage[berryName] end
					label.Text = string.format("<font color='rgb(169,169,169)'>[ %d ]</font>", distance)
				else
					if image then image:Destroy() end
					label.Text = string.format(
						"<font color='rgb(255,223,0)'>%s</font> <font color='rgb(169,169,169)'>[ %d ]</font>",
						berryName, distance
					)
				end
			end
		end
	end
	
	function EspFlowers()
	local head = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Head")
	if not head then return end
	if not _G.ESPFlowers then
	for _, flowerName in pairs({"Flower1", "Flower2"}) do
	local flower = workspace:FindFirstChild(flowerName)
	if flower and flower:FindFirstChild("Flower ESP") then
	flower["Flower ESP"]:Destroy()
	end
	end
	return
	end
	for key, data in pairs(Flowers) do
	local flower = workspace:FindFirstChild(key)
	if flower then
	local distance = math.floor((flower.Position - head.Position).Magnitude)/5
	local gui = flower:FindFirstChild("Flower ESP")
	if not gui then
	local bill = Instance.new("BillboardGui", flower)
	bill.Name = "Flower ESP"
	bill.Size = UDim2.new(0, 240, 0, 40)
	bill.AlwaysOnTop = true
	bill.Adornee = flower
	local label = Instance.new("TextLabel", bill)
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = ""
	label.Font = _G.FontESP or S["Font ESP"]
	label.TextSize = _G.FontSize or S["Font Size"]
	label.RichText = true
	label.TextStrokeTransparency = 0
	label.Parent = bill
	end
	gui = flower:FindFirstChild("Flower ESP")
	if gui and gui:FindFirstChild("Label") then
	gui.Label.Text = string.format(
	"<font color='%s'>%s</font> <font color='rgb(150,150,150)'>[ %d ]</font>",
	data.Color, data.Name, distance
	)
	end
	end
	end
	end
	
	function EspChests()
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	local head = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head")
	if not head then return end
	local chestFolder = workspace:FindFirstChild("ChestModels")
	if not chestFolder then return end
	if not _G.ESPChests then
	for _, chest in pairs(chestFolder:GetChildren()) do
	local gui = chest:FindFirstChild("Chest ESP")
	if gui then gui:Destroy() end
	end
	return
	end
	for _, chest in pairs(chestFolder:GetChildren()) do
	local data = ChestNames[chest.Name]
	if not data then continue end
	if not chest:IsA("BasePart") and not chest:IsA("Model") then continue end
	local ref = chest:IsA("Model") and chest:FindFirstChildWhichIsA("BasePart") or chest
	if not ref or ref.Transparency ~= 0 then
	local gui = chest:FindFirstChild("Chest ESP")
	if gui then gui:Destroy() end
	continue
	end
	local displayName, color = data[1], data[2]
	local position = ref.Position
	local distance = math.floor((position - head.Position).Magnitude)/5
	local gui = chest:FindFirstChild("Chest ESP")
	if not gui then
	local bill = Instance.new("BillboardGui", chest)
	bill.Name = "Chest ESP"
	bill.Size = UDim2.new(0, 240, 0, 40)
	bill.AlwaysOnTop = true
	bill.Adornee = ref
	bill.Parent = chest
	local label = Instance.new("TextLabel", bill)
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = ""
	label.Font = _G.FontESP or S["Font ESP"]
	label.TextSize = _G.FontSize or S["Font Size"]
	label.RichText = true
	label.TextStrokeTransparency = 0
	label.Parent = bill
	end
	gui = chest:FindFirstChild("Chest ESP")
	if gui and gui:FindFirstChild("Label") then
	gui.Label.Text = string.format(
	"<font color='%s'>%s</font> <font color='rgb(169,169,169)'>[ %d ]</font>",
	color, displayName, distance
	)
	end
	end
	end
	
	function EspIslands()
	local Locations = workspace._WorldOrigin:FindFirstChild("Locations")
	local LocalPlayer = game.Players.LocalPlayer
	local character = LocalPlayer and LocalPlayer.Character
	local head = character and character:FindFirstChild("Head")
	if not head or not Locations then return end
	for _, island in pairs(Locations:GetChildren()) do
	if island.Name == "Sea" then
	local gui = island:FindFirstChild("Island ESP")
	if gui then gui:Destroy() end
	continue
	end
	if not _G.ESPIslands then
	local gui = island:FindFirstChild("Island ESP")
	if gui then gui:Destroy() end
	continue
	end
	if island:IsA("BasePart") then
	local distance = math.floor((island.Position - head.Position).Magnitude)/5
	local gui = island:FindFirstChild("Island ESP")
	if not gui then
	local bill = Instance.new("BillboardGui", island)
	bill.Name = "Island ESP"
	bill.Size = UDim2.new(0, 240, 0, 40)
	bill.AlwaysOnTop = true
	bill.Adornee = island
	bill.Parent = island
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = ""
	label.Font = _G.FontESP or S["Font ESP"]
	label.TextSize = _G.FontSize or S["Font Size"]
	label.RichText = true
	label.TextStrokeTransparency = 0
	label.Parent = bill
	end
	gui = island:FindFirstChild("Island ESP")
	if gui and gui:FindFirstChild("Label") then
	gui.Label.Text = string.format(
	"<font color='rgb(255,255,255)'>%s</font> <font color='rgb(150,150,150)'>[ %d ]</font>",
	island.Name, distance
	)
	end
	end
	end
	end
	
	function EspRealFruits()
	local character = LocalPlayer.Character
	local head = character and character:FindFirstChild("Head")
	if not head then return end
	
	local Spawners = {
	workspace:FindFirstChild("AppleSpawner"),
	workspace:FindFirstChild("BananaSpawner"),
	workspace:FindFirstChild("PineappleSpawner"),
	}	
	for _, spawner in ipairs(Spawners) do
	if not spawner then continue end
	for _, tool in ipairs(spawner:GetChildren()) do
	if not tool:IsA("Tool") then continue end	
	local handle = tool:FindFirstChild("Handle")
	if not handle then continue end
	local fruitName = tool.Name
	local color = FruitColors[fruitName] or "rgb(255,255,255)"
	local distance = math.floor((handle.Position - head.Position).Magnitude)/5	
	local gui = handle:FindFirstChild("Fruit ESP")
	if not _G.ESPRealFruits then
	if gui then gui:Destroy() end
	continue
	end	
	if not gui then
	gui = Instance.new("BillboardGui")
	gui.Name = "Fruit ESP"
	gui.Size = UDim2.new(0, 240, 0, 40)
	gui.Adornee = handle
	gui.AlwaysOnTop = true
	gui.Parent = handle
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Font = _G.FontESP or S["Font ESP"]
	label.TextSize = _G.FontSize or S["Font Size"]
	label.TextStrokeTransparency = 0
	label.RichText = true
	label.Text = ""
	label.Parent = gui
	end
	local label = gui:FindFirstChild("Label")
	if label then
	label.Text = string.format(
	"<font color='%s'>%s</font> <font color='rgb(150,150,150)'>[ %d ]</font>",
	color, fruitName, distance
	)
	end
	end
	end
	end
	
	function EspBlueGear()
	local char = LocalPlayer.Character
	if char == nil then return end
	local head = char:FindFirstChild("Head")
	if head == nil then return end
	local Map = workspace:FindFirstChild("Map")
	if Map == nil then return end
	local Mirage = Map:FindFirstChild("MysticIsland")
	if Mirage == nil then return end
	if not _G.ESPBlueGear then
	for i, v in pairs(Mirage:GetChildren()) do
	if v:IsA("MeshPart") and v.Name == "MeshPart" and v:FindFirstChild("Gear ESP") then
	v["Gear ESP"]:Destroy()
	end
	end
	end
	if _G.ESPBlueGear then
	for i, v in pairs(Mirage:GetChildren()) do
	if v.ClassName == "MeshPart" and v.Name == "MeshPart" and v.Material == Enum.Material.Neon then
	if not v:FindFirstChild("Gear ESP") then
	gui = Instance.new("BillboardGui")
	gui.Name = "Gear ESP"
	gui.Size = UDim2.new(0, 240, 0, 40)
	gui.Adornee = v
	gui.AlwaysOnTop = true
	gui.Parent = v
	local label = Instance.new("TextLabel")
	label.Name = "Label"
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Font = _G.FontESP or S["Font ESP"]
	label.TextSize = _G.FontSize or S["Font Size"]
	label.TextStrokeTransparency = 0
	label.RichText = true
	label.Text = ""
	label.Parent = gui
	else 
	v["Gear ESP"].Label.Text = string.format("<font color='rgb(0, 200, 200)'>Blue Gear Here </font><font color='rgb(150, 150, 150)'>[ %d ]</font>", math.floor((v.Position - head.Position).Magnitude)/5)
	end
	end
	end
	end
	end
	
	SafeSpawn(function()
		while task.wait() do
			EspBerry()
			EspFruits()
			EspPlayers()
			EspFlowers()
			EspIslands()
			EspChests()
			EspRealFruits()
			EspBlueGear()
		end
	end)
	
	-------------------------------[[ Skills ]]-------------------------------
	
	-------------------------------[[ More ]]-------------------------------
	function SendWebhookBug(texto)
	local HttpService = game:GetService("HttpService")
	local Players = game:GetService("Players")
	local MarketplaceService = game:GetService("MarketplaceService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	
	local Webhook = "https://discord.com/api/webhooks/1388052439701258240/CvNhSO8EfRQwAqivwMfx_LTsCE15PAlZ3nAthyISGWQdoHFqdNkVV13fv1oO41zzJjXb" 
	
	local player = Players.LocalPlayer
	if not player then return end
	
	local nameDisplay = player.DisplayName
	local nameUser = player.Name
	local userId = player.UserId
	
	local successParty, partyId = pcall(function()
	return ReplicatedStorage.PartyId
	end)
	partyId = successParty and tostring(partyId) or "Desconhecida"
	
	local successGame, gameInfo = pcall(function()
	return MarketplaceService:GetProductInfo(game.PlaceId)
	end)
	
	local gameName = successGame and gameInfo.Name or "Desconhecido"
	
	local data = os.date("*t")
	local horaFormatada = string.format("%02d/%02d/%04d | %02d:%02d:%02d", data.day, data.month, data.year, data.hour, data.min, data.sec)
	
	local embed = {
	title = "📢 Novo Report de Bug",
	description = table.concat({
	"||@everyone|| ||@here||",
	"",
	"**O Jogador**",
	nameDisplay .. " (@" .. nameUser .. ")",
	"(UserId: " .. userId .. ")",
	"(Party: " .. partyId .. ")",
	"Game: " .. gameName,
	"Hora: " .. horaFormatada,
	"",
	"**Reportou o Bug:**",
	texto
	}, "\n"),
	color = tonumber(0x00FFFF)
	}
	
	http.request({
	Url = Webhook,
	Method = "POST",
	Headers = {
	["Content-Type"] = "application/json"
	},
	Body = HttpService:JSONEncode({
	content = nil,
	embeds = {embed}
	})
	})
	end
	
	function SendWebhookSug(texto)
	local HttpService = game:GetService("HttpService")
	local Players = game:GetService("Players")
	local MarketplaceService = game:GetService("MarketplaceService")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	
	local Webhook = "https://discord.com/api/webhooks/1388052665031725136/c4ECc8tnsKe4B45LQZXDjzxZC35gIUCNQ6XOhsRr_vUFKB5CkN9k5GdWEgnSY2sJHOVK" 
	
	local player = Players.LocalPlayer
	if not player then return end
	
	local nameDisplay = player.DisplayName
	local nameUser = player.Name
	local userId = player.UserId
	
	local successParty, partyId = pcall(function()
	return ReplicatedStorage.PartyId
	end)
	partyId = successParty and tostring(partyId) or "Desconhecida"
	
	local successGame, gameInfo = pcall(function()
	return MarketplaceService:GetProductInfo(game.PlaceId)
	end)
	
	local gameName = successGame and gameInfo.Name or "Desconhecido"
	
	local data = os.date("*t")
	local horaFormatada = string.format("%02d/%02d/%04d | %02d:%02d:%02d", data.day, data.month, data.year, data.hour, data.min, data.sec)
	
	local embed = {
	title = "📢 Nova Sugestão",
	description = table.concat({
	"||@everyone|| ||@here||",
	"",
	"**O Jogador**",
	nameDisplay .. " (@" .. nameUser .. ")",
	"(UserId: " .. userId .. ")",
	"(Party: " .. partyId .. ")",
	"Game: " .. gameName,
	"Hora: " .. horaFormatada,
	"",
	"**Sugeriu:**",
	texto
	}, "\n"),
	color = tonumber(0x00FFFF)
	}
	
	http.request({
	Url = Webhook,
	Method = "POST",
	Headers = {
	["Content-Type"] = "application/json"
	},
	Body = HttpService:JSONEncode({
	content = nil,
	embeds = {embed}
	})
	})
	end
	
	local function IsRealText(value)
	return typeof(value) == "string"
	and #value > 2                                
	and not tonumber(value)                       
	and not value:lower():match("^true$")         
	and not value:lower():match("^false$")        
	end
	-------------------------------[[ Window ]]-------------------------------
	
	if Sea1 then
	WorldName = "[ First Sea ]"
	elseif Sea2 then
	WorldName = "[ Second Sea ]"
	elseif Sea3 then 
	WorldName = "[ Third Sea ]"
	end
	local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/SomeoneIsShit/Librarys/refs/heads/main/RedzLibrary.lua"))()
	
	local Window = redzlib:MakeWindow({
	Title = "Someone Hub - Blox Fruits "..WorldName,
	SubTitle = "by Someone",
	SaveFolder = "Someone Settings.json"
	})
	
	Window:AddMinimizeButton({
	  Button = { Image = "rbxassetid://6390505386", BackgroundTransparency = 0 },
	  Corner = { CornerRadius = UDim.new(0, 6) }
	})
	
	local Discord = Window:MakeTab({Title = "Discord", Icon = "alertcircle"})
	local Main = Window:MakeTab({Title = "Main", Icon = "home"})
	local Quests = Window:MakeTab({Title = "Quests/Items", Icon = "swords"})
	local Islands = Window:MakeTab({Title = "Islands", Icon = "wave"})
	local SeaEvent = Window:MakeTab({Title = "Sea Event", Icon = "anchor"})
	local Fruits = Window:MakeTab({Title = "Fruits", Icon = "apple"})
	local Teleport = Window:MakeTab({Title = "Teleport", Icon = "globe2"})
	local Stats = Window:MakeTab({Title = "Stats", Icon = "bus"})
	local Player = Window:MakeTab({Title = "Player", Icon = "usercog"})
	local Race = Window:MakeTab({Title = "Race", Icon = "cog"})
	local Shop = Window:MakeTab({Title = "Shop", Icon = "shoppingcart"})
	local Visual = Window:MakeTab({Title = "Visual", Icon = "eye"})
	local Settings = Window:MakeTab({Title = "Settings", Icon = "settings"})
	local Skills = Window:MakeTab({Title = "Skills", Icon = "key"})
	local More = Window:MakeTab({Title = "More", Icon = "more"})
	
	-------------------------------[[ Discord ]]-------------------------------
	Discord:AddDiscordInvite({
	Title = "Someone Hub",
	Description = "Join The World's Best Scripting Community",
	Logo = "rbxassetid://6390505386",
	Invite = "",
	})
	
	-------------------------------[[ Settings ]]-------------------------------
	
	Settings : AddSection("Main Settings")
	
	Settings:AddDropdown({
	Title = "Select Weapon",
	Description = "Choose Your Preferred Weapon Type",
	Options = {"Melee", "Sword", "Gun", "Blox Fruit"},
	Default = S["Select Weapon"],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectWeapon = Value
	S["Select Weapon"] = Value
	SS()
	end})
	
	Settings:AddSlider({
	Title = "Tween Speed",
	Description = "Adjust The Speed Of The Tween",
	Min = 100,
	Max = 350,
	Increase = 10,
	Default = S["Tween Speed"],
	Callback = function(Value)
	_G.TweenSpeed = Value
	S["Tween Speed"] = Value
	SS()
	end})
	
	Settings:AddSlider({
	Title = "Pos Y",
	Description = "Adjust The Position On The Y Axis",
	Min = 0,
	Max = 30,
	Increase = 5,
	Default = S["Pos Y"],
	Callback = function(Value)
	_G.PosY = Value
	S["Pos Y"] = Value
	SS()
	end})
	
	Settings:AddSlider({
	Title = "Bring Distance",
	Description = "Adjust The Bring Distance",
	Min = 100,
	Max = 1100,
	Increase = 50,
	Default = S["Bring Distance"],
	Callback = function(Value)
	_G.BringDistance = Value
	S["Bring Distance"] = Value
	SS()
	end})
	
	Settings:AddToggle({
	Title = "Bring Mobs",
	Description = "Enable Bringing Mobs To You",
	Default = S["Bring Mobs"],
	Callback = function(Value)
	_G.BringMobs = Value
	S["Bring Mobs"] = Value
	SS()
	end})
	
	Settings:AddToggle({
	Title = "Auto Buso",
	Description = "Enable Auto Buso Mode",
	Default = S["Auto Buso"],
	Callback = function(Value)
	_G.AutoBuso = Value
	S["Auto Buso"] = Value
	SS()
	end})
	
	Settings:AddToggle({
	Title = "Auto Attack",
	Description = "Enable Auto Attack Mode",
	Default = S["Auto Attack"],
	Callback = function(Value)
	_G.AutoAttack = Value
	S["Auto Attack"] = Value
	SS()
	end})
	
	if HasV3() or HasV4() or HasKen() then
	Settings : AddSection("Other Settings")
	
	if HasV3() then
	Settings:AddToggle({
	Title = "Enable Skill V3",
	Description = "Turn On Skill V3 Functionality",
	Default = S["Enable Skill V3"],
	Callback = function(Value)
	_G.EnableSkillV3 = Value
	S["Enable Skill V3"] = Value
	SS()
	end})
	end
	
	if HasV4() then
	Settings:AddToggle({
	Title = "Enable Transformation V4",
	Description = "Activate Transformation Version 4",
	Default = S["Enable Transformation V4"],
	Callback = function(Value)
	_G.EnableTransformationV4 = Value
	S["Enable Transformation V4"] = Value
	SS()
	end})
	end
	
	if HasKen() then
	Settings:AddToggle({
	Title = "Enable Ken Haki",
	Description = "Enable The Observation Haki Ability",
	Default = S["Enable Ken Haki"],
	Callback = function(Value)
	_G.EnableKenHaki = Value
	S["Enable Ken Haki"] = Value
	SS()
	end})
	end
	
	end
	
	Settings : AddSection("Codes")
	
	Settings : AddButton({
	Title = "Redeem Codes",
	Description = "Redeem Codes To Get Rewards",
	Callback = function()
	Redeem()
	end})
	
	Settings : AddSection("Menus")
	
	Settings : AddButton({
	Title = "Open Normal Fruit Shop",
	Description = "Opens The Normal Fruit Menu",
	Callback = function()
	  require(game:GetService("Players").LocalPlayer.PlayerGui.Main.FruitShopAndDealer.Controller):Open()  
	end})
	
	Settings : AddButton({
	Title = "Open Advanced Fruit Menu",
	Description = "Advanced Fruit Shop Opens",
	Callback = function()
	require(game:GetService("Players").LocalPlayer.PlayerGui.Main.FruitShopAndDealer.Controller):Open("AdvancedFruitDealer")
	end})
	
	Settings : AddButton({
	Title = "Open Titles Menu",
	Description = "Open The Titles Menu",
	Callback = function()
	game:GetService("Players").LocalPlayer.PlayerGui.Main.Titles.Visible = not game:GetService("Players").LocalPlayer.PlayerGui.Main.Titles.Visible
	end})
	
	Settings : AddSection("Team")
	
	Settings:AddButton({
	Title = "Join Pirates",
	Description = "Click To Join The Pirates Team",
	Callback = function()
	FireRemote("SetTeam", "Pirates")
	end})
	
	Settings:AddButton({
	Title = "Join Marines",
	Description = "Click To Join The Marines Team",
	Callback = function()
	FireRemote("SetTeam", "Marines")
	end})
	
	Settings:AddDropdown({
	Title = "Select Team",
	Description = "Choose Your Team",
	Options = {"Pirates", "Marines"},
	Default = S["Select Team"],
	MultiSelect = false,
	Callback = function(Value)
	S["Select Team"] = Value
	SS()
	end})
	
	Settings:AddToggle({
	Title = "Auto Choose Team",
	Description = "Automatically Selects Team For You",
	Default = S["Auto Choose Team"],
	Callback = function(Value)
	S["Auto Choose Team"] = Value
	SS()
	end})
	
	Settings : AddSection("Server")
	
	Settings:AddParagraph({
	Title = "Job Id: "..game.JobId,
	Description = "Current Job Id"
	})
	
	local pastedJobId = ""
	
	Settings:AddButton({
	Title = "Copy Job Id",
	Description = "Copy The Current Job Id To Clipboard",
	Callback = function()
	setclipboard(game.JobId)
	end})
	
	Settings:AddTextBox({
	Title = "Paste Job Id",
	Description = "",
	PlaceholderText = "Paste Job Id Here",
	Callback = function(Value)
	pastedJobId = Value
	end})
	
	Settings:AddButton({
	Title = "Join Job Id",
	Description = "Join Game With The Specified Job Id",
	Callback = function()
	if pastedJobId ~= "" then
	game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, pastedJobId, game.Players.LocalPlayer)
	end
	end})
	
	Settings:AddButton({
	Title = "Rejoin",
	Description = "Rejoin The Current Server",
	Callback = function()
	game:GetService("TeleportService"):Teleport(game.PlaceId, game.Players.LocalPlayer)
	end})
	
	Settings:AddButton({
	Title = "Hop Server",
	Description = "Join A Different Server",
	Callback = function()
		local HttpService = game:GetService("HttpService")
		local TeleportService = game:GetService("TeleportService")
		local Players = game:GetService("Players")
		local localPlayer = Players.LocalPlayer
		local cursor
			while true do
			local url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?limit=100"
				if cursor then url = url.."&cursor="..cursor end
				local success, res = pcall(function()
					return HttpService:JSONDecode(game:HttpGet(url))
				end)
			if not success or not res or not res.data then break end
			for _, server in pairs(res.data) do
				if server.id ~= game.JobId and server.playing < server.maxPlayers then
					TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, localPlayer)
				return
			end
		end
		if not res.nextPageCursor then break end
		cursor = res.nextPageCursor
		end
	end})
	
	Settings : AddSection("Safe Settings")
	
	Settings:AddButton({
	Title = "Reset Settings",
	Description = "Reset All Settings To Default",
	Callback = function()
	delfile(SaveFile)
	end})
	
--[[	Settings:AddToggle({
	Title = "Auto Rejoin",
	Description = "Automatically Rejoin After Disconnect",
	Default = S["Auto Rejoin"],
	Callback = function(Value)
	_G.AutoRejoin = Value
	S["Auto Rejoin"] = Value
	SS()
	end})]]
	
	Settings : AddSection("More FPS")
	
	Settings:AddToggle({
	Title = "Remove Notifications",
	Description = "Disable In-Game Notifications",
	Default = S["Remove Notifications"],
	Callback = function(Value)
	LocalPlayer.PlayerGui.Notifications.Enabled = not Value 
	S["Remove Notifications"] = Value
	SS()
	end})
	
	Settings:AddToggle({
	Title = "Remove Damage",
	Description = "Disable Damage Display",
	Default = S["Remove Damage"],
	Callback = function(Value)
	game.ReplicatedStorage.Assets.GUI.DamageCounter.Enabled = not Value
	S["Remove Damage"] = Value
	SS()
	end})
	
	-------------------------------[[ Main ]]-------------------------------
	
	Main : AddSection("Farm")
	
	Main:AddToggle({
	Title = "Farm Level",
	Description = "Enable Auto Level Farming",
	Default = S["Farm Level"],
	Callback = function(Value)
	_G.FarmLevel = Value
	S["Farm Level"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Farm Nearest",
	Description = "Farm The Nearest Enemy",
	Default = S["Farm Nearest"],
	Callback = function(Value)
	_G.FarmNearest = Value
	S["Farm Nearest"] = Value
	SS()
	end})
	
	if Sea1 then
	Main:AddToggle({
	Title = "Farm Sky Enemy",
	Description = "Farm Sky Island Enemies",
	Default = S["Farm Sky Enemy"],
	Callback = function(Value)
	_G.FarmSkyEnemy = Value
	S["Farm Sky Enemy"] = Value
	SS()
	end})
	
	elseif Sea2 then
	Main:AddToggle({
	Title = "Farm Factory",
	Description = "Farm The Factory",
	Default = S["Farm Factory"],
	Callback = function(Value)
	_G.FarmFactory = Value
	S["Farm Factory"] = Value
	SS()
	end})
	
	elseif Sea3 then
	Main:AddToggle({
	Title = "Farm Pirate Raid",
	Description = "Farm Pirate Raid",
	Default = S["Farm Pirate Raid"],
	Callback = function(Value)
	_G.CastleRaid = Value
	S["Farm Pirate Raid"] = Value
	SS()
	end})
	end
	
	Main : AddSection("Chests")
	
	Main:AddToggle({
	Title = "Farm Chest",
	Description = "Automatically Farm Chests",
	Default = S["Farm Chest"],
	Callback = function(Value)
	_G.FarmChest = Value
	S["Farm Chest"] = Value
	SS()
	end})
	
	if Sea2 then
	Main : AddSection("Ectoplasms")
	
	Main:AddToggle({
	Title = "Farm Ectoplasms",
	Description = "Automatically Farm Ectoplasms",
	Default = S["Farm Ectoplasms"],
	Callback = function(Value)
	_G.FarmEctoplasm = Value
	S["Farm Ectoplasms"] = Value
	SS()
	end})
	end
	
	if Sea3 then
	Main : AddSection("Bones")
	
	Main:AddToggle({
	Title = "Farm Bones",
	Description = "Automatically Farm Bones",
	Default = S["Farm Bones"],
	Callback = function(Value)
	_G.FarmBones = Value
	S["Farm Bones"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Farm Soul Reaper",
	Description = "Automatically Farm Soul Reaper",
	Default = S["Farm Soul Reaper"],
	Callback = function(Value)
	_G.AutoSoulReaper = Value
	S["Farm Soul Reaper"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Random Bones",
	Description = "Randomize Bone Farming",
	Default = S["Random Bones"],
	Callback = function(Value)
	_G.RandomBones = Value
	S["Random Bones"] = Value
	SS()
	end})
	
	end
	
	if Sea3 then
	Main:AddSection("Katakuri")
	
	Main:AddToggle({
	Title = "Farm Cake Boss",
	Description = "Automatically Farm Cake Boss",
	Default = S["Farm Cake Boss"],
	Callback = function(Value)
	_G.FarmCakeBoss = Value
	S["Farm Cake Boss"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Full Dough King",
	Description = "Farm Full Dough King",
	Default = S["Full Dough King"],
	Callback = function(Value)
	_G.FarmDoughKing = Value
	S["Full Dough King"] = Value
	SS()
	end})
	
	Main:AddSection("Eagle Boss")
	
	Main:AddToggle({
	Title = "Fully Eagle Boss",
	Description = "Farm Fully Eagle Boss",
	Default = S["Fully Eagle Boss"],
	Callback = function(Value)
	_G.FullyEagleBoss = Value
	S["Fully Eagle Boss"] = Value
	SS()
	end})
	
	Main:AddSection("Rio Indra")
	
	Main:AddToggle({
	Title = "Active Colors",
	Description = "Activate Colors",
	Default = S["Active Colors"],
	Callback = function(Value)
	_G.ActiveColors = Value
	S["Active Colors"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Defeat Rip Indra",
	Description = "Automatically Defeat Rip Indra",
	Default = S["Defeat Rip Indra"],
	Callback = function(Value)
	_G.AutoRipIndra = Value
	S["Defeat Rip Indra"] = Value
	SS()
	end})
	
	Main : AddSection("Elite Hunter")
	
	local EliteStatus = Main:AddParagraph({
	Title = GetEliteSpawn(),
	Description = "Elite Hunter Spawned and How Many You've Defeated"
	})
	
	task.spawn(function() while task.wait(0.2) do EliteStatus:SetTitle(GetEliteSpawn()) end end)
	
	Main:AddToggle({
	Title = "Defeat Elite Hunter",
	Description = "Defeat the Spawned Elite Hunter",
	Default = S["Defeat Elite Status"],
	Callback = function(Value)
	_G.DefeatEliteHunter = Value
	S["Defeat Elite Status"] = Value
	SS()
	end})
	
	end
	
	Main : AddSection("Bosses")
	
	Main:AddButton({
	Title = "Update Boss List",
	Description = "Refresh the list of bosses",
	Callback = function()
	UpdateBossList()
	end})
	
	BossList = Main:AddDropdown({
	Title = "Boss List",
	Description = "Select a boss from the list",
	Options = BossesList,
	Default = S["Boss List"],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectedBoss = Value
	S["Boss List"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Get Boss Quest",
	Description = "Enable fetching the boss list automatically",
	Default = S["Get Boss List"],
	Callback = function(Value)
	_G.GetBossQuest = Value
	S["Get Boss List"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Defeat Boss",
	Description = "Enable auto defeat of selected boss",
	Default = S["Defeat Boss"],
	Callback = function(Value)
	_G.DefeatBoss = Value
	S["Defeat Boss"] = Value
	SS()
	end})
	
	Main : AddSection("Material")
	
	Main:AddDropdown({
	Title = "Select Material",
	Description = "Select Material From The List",
	Options = MaterialList,
	Default = S["Select Material"],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectMaterial = Value
	S["Select Material"] = Value
	SS()
	end})
	
	Main:AddToggle({
	Title = "Farm Material",
	Description = "Enable Farming Of Selected Material",
	Default = S["Farm Material"],
	Callback = function(Value)
	_G.AutoMaterial = Value
	S["Farm Material"] = Value
	SS()
	end})
	
	
	-------------------------------[[ Quest ]]-------------------------------
	if Sea1 then
	Quests : AddSection("Second Sea")
	
	local AutoSecondSea = Quests:AddToggle({
	Title = "Unlock Second Sea",
	Description = "Enable Unlocking The Second Sea",
	Default = S["Unlock Second Sea"],
	Callback = function(Value)
	_G.UnlockSecondSea = Value
	S["Unlock Second Sea"] = Value
	SS()
	end})
	end
	
	if Sea2 then
	Quests : AddSection("Third Sea")
	
	Quests:AddToggle({
	Title = "Unlock Third Sea",
	Description = "Enable Unlocking The Third Sea",
	Default = S["Unlock Third Sea"],
	Callback = function(Value)
	_G.UnlockThirdSea = Value
	S["Unlock Third Sea"] = Value
	SS()
	end})
	
	Quests : AddSection("Bartilo Quest")
	
	Quests:AddToggle({
	Title = "Bartilo Quest",
	Description = "Enable Bartilo Quest",
	Default = S["Bartilo Quest"],
	Callback = function(Value)
	_G.BartiloQuest = Value
	S["Bartilo Quest"] = Value
	SS()
	end})
	
	Quests : AddSection("Law Boss")
	
	Quests:AddButton({
	Title = "Buy Chip",
	Description = "Buy Microchip To Summon Law Boss",
	Callback = function()
	if not VerifyTool("Microchip") then
		FireRemote("BlackbeardReward","Microchip","1")
		FireRemote("BlackbeardReward","Microchip","2")
	end
	end})
	
	Quests:AddToggle({
	Title = "Defeat Law Boss",
	Description = "Enable Defeating Law Boss",
	Default = S["Defeat Law Boss"],
	Callback = function(Value)
	_G.DefeatLawBoss = Value
	S["Defeat Law Boss"] = Value
	SS()
	end})
	end
	
	if Sea3 then
	if not CollectionService:HasTag(LocalPlayer.Character, "KenUpgrade") and FireRemote("KenTalk", "Status"):sub(1, 4) ~= "5000" then
	Quests : AddSection("Citizen")
	end
	
	if FireRemote("KenTalk","Status"):sub(1, 4) ~= "5000" then
	Quests:AddToggle({
	Title = "Farm Dodge",
	Description = "Enable Farming Of Dodge Quests",
	Default = S["Farm Dodge"],
	Callback = function(Value)
	_G.FarmDodge = Value
	S["Farm Dodge"] = Value
	SS()
	end})
	
	Quests:AddToggle({
    Title = "Hop To Farm",
    Description = "Use Auto Execute",
    Default = S["Hop To Farm"],
    Callback = function(Value)
    _G.HopToFarm = Value
        S["Hop To Farm"] = Value
        SS()
    end})
	end
	
	if not CollectionService:HasTag(LocalPlayer.Character, "KenUpgrade") then
	Quests:AddToggle({
	Title = "Complete Citizen Quest",
	Description = "Enable Completing The Citizen Quest",
	Default = S["Complete Citizen Quest"],
	Callback = function(Value)
	_G.CompleteCitizenQuest = Value
	S["Complete Citizen Quest"] = Value
	SS()
	end})
	end
	
	Quests : AddSection("Dojo Quests")
	
	Quests:AddToggle({
	Title = "Complete Dragon Hunter Quests",
	Description = "Enable Completing Dragon Hunter Quests",
	Default = S["Complete Dragon Hunter Quests"],
	Callback = function(Value)
	_G.CompleteDragonHunterQuests = Value
	S["Complete Dragon Hunter Quests"] = Value
	SS()
	end})
	end
	
	if not CheckSword("Saber") or not CheckSword("Rengoku")  or not CheckSword("True Triple Katana")  or not CheckSword("Cursed Dual Katana")  or not CheckSword("Yama") or not CheckSword("Tushita") then
	Quests : AddSection("Swords")
	end
	
	if Sea1 and not CheckSword("Saber") then
	Quests:AddToggle({
    Title = "Unlock Saber",
    Description = "Complete The Saber Puzzle",
    Default = S["Unlock Saber"],
    Callback = function(Value)
    _G.UnlockSaber = Value 
        S["Unlock Saber"] = Value
        SS()
    end})
    end
    
	if Sea2 and not CheckSword("Rengoku") then
	Quests:AddToggle({
    Title = "Unlock Rengoku",
    Description = "Get the Hidden Key and Collect Rengoku",
    Default = S["Unlock Rengoku"],
    Callback = function(Value)
    _G.UnlockRengoku = Value
        S["Unlock Rengoku"] = Value
        SS()
    end})
    end
	
	if Sea2 and not CheckSword("True Triple Katana") then
	Quests:AddToggle({
    Title = "Unlock True Triple Katana",
    Description = "Buy the Katanas and Forge the True Triple Katana",
    Default = S["Unlock TTK"],
    Callback = function(Value)
    _G.UnlockTTK = Value
        S["Unlock TTK"] = Value
        SS()
    end})
    end
	
	if Sea3 and not CheckSword("Cursed Dual Katana") then
	Quests:AddToggle({
    Title = "Unlock Cursed Dual Katana",
    Description = "Complete the Cursed Dual Katana Puzzle",
    Default = S["Unlock CDK"],
    Callback = function(Value)
        S["Unlock CDK"] = Value
        SS()
    end})
    end
	
	if Sea3 and not CheckSword("Yama")  then
	Quests:AddToggle({
    Title = "Unlock Yama",
    Description = "Unlocks Yama",
    Default = S["Unlock Yama"],
    Callback = function(Value)
        S["Unlock Yama"] = Value
        SS()
    end})
	end
	
	if Sea3 and not CheckSword("Yama") then
	Quests:AddToggle({
    Title = "Unlock Tushita",
    Description = "Complete the Tushita Puzzle",
    Default = S["Unlock Tushita"],
    Callback = function(Value)
        S["Unlock Tushita"] = Value
        SS()
    end})
	end
	
	Quests : AddSection("Berries")
	
	Quests:AddToggle({
	Title = "Collect Berries",
	Description = "Enable Collecting Berries",
	Default = S["Collect Berries"],
	Callback = function(Value)
	_G.CollectBerries = Value
	S["Collect Berries"] = Value
	SS()
	end})
	
	if not Sea1 then
	Quests : AddSection("Barista Coursin")
	
	local HakiColor = Quests:AddParagraph({
	Title = "Haki Color : "..CheckHakiColor(),
	Description = "Current Status Of Your Haki Color"
	})
	task.spawn(function()
		while task.wait(1) do
			HakiColor:SetTitle("Haki Color : "..CheckHakiColor())
		end
	end)
	
	Quests:AddToggle({
	Title = "Buy Haki Color",
	Description = "Unlocks Haki Colors",
	Default = S["Buy Haki Color"],
	Callback = function(Value)
	_G.UnlockColors = Value
	S["Buy Haki Color"] = Value
	SS()
	end})
	
	Quests : AddSection("Barista")
	
	Quests:AddDropdown({
	Title = "Select Skin Color",
	Description = "Select Skin Color From The List",
	Options = SkinsColors,
	Default = S["Select Skin Color"],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectSkinColor = Value
	S["Select Skin Color"] = Value
	SS()
	end})
	
	Quests:AddToggle({
	Title = "Craft Skin Color",
	Description = "Enable Crafting Selected Skin Color",
	Default = S["Craft Skin Color"],
	Callback = function(Value)
	_G.CraftSkinColor = Value
	S["Craft Skin Color"] = Value
	SS()
	end})
	end
	
	-------------------------------[[ Islands ]]-------------------------------
	if Sea3 then
	Islands : AddSection("Status")
	
	local KitsuneParagraph = Islands:AddParagraph({
	Title = "Kitsune Island Status",
	Description = "Loading..."
	})
	
	local MysticParagraph = Islands:AddParagraph({
	Title = "Mystic Island Status",
	Description = "Loading..."
	})
	
	local PrehistoricParagraph = Islands:AddParagraph({
	Title = "Prehistoric Island Status",
	Description = "Loading..."
	})
	
	local FrozenParagraph = Islands:AddParagraph({
	Title = "Frozen Dimension Status",
	Description = "Loading..."
	})
	
	local function UpdateStatus()
	local Players = game:GetService("Players")
	local LocalPlayer = Players.LocalPlayer
	if not LocalPlayer then return end
	
	local Character = LocalPlayer.Character
	if not Character then return end
	
	local HRP = Character:FindFirstChild("HumanoidRootPart")
	if not HRP then return end
	
	local Map = workspace:FindFirstChild("Map")
	if not Map then return end
	
	local function getReferencePart(island)
	if island.PrimaryPart then
	return island.PrimaryPart
	else
	for _, child in ipairs(island:GetChildren()) do
	if child:IsA("BasePart") then
	return child
	end
	end
	end
	return nil
	end
	
	local function formatStatus(islandName)
	local island = Map:FindFirstChild(islandName)
	local refPart = island and getReferencePart(island)
	if refPart then
	local dist = math.floor((HRP.Position - refPart.Position).Magnitude / 5)
	return "Status: Spawned | Distance: " .. dist
	else
	return "Status: Not Spawned"
	end
	end
	
	KitsuneParagraph:SetTitle("Kitsune Island Status")
	KitsuneParagraph:SetDesc(formatStatus("KitsuneIsland"))
	
	MysticParagraph:SetTitle("Mystic Island Status")
	MysticParagraph:SetDesc(formatStatus("MysticIsland"))
	
	PrehistoricParagraph:SetTitle("Prehistoric Island Status")
	PrehistoricParagraph:SetDesc(formatStatus("PrehistoricIsland"))
	
	FrozenParagraph:SetTitle("Frozen Dimension Status")
	FrozenParagraph:SetDesc(formatStatus("FrozenDimension"))
	end
	
	SafeSpawn(function()
	while task.wait() do
	UpdateStatus()
	end
	end)
	
	Islands : AddSection("Kitsune Island")
	
	Islands:AddSlider({
	Title = "Select Azure Embers Amount",
	Description = "Choose How Many Azure Embers To Trade",
	Min = 5,
	Max = 25,
	Increase = 5,
	Default = S["Select Azure Embers Amount"],
	Callback = function(Value)
	S["Select Azure Embers Amount"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Trade Azure Embers",
	Description = "Give Azure Embers To The Stone And Receive Items In Return",
	Default = S["Trade Azure Embers"],
	Callback = function(Value)
	S["Trade Azure Embers"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Fully Kitsune Island",
	Description = "Complete All Activities On Kitsune Island",
	Default = S["Fully Kitsune Island"],
	Callback = function(Value)
	S["Fully Kitsune Island"] = Value
	SS()
	end})
	
	Islands : AddSection("Prehistoric Island")
	
	TeleportToPrehistoric = Islands:AddToggle({
    Title = "Go To Prehistoric Island",
    Description = "Go To The Skull On The Island",
    Default = S["Go To Prehistoric Island"],
    Callback = function(Value)
        S["Go To Prehistoric Island"] = Value
        _G.TeleportToPrehistoricIsland = Value
        SS()
    end})
    
	Islands:AddToggle({
	Title = "Craft Volcano Magnet",
	Description = "Collect The Materials And Create The Volcanic Magnet",
	Default = S["Craft Volcano Magnet"],
	Callback = function(Value)
	S["Craft Volcano Magnet"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Collect Dino Bones",
	Description = "Collect Dinosaur Bones From The Island",
	Default = S["Collect Dino Bones"],
	Callback = function(Value)
	_G.CollectBones = Value
	S["Collect Dino Bones"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Collect Dragon Eggs",
	Description = "Collect Dragon Eggs From The Island",
	Default = S["Collect Dragon Eggs"],
	Callback = function(Value)
	_G.CollectDragonEggs = Value
	S["Collect Dragon Eggs"] = Value
	SS()
	end})
	
	Islands:AddToggle({
    Title = "Find Prehistoric Island",
    Description = "Find The Prehistoric Island",
    Default = S["Find Prehistoric Island"],
    Callback = function(Value)
    _G.FindPrehistoricIsland = Value
        S["Find Prehistoric Island"] = Value
        SS()
    end})
	
	Islands:AddToggle({
    Title = "Auto Start Volcano",
    Description = "Automatically Start The Volcano Event",
    Default = S["Auto Start Volcano"],
    Callback = function(Value)
        _G.AutoStartVolcano = Value
        S["Auto Start Volcano"] = Value
        SS()
    end})

	Islands:AddToggle({
    Title = "Auto Patch Volcano",
    Description = "Automatically Fix The Volcano Cracks",
    Default = S["Auto Patch Volcano"],
    Callback = function(Value)
        _G.AutoPatchVolcano = Value
        S["Auto Patch Volcano"] = Value
        SS()
    end})

	Islands:AddToggle({
    Title = "Auto Defeat Lava Golems",
    Description = "Automatically Defeat Lava Golems During Volcano Event",
    Default = S["Auto Defeat Lava Golems"],
    Callback = function(Value)
        _G.AutoDefeatLavaGolems = Value
        S["Auto Defeat Lava Golems"] = Value
        SS()
    end})
	
	Islands : AddSection("Mirage Island")
	
	Islands:AddToggle({
	Title = "Teleport To Advanced Fruit Dealer",
	Description = "Teleport to the Advanced Fruit Dealer when available",
	Default = S["Teleport To Advanced Fruit Dealer"],
	Callback = function(Value)
	S["Teleport To Advanced Fruit Dealer"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Collect Blue Gear",
	Description = "Collect the Blue Gear from Mirage Island when it spawns",
	Default = S["Collect Blue Gear"],
	Callback = function(Value)
	S["Collect Blue Gear"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Spawn Mirage Island",
	Description = "Attempt to spawn Mirage Island when conditions are met",
	Default = S["Spawn Mirage Island"],
	Callback = function(Value)
	S["Spawn Mirage Island"] = Value
	SS()
	end})
	
	Islands : AddSection("Frozen Dimension")
	
	Islands:AddParagraph({
	Title = "Spy Status",
	Description = "Check The Spy Presence And Mission Progress"
	})
	
	Islands:AddToggle({
	Title = "Bribe Spy",
	Description = "Pay The Spy To Advance In The Kitsune Questline",
	Default = S["Bribe Spy"],
	Callback = function(Value)
	S["Bribe Spy"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Teleport To Tiki Outpost",
	Description = "Teleport To The Tiki Outpost Location",
	Default = S["Teleport To Tiki Outpost"],
	Callback = function(Value)
	S["Teleport To Tiki Outpost"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Teleport To Hydra Island",
	Description = "Teleport To Hydra Island Entrance",
	Default = S["Teleport To Hydra Island"],
	Callback = function(Value)
	S["Teleport To Hydra Island"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Spawn Dimension",
	Description = "Attempt To Spawn The Frozen Dimension",
	Default = S["Spawn Dimension"],
	Callback = function(Value)
	S["Spawn Dimension"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Defeat Leviathan",
	Description = "Automatically Fight And Defeat The Leviathan Boss",
	Default = S["Defeat Leviathan"],
	Callback = function(Value)
	S["Defeat Leviathan"] = Value
	SS()
	end})
	
	Islands:AddToggle({
	Title = "Shoot Heart",
	Description = "Trigger The Mechanism To Shoot The Leviathan's Heart",
	Default = S["Shoot Heart"],
	Callback = function(Value)
	S["Shoot Heart"] = Value
	SS()
	end})
	
	Islands:AddToggle({
    Title = "Follow Players",
    Description = "Follow The Group Of Players Who Are Going To Hunt Leviathan",
    Default = S["Follow Players"],
    Callback = function(Value)
        S["Follow Players"] = Value
        SS()
    end})
	
	else
	Islands:AddSection("Only In Third Sea")
	end
	-------------------------------[[ SeaEvent ]]-------------------------------
	if Sea2 or Sea3 then
	SeaEvent : AddSection("Settings")
	
	SeaEvent:AddSlider({
	Title = "Boat Speed",
	Description = "Set The Speed Of Your Boat",
	Min = 100,
	Max = 350,
	Increase = 10,
	Default = S["Boat Speed"],
	Callback = function(Value)
	_G.BoatSpeed = Value
	S["Boat Speed"] = Value
	SS()
	end})
	
	if Sea3 then
	SeaEvent : AddDropdown({
    Title = "Select Sea Level",
    Description = "Select Sea Level For Farm",
    Options = {"1", "2", "3", "4", "5", "6", "Inf"},
    Default = S["Select Sea Level"],
    MultiSelect = false,
    Callback = function(Value)
        S["Select Sea Level"] = Value
        SS()
    end})
	end
	
	SeaEvent:AddToggle({
	Title = "Drive Boat",
	Description = "Automatically Control The Boat While Sailing",
	Default = S["Drive Boat"],
	Callback = function(Value)
	_G.DriveBoat = Value
	S["Drive Boat"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Evade Sea Beast",
	Description = "Dodge Sea Beast Attacks Right Before Impact",
	Default = S["Evade Sea Beast"],
	Callback = function(Value)
	_G.EvadeSeaBeast = Value
	S["Evade Sea Beast"] = Value
	SS()
	end})
	
	if Sea3 then
	SeaEvent:AddToggle({
	Title = "Evade Terror",
	Description = "Dodge Terror's Attacks When It's About To Strike",
	Default = S["Evade Terror"],
	Callback = function(Value)
	S["Evade Terror"] = Value
	SS()
	end})
	end
	
	SeaEvent:AddToggle({
	Title = "Repair Boat",
	Description = "Fix The Boat When It Gets Damaged",
	Default = S["Repair Boat"],
	Callback = function(Value)
	S["Repair Boat"] = Value
	SS()
	end})
	
	if Sea3 then
	SeaEvent:AddToggle({
	Title = "Collect Sea Chests",
	Description = "Pick Up Floating Chests In The Ocean",
	Default = S["Collect Sea Chests"],
	Callback = function(Value)
	S["Collect Sea Chests"] = Value
	SS()
	end})
	end
	
	SeaEvent : AddSection("Sea Events")
	
	SeaEvent:AddToggle({
	Title = "Sea Beast",
	Description = "Enable Interaction With The Sea Beast",
	Default = S["Sea Beast"],
	Callback = function(Value)
	S["Sea Beast"] = Value
	SS()
	end})
	
	if Sea3 then
	SeaEvent:AddToggle({
	Title = "Terror Shark",
	Description = "Enable Interaction With The Terror Shark",
	Default = S["Terror Shark"],
	Callback = function(Value)
	S["Terror Shark"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Shark",
	Description = "Enable Interaction With Sharks",
	Default = S["Shark"],
	Callback = function(Value)
	S["Shark"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Piranhas",
	Description = "Enable Interaction With Piranhas",
	Default = S["Piranhas"],
	Callback = function(Value)
	S["Piranhas"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Ghost Ship",
	Description = "Enable Interaction With The Ghost Ship",
	Default = S["Ghost Ship"],
	Callback = function(Value)
	S["Ghost Ship"] = Value
	SS()
	end})
	end
	
	SeaEvent:AddToggle({
	Title = "Grand Fleet",
	Description = "Enable Interaction With The Large Group Of Enemy Ships",
	Default = S["Grand Fleet"],
	Callback = function(Value)
	S["Grand Fleet"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Fleet",
	Description = "Enable Interaction With The Group Of Enemy Ships Attacking Together",
	Default = S["Fleet"],
	Callback = function(Value)
	S["Fleet"] = Value
	SS()
	end})
	
	if Sea3 then
	SeaEvent : AddSection("Items/Quests")
	
	SeaEvent:AddToggle({
	Title = "Unlock And Upgrade Upgrade",
	Description = "Unlock And Upgrade The Boat Upgrade System",
	Default = S["Unlock And Upgrade Upgrade"],
	Callback = function(Value)
	S["Unlock And Upgrade Upgrade"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Farm Wooden Boards",
	Description = "Collect Wooden Boards Automatically",
	Default = S["Farm Wooden Boards"],
	Callback = function(Value)
	S["Farm Wooden Boards"] = Value
	SS()
	end})
	
	SeaEvent:AddToggle({
	Title = "Get Shark Anchor",
	Description = "Obtain The Shark Anchor Upgrade",
	Default = S["Get Shark Anchor"],
	Callback = function(Value)
	S["Get Shark Anchor"] = Value
	SS()
	end})
	end
	
	else
	SeaEvent:AddSection("Only In Second Or Third Sea")
	end
	-------------------------------[[ Fruits ]]-------------------------------
	
	Fruits : AddSection("Fruits")
	
	Fruits:AddToggle({
	Title = "Store Fruits",
	Description = "Automatically Store Collected Fruits",
	Default = S["Store Fruits"],
	Callback = function(Value)
	_G.StoreFruits = Value
	S["Store Fruits"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Random Fruits",
	Description = "Random Fruits in Gacha",
	Default = S["Random Fruits"],
	Callback = function(Value)
	_G.RandomFruits = Value
	S["Random Fruits"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Bring Fruits",
	Description = "Bring Fruits To You Automatically",
	Default = S["Bring Fruits"],
	Callback = function(Value)
	_G.BringFruits = Value
	S["Bring Fruits"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Collect Fruits",
	Description = "Collect All Fruits Automatically",
	Default = S["Collect Fruits"],
	Callback = function(Value)
	_G.CollectFruits = Value
	S["Collect Fruits"] = Value
	SS()
	end})
	if not Sea1 then
	Fruits : AddSection("Raid")
	
	Fruits:AddDropdown({
	Title = "Select Raid",
	Description = "Choose The Raid To Participate In",
	Options = RaidList,
	Default = S["Select Raid"],
	MultiSelect = false,
	Callback = function(Value)
	S["Select Raid"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Buy Chip",
	Description = "Automatically Buy Raid Chips",
	Default = S["Buy Chip"],
	Callback = function(Value)
	_G.BuyChips = Value
	S["Buy Chip"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Complete Raid",
	Description = "Automatically Complete The Raid",
	Default = S["Complete Raid"],
	Callback = function(Value)
	_G.AutoRaid = Value
	S["Complete Raid"] = Value
	SS()
	end})
	
	Fruits:AddToggle({
	Title = "Load Fruits",
	Description = "Automatically Load Fruits For Raid",
	Default = S["Load Fruits"],
	Callback = function(Value)
	_G.LoadFruits = Value
	S["Load Fruits"] = Value
	SS()
	end})
	else
	Fruits:AddSection("Only In Second Or Third Sea")
	end
	-------------------------------[[ Teleport ]]-------------------------------
	Teleport : AddSection("World")
	
	Teleport : AddButton({
    Title = "Sea 1",
    Description = "Go To The First Sea",
    Callback = function()
    FireRemote("TravelMain")
    end})
    
    Teleport : AddButton({
    Title = "Sea 2",
    Description = "Go To The Second Sea",
    Callback = function()
    FireRemote("TravelDressrosa")
    end})
    
    Teleport : AddButton({
    Title = "Sea 3",
    Description = "Go To The Third Sea",
    Callback = function()
    FireRemote("TravelZou")
    end})
    
	Teleport : AddSection("Islands")
	

	Teleport : AddDropdown({
    Title = "Select Island",
    Description = "",
    Options = IslandList,
    Default = IslandList[1],
    MultiSelect = false,
    Callback = function(Value)
        _G.SelectIsland = Value
    end
	})
	
	Teleport:AddButton({
    Title = "Travel Island",
    Description = "",
    Callback = function()
    _G.Cancel = true
    task.wait()
    _G.Cancel = false
        Tween(IslandsPositions[_G.SelectIsland])
    end})
    
    if #PortalList > 0 then
	Teleport : AddSection("Portals")
	
	Teleport : AddDropdown({
    Title = "Select Portal",
    Description = "Select Portal To Go To",
    Options = PortalList,
    Default = PortalList[1],
    MultiSelect = false,
    Callback = function(Value)
        _G.SelectPortal = Value
    end
	})
	
	Teleport : AddButton({
    Title = "Teleport Portal",
    Description = "Enter the Selected Portal",
    Callback = function()
    Tween(PortalPositions[_G.SelectPortal])
    end})
    end
    
	Teleport : AddSection("NPCS")
	
	Teleport:AddDropdown({
	Title = "Select NPC",
	Description = "Choose The NPC To Teleport To",
	Options = NPCList,
	Default = NPCList[1],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectNPC = Value
	end})
	
	Teleport:AddButton({
	Title = "Teleport To NPC",
	Description = "Automatically Teleport To Selected NPC",
	Callback = function(Value)
	Tween(NPCListPos[_G.SelectNPC])
	end})
	
	-------------------------------[[ Stats ]]-------------------------------
	Stats : AddSection("Status")
	
	local AvailableStatus = Stats:AddParagraph({
	Title = "Available Status",
	Description = "Shows If Status Is Available",
	})
	
	local MeleeStatus = Stats:AddParagraph({
	Title = "Melee Status",
	Description = "Current Melee Status Details",
	})
	
	local DefenseStatus = Stats:AddParagraph({
	Title = "Defense Status",
	Description = "Current Defense Status Details",
	})
	
	local SwordStatus = Stats:AddParagraph({
	Title = "Sword Status",
	Description = "Current Sword Status Details",
	})
	
	local GunStatus = Stats:AddParagraph({
	Title = "Gun Status",
	Description = "Current Gun Status Details",
	})
	
	local DemonStatus = Stats:AddParagraph({
	Title = "Demon Fruit Status",
	Description = "Current Demon Fruit Status Details",
	})
	
	task.spawn(function() 
		while task.wait() do
			local Data = LocalPlayer.Data
			AvailableStatus:SetTitle("Available Points: "..Data.Points.Value)
			MeleeStatus:SetTitle("Melee Status: "..Data.Stats.Melee.Level.Value)
			DefenseStatus:SetTitle("Defense Status: "..Data.Stats.Defense.Level.Value)
			SwordStatus:SetTitle("Sword Status: "..Data.Stats.Sword.Level.Value)
			GunStatus:SetTitle("Gun Status: "..Data.Stats.Gun.Level.Value)
			DemonStatus:SetTitle("Demon Fruit Status: "..Data.Stats["Demon Fruit"].Level.Value)
		 end 
	end)
	
	Stats : AddSection("Auto Stats")
	
	Stats:AddSlider({
	Title = "Select Points Amount",
	Description = "Choose How Many Points To Allocate",
	Min = 1,
	Max = 100,
	Increase = 1,
	Default = S["Select Points Amount"],
	Callback = function(Value)
	_G.SelectPointAmount = Value
	S["Select Points Amount"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Increment Points",
	Description = "Automatically Increment Points",
	Default = S["Increment Points"],
	Callback = function(Value)
	_G.IncrementPoints = Value
	S["Increment Points"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Melee Points",
	Description = "Increase Melee Stats",
	Default = S["Melee Points"],
	Callback = function(Value)
	_G.MeleePoints = Value
	S["Melee Points"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Defense Points",
	Description = "Increase Defense Stats",
	Default = S["Defense Points"],
	Callback = function(Value)
	_G.DefensePoints = Value
	S["Defense Points"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Sword Points",
	Description = "Increase Sword Stats",
	Default = S["Sword Points"],
	Callback = function(Value)
	_G.SwordPoints = Value
	S["Sword Points"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Gun Points",
	Description = "Increase Gun Stats",
	Default = S["Gun Points"],
	Callback = function(Value)
	_G.GunPoints = Value
	S["Gun Points"] = Value
	SS()
	end})
	
	Stats:AddToggle({
	Title = "Demon Fruit Points",
	Description = "Increase Demon Fruit Stats",
	Default = S["Demon Fruit Points"],
	Callback = function(Value)
	_G.DemonFruitPoints = Value
	S["Demon Fruit Points"] = Value
	SS()
	end})
	
	SafeSpawn(function()
		while task.wait() do
			if _G.IncrementPoints then
				if LocalPlayer.Data.Points.Value > 0 then
					if _G.MeleePoints then
						FireRemote("AddPoint","Melee", _G.SelectPointAmount)
					end
					if _G.DefensePoints then 
						FireRemote("AddPoint","Defense", _G.SelectPointAmount)
					end
					if _G.SwordPoints then
						FireRemote("AddPoint","Sword", _G.SelectPointAmount)
					end
					if _G.GunPoints then
						FireRemote("AddPoint","Gun", _G.SelectPointAmount)
					end
					if _G.DemonFruitPoints then
						FireRemote("AddPoint","Demon Fruit", _G.SelectPointAmount)
					end
				end
			end
		end
	end)
	
	-------------------------------[[ Player ]]-------------------------------
	Player : AddSection("Support")
	
	Player:AddSlider({
	Title = "Select Speed",
	Description = "Choose The Speed Value",
	Min = 10,
	Max = 500,
	Increase = 10,
	Default = S["Select Speed"],
	Callback = function(Value)
	_G.SelectModifySpeed = Value
	S["Select Speed"] = Value
	SS()
	end})
	
	Player:AddToggle({
	Title = "Modify Speed",
	Description = "Enable Speed Modification",
	Default = S["Modify Speed"],
	Callback = function(Value)
	_G.ModifySpeed = Value
	S["Modify Speed"] = Value
	SS()
	end})
	
	Player:AddSlider({
	Title = "Select Jump Power",
	Description = "Choose The Jump Power Value",
	Min = 50,
	Max = 500,
	Increase = 50,
	Default = S["Select Jump Power"],
	Callback = function(Value)
	_G.SelectJumpPower = Value
	S["Select Jump Power"] = Value
	SS()
	end})
	
	Player:AddToggle({
	Title = "Modify Jump Power",
	Description = "Enable Jump Power Modification",
	Default = S["Modify Jump Power"],
	Callback = function(Value)
	_G.ModifyJumpPower = Value
	S["Modify Jump Power"] = Value
	SS()
	end})
	
	Player:AddSlider({
	Title = "Select Dash Distance",
	Description = "Choose The Dash Distance",
	Min = 10,
	Max = 150,
	Increase = 10,
	Default = S["Select Dash Distance"],
	Callback = function(Value)
	_G.SelectDashDistance = Value
	S["Select Dash Distance"] = Value
	SS()
	end})
	
	Player:AddToggle({
	Title = "Modify Dash",
	Description = "Enable Dash Modification",
	Default = S["Modify Dash"],
	Callback = function(Value)
	_G.ModifyDash = Value
	S["Modify Dash"] = Value
	SS()
	end})
	
	Player:AddToggle({
    Title = "Walk On Water",
    Description = "Permite Andar Sobre a Água",
    Default = S["Walk On Water"],
    Callback = function(Value)
    _G.WalkOnWater = Value
        S["Walk On Water"] = Value
        SS()
    end})
	
	task.spawn(function()
		while task.wait() do
			if _G.WalkOnWater then 
				workspace.Map["WaterBase-Plane"].Size = Vector3.new(1000, 112, 1000)
			else
				workspace.Map["WaterBase-Plane"].Size = Vector3.new(1000, 80, 1000)
			end
		end
	end)
	
	Player : AddSection("Combat")
	
	Player : AddButton({
    Title = "Update Players List",
    Description = "",
    Callback = function()
    UpdatePlayerList()
    end})
    
	PlayersList = Player:AddDropdown({
	Title = "Select Player",
	Description = "Choose The Player",
	Options = AllPlayersList,
	Default = AllPlayersList[1],
	MultiSelect = false,
	Callback = function(Value)
	_G.SelectPlayer = Value
	end})
	
	Player:AddToggle({
	Title = "Teleport To Player",
	Description = "Automatically Teleport To Selected Player",
	Default = false,
	Callback = function(Value)
	_G.TeleportToPlayer = Value
	end})
	
	Player:AddToggle({
	Title = "Aimbot Player",
	Description = "Enable Aimbot For Player",
	Default = S["Aimbot Player"],
	Callback = function(Value)
	_G.AimbotPlayerSelected = Value
	S["Aimbot Player"] = Value
	SS()
	end})
	
	-------------------------------[[ Race ]]-------------------------------
	if not Sea1 then
	Race : AddSection("Status")
	
	RaceStatus = Race:AddParagraph({
	Title = "Race : "..CheckRace(),
	Description = "Current Race Progress and Info",
	})
	
	task.spawn(function()
		while task.wait() do
			RaceStatus:SetTitle("Race : "..CheckRace())
		end
	end)
	
	local MiragePuzzleStatus = Race : AddParagraph({
	Title = "Mirage Puzzle : ❌",
	Description = ""
	})
	
	task.spawn(function()
		while task.wait() do
			MiragePuzzleStatus:SetTitle("Mirage Puzzle : "..CheckMiragePuzzle())
		end
	end)
	
	local AcientStatus = Race : AddParagraph({
	Title = "Acient One Status : "..CheckAcientOneStatus(),
	Description = ""
	})

	task.spawn(function()
		while task.wait() do
			AcientStatus:SetTitle("Acient One Status : "..CheckAcientOneStatus())
		end
	end)
	if Sea3 then
	local MoonStatus = Race:AddParagraph({
	Title = GetMoonStatus(),
	Description = "Status Related To The Moon In The Race",
	})
	task.spawn(function()
		while task.wait() do
			MoonStatus:SetTitle(GetMoonStatus())
		end
	end)
	
	end
	
	Race : AddSection("Race Upgrade")
	
	Race:AddToggle({
	Title = "Evolve To V2",
	Description = "Enable Evolution To V2",
	Default = S["Evolve To V2"],
	Callback = function(Value)
	_G.UnlockV2Race = Value
	S["Evolve To V2"] = Value
	SS()
	end
	})
	
	Race:AddToggle({
	Title = "Evolve To V3",
	Description = "Evolve the Race to V3 [ Human, Mink, Cyborg ]",
	Default = S["Evolve To V3"],
	Callback = function(Value)
	_G.UnlockV3Race = Value
	S["Evolve To V3"] = Value
	SS()
	end
	})
	
	if Sea2 then
	if FireRemote("Ectoplasm", "BuyCheck", 4) == 3 then
	Race:AddToggle({
    Title = "Unlock Ghoul Race",
    Description = "Collect the Torch of Hell and Collect the Race",
    Default = S["Unlock Ghoul Race"],
    Callback = function(Value)
    _G.UnlockGhoulRace = Value
        S["Unlock Ghoul Race"] = Value
        SS()
    end})
	end
	
	if workspace.Map.CircleIsland:FindFirstChild("BlockPart") and workspace.Map.CircleIsland.BlockPart.CanCollide then
	Race:AddToggle({
    Title = "Unlock Cyborg Race",
    Description = "Unlocks the Cyborg Race",
    Default = S["Unlock Cyborg Race"],
    Callback = function(Value)
    _G.UnlockCyborg = Value
        S["Unlock Cyborg Race"] = Value
        SS()
    end})
	end
	end
	
	if Sea3 then
	Race:AddSection("Trial")
	
	Race:AddToggle({
	Title = "Complete Trial",
	Description = "Complete the All Race Trial",
	Default = S["Trial V4"],
	Callback = function(Value)
	_G.AutoTrial = Value
	S["Trial V4"] = Value
	SS()
	end
	})
	
	Race:AddToggle({
	Title = "Auto Kill Players After Trial",
	Description = "Kills All Players Together In Trial",
	Default = S["Auto Kill Players After Trial"],
	Callback = function(Value)
	S["Auto Kill Players After Trial"] = Value
	SS()
	end
	})
	
	Race:AddButton({
	Title = "Update List",
	Description = "Refresh The Player List",
	Callback = function()
	end
	})
	
	Race:AddDropdown({
	Title = "Select Player",
	Description = "Choose Player To Kill",
	Options = {},
	Default = S["Select Player"],
	MultiSelect = false,
	Callback = function(Value)
	S["Select Player"] = Value
	SS()
	end
	})
	
	Race:AddToggle({
	Title = "Kill Player Selected",
	Description = "Automatically Kill The Selected Player",
	Default = S["Kill Player Selected"],
	Callback = function(Value)
	S["Kill Player Selected"] = Value
	SS()
	end
	})
	Race : AddSection("Teleport")
	
	Race : AddButton({
    Title = "Go To Great Tree",
    Description = "Go To The Top Of The Great Tree",
    Callback = function()
    Tween(Vector3.new(3029, 2280, -7325))
    end})
    
	Race : AddButton({
    Title = "Teleport To Race Door",
    Description = "Go To The Door Of The Race",
    Callback = function()
    local RaceName = LocalPlayer.Data.Race.Value
	local racePositions = {
		["Human"] = Vector3.new(29221, 14890, -205),
		["Skypiea"] = Vector3.new(28960, 14919, 235),
		["Fishman"] = Vector3.new(28231, 14890, -211),
		["Cyborg"] = Vector3.new(28502, 14895, -423),
		["Ghoul"] = Vector3.new(28674, 14890, 445),
		["Mink"] = Vector3.new(29012, 14890, -380)
	}
	if RaceName == "Draco" then
		local island = workspace.Map:FindFirstChild("PrehistoricIsland")
		local tp = island and island:FindFirstChild("TrialTeleport")
		if tp then
			Tween(tp.Position)
		end
	else
		local pos = racePositions[RaceName]
		if pos then
			Tween(pos)
		end
	end
    end})
    
    Race : AddButton({
    Title = "Go To Acient Clock",
    Description = "Go To The Acient Clock ",
    Callback = function()
    Tween(Vector3.new(29549, 15068, -87))
    end})
    
    Race : AddButton({
    Title = "Go To Acient One",
    Description = "Go To The Acient One",
    Callback = function()
    Tween(Vector3.new(28973, 14889, -116))
    end})
    
	Race:AddSection("Gears")
	
	local Gear1Status = Race:AddParagraph({
	Title = "Gear 1 Status",
	Description = "",
	})
	
	local Gear2Status = Race:AddParagraph({
	Title = "Gear 2 Status",
	Description = "",
	})
	
	local Gear3Status = Race:AddParagraph({
	Title = "Gear 3 Status",
	Description = "",
	})
	
	task.spawn(function()
		while task.wait() do
			Gear1Status:SetTitle("Gear 1 Color : "..GetGearColor(1))
			Gear2Status:SetTitle("Gear 2 Color : "..GetGearColor(2))
			Gear3Status:SetTitle("Gear 3 Color : "..GetGearColor(3))
		end
	end)
	
	Race:AddToggle({
	Title = "Buy Stage",
	Description = "Buy The Race Stage",
	Default = S["Buy Stage"],
	Callback = function(Value)
	_G.BuyStage = Value
	S["Buy Stage"] = Value
	SS()
	end})
	end
	
	else
	Race : AddSection("Only In Second Or Third Sea")
	end
	-------------------------------[[ Shop ]]-------------------------------
	Shop:AddSection("Christmas")

	Shop:AddButton({
	Title = "Buy 2x EXP (15 mins.)",
	Description = "Need 50 Candies",
	Callback = function()
		FireRemote("Candies", "Buy", 1, 1)
	end})
	
	Shop:AddButton({
	Title = "Stats Refund",
	Description = "Need 75 Candies",
	Callback = function()
		FireRemote("Candies", "Buy", 1, 2)
	end})
	
	Shop:AddButton({
	Title = "Race Reroll",
	Description = "Need 100 Candies",
	Callback = function()
		FireRemote("Candies", "Buy", 1, 3)
	end})
	
	Shop:AddButton({
	Title = "Buy 200 Frags",
	Description = "Need 50 Candies",
	Callback = function()
		FireRemote("Candies", "Buy", 2, 1)
	end})
	
	Shop:AddButton({
	Title = "Buy 500 Frags",
	Description = "Need 100 Candies",
	Callback = function()
		FireRemote("Candies", "Buy", 2, 2)
	end})
	
	Shop:AddSection("Halloween")
	
	Shop:AddButton({
	Title = "Buy Surprise",
	Description = "Need Item: 50 Bones",
	Callback = function()
		FireRemote("Bones", "Buy", 1, 1)
	end})
	
	Shop:AddButton({
	Title = "Stats Refund",
	Description = "Need Item: 150 Bones",
	Callback = function()
		FireRemote("Bones", "Buy", 1, 2)
	end})
	
	Shop:AddButton({
	Title = "Race Reroll",
	Description = "Need Item: 300 Bones",
	Callback = function()
		FireRemote("Bones", "Buy", 1, 3)
	end})
	
	Shop : AddSection("Misc")
	
	Shop : AddButton({
    Title = "Reroll Race",
    Description = "",
    Callback = function()
    FireRemote("BlackbeardReward", "Reroll", "1")
    FireRemote("BlackbeardReward", "Reroll", "2")
    end})
    
    Shop : AddButton({
    Title = "Stats Refund",
    Description = "",
    Callback = function()
    FireRemote("BlackbeardReward", "Refund", "1")
    FireRemote("BlackbeardReward", "Refund", "2")
    end})
    
	Shop:AddSection("Ability Teacher")
	
	Shop:AddButton({
	Title = "Buy Geppo",
	Description = "",
	Callback = function()
		FireRemote("BuyHaki", "Geppo")
	end})
	
	Shop:AddButton({
	Title = "Buy Buso",
	Description = "",
	Callback = function()
		FireRemote("BuyHaki", "Buso")
	end})
	
	Shop:AddButton({
	Title = "Buy Soru",
	Description = "",
	Callback = function()
		FireRemote("BuyHaki", "Soru")
	end})
	
	Shop:AddButton({
	Title = "Buy Ken",
	Description = "",
	Callback = function()
		FireRemote("Ken", "Buy")
	end})
	
	Shop:AddSection("Fighting Styles")
	
	Shop:AddButton({
	Title = "Buy Black Leg",
	Description = "",
	Callback = function()
		FireRemote("BuyBlackLeg")
	end})
	
	Shop:AddButton({
	Title = "Buy Eletric",
	Description = "",
	Callback = function()
		FireRemote("BuyElectro")
	end})
	
	Shop:AddButton({
	Title = "Buy Fishman Karate",
	Description = "",
	Callback = function()
		FireRemote("BuyFishmanKarate")
	end})
	
	Shop:AddButton({
	Title = "Buy Dragon Claw",
	Description = "",
	Callback = function()
		FireRemote("BlackbeardReward", "DragonClaw", "1")
		FireRemote("BlackbeardReward", "DragonClaw", "2")
	end})
	
	Shop:AddButton({
	Title = "Buy Superhuman",
	Description = "",
	Callback = function()
		FireRemote("BuySuperhuman")
	end})
	
	Shop:AddButton({
	Title = "Buy Death Step",
	Description = "",
	Callback = function()
		FireRemote("BuyDeathStep")
	end})
	
	Shop:AddButton({
	Title = "Buy Sharkman Karate",
	Description = "",
	Callback = function()
		FireRemote("BuySharkmanKarate")
	end})
	
	Shop:AddButton({
	Title = "Buy Electric Claw",
	Description = "",
	Callback = function()
		FireRemote("BuyElectricClaw")
	end})
	
	Shop:AddButton({
	Title = "Buy Dragon Talon",
	Description = "",
	Callback = function()
		FireRemote("BuyDragonTalon")
	end})
	
	Shop:AddButton({
	Title = "Buy GodHuman",
	Description = "",
	Callback = function()
		FireRemote("BuyGodhuman")
	end})
	
	Shop:AddButton({
	Title = "Buy Sanguine Art",
	Description = "",
	Callback = function()
		FireRemote("BuySanguineArt")
	end})
	
	--[[Shop:AddButton({
	Title = "Buy Divine Art",
	Description = "",
	Callback = function()
		FireRemote("BuyDivineArt")
	end})]]
	
	Shop:AddSection("Sword")
	
	Shop:AddButton({
	Title = "Buy Katana",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Katana")
	end})
	
	Shop:AddButton({
	Title = "Buy Cutlass",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Cutlass")
	end})
	
	Shop:AddButton({
	Title = "Buy Dual Katana",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Dual Katana")
	end})
	
	Shop:AddButton({
	Title = "Buy Iron Mace",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Iron Mace")
	end})
	
	Shop:AddButton({
	Title = "Buy Triple Katana",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Triple Katana")
	end})
	
	Shop:AddButton({
	Title = "Buy Pipe",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Pipe")
	end})
	
	Shop:AddButton({
	Title = "Buy Dual-Headed Blade",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Dual-Headed Blade")
	end})
	
	Shop:AddButton({
	Title = "Buy Soul Cane",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Soul Cane")
	end})
	
	Shop:AddButton({
	Title = "Buy Bisento",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Bisento")
	end})
	
	Shop:AddButton({
	Title = "Buy Pole V2",
	Description = "",
	Callback = function()
		FireRemote("ThunderGodTalk")
	end})
	
	Shop:AddSection("Gun")
	
	Shop:AddButton({
	Title = "Buy Musket",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Musket")
	end})
	
	Shop:AddButton({
	Title = "Buy Slingshot",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Slingshot")
	end})
	
	Shop:AddButton({
	Title = "Buy Flintlock",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Flintlock")
	end})
	
	Shop:AddButton({
	Title = "Buy Refined Slingshot",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Refined Slingshot")
	end})
	
	Shop:AddButton({
	Title = "Buy Dual Flintlock",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Refined Flintlock")
	end})
	
	Shop:AddButton({
	Title = "Buy Cannon",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Cannon")
	end})
	
	Shop:AddButton({
	Title = "Buy Kabucha",
	Description = "",
	Callback = function()
		FireRemote("BlackbeardReward", "Slingshot", "1")
		FireRemote("BlackbeardReward", "Slingshot", "2")
	end})
	
	Shop:AddSection("Accessory")
	
	Shop:AddButton({
	Title = "Buy Black Cape",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Black Cape")
	end})
	
	Shop:AddButton({
	Title = "Buy Swordsman Hat",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Swordsman Hat")
	end})
	
	Shop:AddButton({
	Title = "Buy Tomoe Ring",
	Description = "",
	Callback = function()
		FireRemote("BuyItem", "Tomoe Ring")
	end})
	
	Shop:AddSection("Race")
	
	Shop:AddButton({
	Title = "Ghoul Race",
	Description = "",
	Callback = function()
		FireRemote("Ectoplasm", "Change", 4)
	end})
	
	Shop:AddButton({
	Title = "Cyborg Race",
	Description = "",
	Callback = function()
		FireRemote("CyborgTrainer", "Buy")
	end})
	
	if Sea3 then
	Shop:AddButton({
	Title = "Buy Draco",
	Description = "",
	Callback = function()
		local Pos = Vector3.new(5814, 1208, 884)
		local Char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
		Tween(Pos)
		repeat task.wait()
		until (Char.HumanoidRootPart.Position - Pos).Magnitude < 5
		InteractDragonQuest("Dragon Wizard", "DragonRace")
	end})
	end
	
	Shop:AddSection("Dojo")
	
	Shop:AddButton({
	Title = "Craft Dragon Heart",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "Dragonheart")
	end})
	
	Shop:AddButton({
	Title = "Dragonstorm",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "Dragonstorm")
	end})
	
	Shop:AddButton({
	Title = "Volcanic Magnet",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "Volcanic Magnet")
	end})
	
	Shop:AddButton({
	Title = "Craft T-Rex Skull",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "TRexSkull")
	end})
	
	Shop:AddButton({
	Title = "Dino Hood", 
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "DinoHood")
	end})
	
	Shop:AddSection("Beast Hunter")
	
	Shop:AddButton({
	Title = "Craft Shark Tooth Necklace",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "SharkAnchor")
	end})
	
	Shop:AddButton({
	Title = "Craft Terror Jaw",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "TerrorJaw")
	end})
	
	Shop:AddButton({
	Title = "Craft Monster Magnet",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "SharkAnchor")
	end})
	
	Shop:AddSection("Shark Hunter")
	
	Shop:AddButton({
	Title = "Craft Leviathan Crown",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "LeviathanCrown")
	end})
	
	Shop:AddButton({
	Title = "Craft Leviathan Shield",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "LeviathanShield")
	end})
	
	Shop:AddButton({
	Title = "Craft Beast Hunter",
	Description = "",
	Callback = function()
		FireRemote("CraftItem", "Craft", "LeviathanBoat")
	end})
	
	Shop:AddSection("Dragon Talon Sage")
	
	Shop:AddButton({
	Title = "Craft Common Scroll",
	Description = "",
	Callback = function()
		FireRemote(unpack(ShopService["Common Scroll"]))
	end})
	
	Shop:AddButton({
	Title = "Craft Rare Scroll",
	Description = "",
	Callback = function()
		FireRemote(unpack(ShopService["Rare Scroll"]))
	end})
	
	Shop:AddButton({
	Title = "Craft Legendary Scroll",
	Description = "",
	Callback = function()
		FireRemote(unpack(ShopService["Legendary Scroll"]))
	end})
	
	Shop:AddButton({
	Title = "Craft Mythical Scroll",
	Description = "",
	Callback = function()
		FireRemote(unpack(ShopService["Mythical Scroll"]))
	end})
	
	-------------------------------[[ Visual ]]-------------------------------
	Visual : AddSection("Extra Sensorial Perception")
	
	Visual:AddDropdown({
    Title = "Font ESP",
    Description = "Choose The Font Used In ESP Text",
    Options = {"Legacy", "Arial", "Gotham", "Code", "Fantasy", "SciFi", "Cartoon", "Highway", "LuckiestGuy", "FredokaOne", "Arcade", "Creepster", "PermanentMarker", "Roboto", "Bangers", "SourceSans", "JosefinSans", "TitilliumWeb", "SpecialElite"},
    Default = S["Font ESP"],
    MultiSelect = false,
    Callback = function(Value)
        _G.FontESP = Value
        S["Font ESP"] = Value
        SS()
    end})
    
	Visual : AddSlider({
	Title = "Esp Size",
	Description = "Change ESP Font Size",
	Min = 8,
	Max = 15,
	Increase = 1,
	Default = S["Font Size"],
	Callback = function(Value)
	_G.FontSize = Value
	S["Font Size"] = Value
	SS()
	end
	})
	
	Visual:AddToggle({
	Title = "ESP Players",
	Description = "See Information: Name, Distance, Health/Max Health, Energy/Max Energy",
	Default = S["ESP Players"],
	Callback = function(Value)
	_G.ESPPlayers = Value
	S["ESP Players"] = Value
	SS()
	end})
	
	Visual:AddToggle({
	Title = "ESP Fruits",
	Description = "Create an Image with the Fruit Image and Show the Distance Below",
	Default = S["ESP Fruits"],
	Callback = function(Value)
	_G.ESPFruits = Value
	S["ESP Fruits"] = Value
	SS()
	end})
	
	Visual:AddToggle({
	Title = "ESP Berries",
	Description = "Creates an Image of the Berry with the Distance Below",
	Default = S["ESP Berries"],
	Callback = function(Value)
	_G.ESPBerries = Value
	S["ESP Berries"] = Value
	SS()
	end})
	
	Visual:AddToggle({
	Title = "ESP Chests",
	Description = "See Information: Name, Distance",
	Default = S["ESP Chests"],
	Callback = function(Value)
	_G.ESPChests = Value
	S["ESP Chests"] = Value
	SS()
	end})
	
	Visual:AddToggle({
	Title = "ESP Islands",
	Description = "See Information: Name, Distance",
	Default = S["ESP Islands"],
	Callback = function(Value)
	_G.ESPIslands = Value
	S["ESP Islands"] = Value
	SS()
	end})
	
	if Sea2 then
	Visual:AddToggle({
	Title = "ESP Flowers",
	Description = "See Information: Name, Distance",
	Default = S["ESP Flowers"],
	Callback = function(Value)
	_G.ESPFlowers = Value
	S["ESP Flowers"] = Value
	SS()
	end})
	end
	
	if Sea3 then
	Visual:AddToggle({
	Title = "ESP Real Fruits",
	Description = "See Information: Name, Distance Of Haki Puzzle Fruits V2",
	Default = S["ESP Real Fruits"],
	Callback = function(Value)
	_G.ESPRealFruits = Value
	S["ESP Real Fruits"] = Value
	SS()
	end})
	end
	
	   if Sea3 then
	Visual:AddToggle({
	Title = "ESP Blue Gear",
	Description = "See Information: Name, Distance",
	Default = S["ESP Blue Gear"],
	Callback = function(Value)
	_G.ESPBlueGear = Value
	S["ESP Blue Gear"] = Value
	SS()
	end})
	end
	
--[[	Visual : AddSection("Fake")
	
	Visual:AddTextBox({
	Title = "Modify Level",
	Description = "",
	PlaceholderText = "Enter Level",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Level.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Beli",
	Description = "",
	PlaceholderText = "Enter Beli",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Beli.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Fragments",
	Description = "",
	PlaceholderText = "Enter Fragments",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Fragments.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Bounty/Honor",
	Description = "",
	PlaceholderText = "Enter Bounty or Honor",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.leaderstats["Bounty/Honor"].Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Race",
	Description = "",
	PlaceholderText = "Enter Race",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Race.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Subclass",
	Description = "",
	PlaceholderText = "Enter Subclass",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Subclass.Value = Value 
	end})
	
	Visual:AddTextBox({
	Title = "Modify Available Points",
	Description = "",
	PlaceholderText = "Enter Available Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Points.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Melee Points",
	Description = "",
	PlaceholderText = "Enter Melee Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Stats.Melee.Level.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Defense Points",
	Description = "",
	PlaceholderText = "Enter Defense Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Stats.Defense.Level.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Sword Points",
	Description = "",
	PlaceholderText = "Enter Sword Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Stats.Sword.Level.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Gun Points",
	Description = "",
	PlaceholderText = "Enter Gun Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Stats.Melee.Level.Value = Value
	end})
	
	Visual:AddTextBox({
	Title = "Modify Demon Fruit Points",
	Description = "",
	PlaceholderText = "Enter Demon Fruit Points",
	Callback = function(Value)
	game:GetService("Players").LocalPlayer.Data.Stats["Demon Fruit"].Level.Value = Value
	end})]]--
	
	-------------------------------[[ Skills ]]-------------------------------
	Skills : AddSection("Weapons")
	
	Skills:AddToggle({
	Title = "Use Melee",
	Description = "",
	Default = S["Use Melee"],
	Callback = function(Value)
	S["Use Melee"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Sword",
	Description = "",
	Default = S["Use Sword"],
	Callback = function(Value)
	S["Use Sword"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Gun",
	Description = "",
	Default = S["Use Gun"],
	Callback = function(Value)
	S["Use Gun"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Blox Fruit",
	Description = "",
	Default = S["Use Blox Fruit"],
	Callback = function(Value)
	S["Use Blox Fruit"] = Value
	SS()
	end})
	
	Skills:AddSection("Melee Skills")
	
	Skills:AddToggle({
	Title = "Use Skill Z",
	Description = "",
	Default = S["Melee Use Skill Z"],
	Callback = function(Value)
	S["Melee Use Skill Z"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill Z",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Melee Hold Time Skill Z"],
	Callback = function(Value)
	S["Melee Hold Time Skill Z"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill X",
	Description = "",
	Default = S["Melee Use Skill X"],
	Callback = function(Value)
	S["Melee Use Skill X"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill X",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Melee Hold Time Skill X"],
	Callback = function(Value)
	S["Melee Hold Time Skill X"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill C",
	Description = "",
	Default = S["Melee Use Skill C"],
	Callback = function(Value)
	S["Melee Use Skill C"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill C",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Melee Hold Time Skill C"],
	Callback = function(Value)
	S["Melee Hold Time Skill C"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill V",
	Description = "",
	Default = S["Melee Use Skill V"],
	Callback = function(Value)
	S["Melee Use Skill V"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill V",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Melee Hold Time Skill V"],
	Callback = function(Value)
	S["Melee Hold Time Skill V"] = Value
	SS()
	end})
	
	
	
	Skills:AddSection("Sword Skills")
	
	Skills:AddToggle({
	Title = "Use Skill Z",
	Description = "",
	Default = S["Sword Use Skill Z"],
	Callback = function(Value)
	S["Sword Use Skill Z"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill Z",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Sword Hold Time Skill Z"],
	Callback = function(Value)
	S["Sword Hold Time Skill Z"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill X",
	Description = "",
	Default = S["Sword Use Skill X"],
	Callback = function(Value)
	S["Sword Use Skill X"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill X",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Sword Hold Time Skill X"],
	Callback = function(Value)
	S["Sword Hold Time Skill X"] = Value
	SS()
	end})
	
	Skills:AddSection("Gun Skills")
	
	Skills:AddToggle({
	Title = "Use Skill Z",
	Description = "",
	Default = S["Gun Use Skill Z"],
	Callback = function(Value)
	S["Gun Use Skill Z"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill Z",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Gun Hold Time Skill Z"],
	Callback = function(Value)
	S["Gun Hold Time Skill Z"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill X",
	Description = "",
	Default = S["Gun Use Skill X"],
	Callback = function(Value)
	S["Gun Use Skill X"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill X",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Gun Hold Time Skill X"],
	Callback = function(Value)
	S["Gun Hold Time Skill X"] = Value
	SS()
	end})
	
	
	
	Skills:AddSection("Blox Fruit Skills")
	
	Skills:AddToggle({
	Title = "Use Skill Z",
	Description = "",
	Default = S["Blox Fruit Use Skill Z"],
	Callback = function(Value)
	S["Blox Fruit Use Skill Z"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill Z",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Blox Fruit Hold Time Skill Z"],
	Callback = function(Value)
	S["Blox Fruit Hold Time Skill Z"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill X",
	Description = "",
	Default = S["Blox Fruit Use Skill X"],
	Callback = function(Value)
	S["Blox Fruit Use Skill X"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill X",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Blox Fruit Hold Time Skill X"],
	Callback = function(Value)
	S["Blox Fruit Hold Time Skill X"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill C",
	Description = "",
	Default = S["Blox Fruit Use Skill C"],
	Callback = function(Value)
	S["Blox Fruit Use Skill C"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill C",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Blox Fruit Hold Time Skill C"],
	Callback = function(Value)
	S["Blox Fruit Hold Time Skill C"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill V",
	Description = "",
	Default = S["Blox Fruit Use Skill V"],
	Callback = function(Value)
	S["Blox Fruit Use Skill V"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill V",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Blox Fruit Hold Time Skill V"],
	Callback = function(Value)
	S["Blox Fruit Hold Time Skill V"] = Value
	SS()
	end})
	
	Skills:AddToggle({
	Title = "Use Skill F",
	Description = "",
	Default = S["Blox Fruit Use Skill F"],
	Callback = function(Value)
	S["Blox Fruit Use Skill F"] = Value
	SS()
	end})
	
	Skills:AddSlider({
	Title = "Hold Time Skill F",
	Description = "",
	Min = 0,
	Max = 2,
	Increase = 0.1,
	Default = S["Blox Fruit Hold Time Skill F"],
	Callback = function(Value)
	S["Blox Fruit Hold Time Skill F"] = Value
	SS()
	end})
	
	-------------------------------[[ More ]]-------------------------------
	More : AddSection("Announcement")
	
	More : AddParagraph({
	Title = "If You Abuse The Bugs And Suggestions Features, \nYou Will Have Your Account Banned From Using The Hub",
	Description = ""
	})
	
	More : AddSection("Bugs")
	
	More:AddTextBox({
	Title = "Bug Report",
	Description = "Describe Exactly What Happened",
	PlaceholderText = "Paste Here",
	Callback = function(Value)
	_G.Bug = Value 
	end})
	
	More : AddButton({
	Title = "Submit Bug",
	Description = "Send Your Message To The Team",
	Callback = function()
		if IsRealText(_G.Bug) then
			SendWebhookBug(_G.Bug)
		end
	end})
	
	More : AddSection("Suggestions")
	
	More:AddTextBox({
	Title = "Describe Your Suggestion",
	Description = "All Suggestions Are Welcome, We Count On You To Make\nThe Hub Even Better ",
	PlaceholderText = "Paste Here",
	Callback = function(Value)
	_G.Suggestion = Value
	end})
	
	More : AddButton({
	Title = "Submit Suggestion",
	Description = "Send Your Suggestion To Our Team",
	Callback = function()
		if IsRealText(_G.Suggestion) then
			SendWebhookSug(_G.Suggestion)
		end
	end})
	
	if LocalPlayer.Name == "lucasviniciussoa2" then
	More : AddButton({
	Title = "Copy Cord",
	Description = "",
	Callback = function()
		setclipboard(math.floor(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X) .. ", " .. math.floor(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y) .. ", " .. math.floor(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z))
	end})
	end
	
	
